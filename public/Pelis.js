var MyBundle = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var platform$1 = {exports: {}};

	/*!
	 * Platform.js v1.3.6
	 * Copyright 2014-2020 Benjamin Tan
	 * Copyright 2011-2013 John-David Dalton
	 * Available under MIT license
	 */
	platform$1.exports;

	(function (module, exports) {
	(function() {

		  /** Used to determine if values are of the language type `Object`. */
		  var objectTypes = {
		    'function': true,
		    'object': true
		  };

		  /** Used as a reference to the global object. */
		  var root = (objectTypes[typeof window] && window) || this;

		  /** Detect free variable `exports`. */
		  var freeExports = exports;

		  /** Detect free variable `module`. */
		  var freeModule = module && !module.nodeType && module;

		  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */
		  var freeGlobal = freeExports && freeModule && typeof commonjsGlobal == 'object' && commonjsGlobal;
		  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
		    root = freeGlobal;
		  }

		  /**
		   * Used as the maximum length of an array-like object.
		   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
		   * for more details.
		   */
		  var maxSafeInteger = Math.pow(2, 53) - 1;

		  /** Regular expression to detect Opera. */
		  var reOpera = /\bOpera/;

		  /** Used for native method references. */
		  var objectProto = Object.prototype;

		  /** Used to check for own properties of an object. */
		  var hasOwnProperty = objectProto.hasOwnProperty;

		  /** Used to resolve the internal `[[Class]]` of values. */
		  var toString = objectProto.toString;

		  /*--------------------------------------------------------------------------*/

		  /**
		   * Capitalizes a string value.
		   *
		   * @private
		   * @param {string} string The string to capitalize.
		   * @returns {string} The capitalized string.
		   */
		  function capitalize(string) {
		    string = String(string);
		    return string.charAt(0).toUpperCase() + string.slice(1);
		  }

		  /**
		   * A utility function to clean up the OS name.
		   *
		   * @private
		   * @param {string} os The OS name to clean up.
		   * @param {string} [pattern] A `RegExp` pattern matching the OS name.
		   * @param {string} [label] A label for the OS.
		   */
		  function cleanupOS(os, pattern, label) {
		    // Platform tokens are defined at:
		    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
		    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
		    var data = {
		      '10.0': '10',
		      '6.4':  '10 Technical Preview',
		      '6.3':  '8.1',
		      '6.2':  '8',
		      '6.1':  'Server 2008 R2 / 7',
		      '6.0':  'Server 2008 / Vista',
		      '5.2':  'Server 2003 / XP 64-bit',
		      '5.1':  'XP',
		      '5.01': '2000 SP1',
		      '5.0':  '2000',
		      '4.0':  'NT',
		      '4.90': 'ME'
		    };
		    // Detect Windows version from platform tokens.
		    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&
		        (data = data[/[\d.]+$/.exec(os)])) {
		      os = 'Windows ' + data;
		    }
		    // Correct character case and cleanup string.
		    os = String(os);

		    if (pattern && label) {
		      os = os.replace(RegExp(pattern, 'i'), label);
		    }

		    os = format(
		      os.replace(/ ce$/i, ' CE')
		        .replace(/\bhpw/i, 'web')
		        .replace(/\bMacintosh\b/, 'Mac OS')
		        .replace(/_PowerPC\b/i, ' OS')
		        .replace(/\b(OS X) [^ \d]+/i, '$1')
		        .replace(/\bMac (OS X)\b/, '$1')
		        .replace(/\/(\d)/, ' $1')
		        .replace(/_/g, '.')
		        .replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '')
		        .replace(/\bx86\.64\b/gi, 'x86_64')
		        .replace(/\b(Windows Phone) OS\b/, '$1')
		        .replace(/\b(Chrome OS \w+) [\d.]+\b/, '$1')
		        .split(' on ')[0]
		    );

		    return os;
		  }

		  /**
		   * An iteration utility for arrays and objects.
		   *
		   * @private
		   * @param {Array|Object} object The object to iterate over.
		   * @param {Function} callback The function called per iteration.
		   */
		  function each(object, callback) {
		    var index = -1,
		        length = object ? object.length : 0;

		    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
		      while (++index < length) {
		        callback(object[index], index, object);
		      }
		    } else {
		      forOwn(object, callback);
		    }
		  }

		  /**
		   * Trim and conditionally capitalize string values.
		   *
		   * @private
		   * @param {string} string The string to format.
		   * @returns {string} The formatted string.
		   */
		  function format(string) {
		    string = trim(string);
		    return /^(?:webOS|i(?:OS|P))/.test(string)
		      ? string
		      : capitalize(string);
		  }

		  /**
		   * Iterates over an object's own properties, executing the `callback` for each.
		   *
		   * @private
		   * @param {Object} object The object to iterate over.
		   * @param {Function} callback The function executed per own property.
		   */
		  function forOwn(object, callback) {
		    for (var key in object) {
		      if (hasOwnProperty.call(object, key)) {
		        callback(object[key], key, object);
		      }
		    }
		  }

		  /**
		   * Gets the internal `[[Class]]` of a value.
		   *
		   * @private
		   * @param {*} value The value.
		   * @returns {string} The `[[Class]]`.
		   */
		  function getClassOf(value) {
		    return value == null
		      ? capitalize(value)
		      : toString.call(value).slice(8, -1);
		  }

		  /**
		   * Host objects can return type values that are different from their actual
		   * data type. The objects we are concerned with usually return non-primitive
		   * types of "object", "function", or "unknown".
		   *
		   * @private
		   * @param {*} object The owner of the property.
		   * @param {string} property The property to check.
		   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
		   */
		  function isHostType(object, property) {
		    var type = object != null ? typeof object[property] : 'number';
		    return !/^(?:boolean|number|string|undefined)$/.test(type) &&
		      (type == 'object' ? !!object[property] : true);
		  }

		  /**
		   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
		   *
		   * @private
		   * @param {string} string The string to qualify.
		   * @returns {string} The qualified string.
		   */
		  function qualify(string) {
		    return String(string).replace(/([ -])(?!$)/g, '$1?');
		  }

		  /**
		   * A bare-bones `Array#reduce` like utility function.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} callback The function called per iteration.
		   * @returns {*} The accumulated result.
		   */
		  function reduce(array, callback) {
		    var accumulator = null;
		    each(array, function(value, index) {
		      accumulator = callback(accumulator, value, index, array);
		    });
		    return accumulator;
		  }

		  /**
		   * Removes leading and trailing whitespace from a string.
		   *
		   * @private
		   * @param {string} string The string to trim.
		   * @returns {string} The trimmed string.
		   */
		  function trim(string) {
		    return String(string).replace(/^ +| +$/g, '');
		  }

		  /*--------------------------------------------------------------------------*/

		  /**
		   * Creates a new platform object.
		   *
		   * @memberOf platform
		   * @param {Object|string} [ua=navigator.userAgent] The user agent string or
		   *  context object.
		   * @returns {Object} A platform object.
		   */
		  function parse(ua) {

		    /** The environment context object. */
		    var context = root;

		    /** Used to flag when a custom context is provided. */
		    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';

		    // Juggle arguments.
		    if (isCustomContext) {
		      context = ua;
		      ua = null;
		    }

		    /** Browser navigator object. */
		    var nav = context.navigator || {};

		    /** Browser user agent string. */
		    var userAgent = nav.userAgent || '';

		    ua || (ua = userAgent);

		    /** Used to detect if browser is like Chrome. */
		    var likeChrome = isCustomContext
		      ? !!nav.likeChrome
		      : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());

		    /** Internal `[[Class]]` value shortcuts. */
		    var objectClass = 'Object',
		        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
		        enviroClass = isCustomContext ? objectClass : 'Environment',
		        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),
		        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';

		    /** Detect Java environments. */
		    var java = /\bJava/.test(javaClass) && context.java;

		    /** Detect Rhino. */
		    var rhino = java && getClassOf(context.environment) == enviroClass;

		    /** A character to represent alpha. */
		    var alpha = java ? 'a' : '\u03b1';

		    /** A character to represent beta. */
		    var beta = java ? 'b' : '\u03b2';

		    /** Browser document object. */
		    var doc = context.document || {};

		    /**
		     * Detect Opera browser (Presto-based).
		     * http://www.howtocreate.co.uk/operaStuff/operaObject.html
		     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
		     */
		    var opera = context.operamini || context.opera;

		    /** Opera `[[Class]]`. */
		    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))
		      ? operaClass
		      : (opera = null);

		    /*------------------------------------------------------------------------*/

		    /** Temporary variable used over the script's lifetime. */
		    var data;

		    /** The CPU architecture. */
		    var arch = ua;

		    /** Platform description array. */
		    var description = [];

		    /** Platform alpha/beta indicator. */
		    var prerelease = null;

		    /** A flag to indicate that environment features should be used to resolve the platform. */
		    var useFeatures = ua == userAgent;

		    /** The browser/environment version. */
		    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();

		    /** A flag to indicate if the OS ends with "/ Version" */
		    var isSpecialCasedOS;

		    /* Detectable layout engines (order is important). */
		    var layout = getLayout([
		      { 'label': 'EdgeHTML', 'pattern': 'Edge' },
		      'Trident',
		      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },
		      'iCab',
		      'Presto',
		      'NetFront',
		      'Tasman',
		      'KHTML',
		      'Gecko'
		    ]);

		    /* Detectable browser names (order is important). */
		    var name = getName([
		      'Adobe AIR',
		      'Arora',
		      'Avant Browser',
		      'Breach',
		      'Camino',
		      'Electron',
		      'Epiphany',
		      'Fennec',
		      'Flock',
		      'Galeon',
		      'GreenBrowser',
		      'iCab',
		      'Iceweasel',
		      'K-Meleon',
		      'Konqueror',
		      'Lunascape',
		      'Maxthon',
		      { 'label': 'Microsoft Edge', 'pattern': '(?:Edge|Edg|EdgA|EdgiOS)' },
		      'Midori',
		      'Nook Browser',
		      'PaleMoon',
		      'PhantomJS',
		      'Raven',
		      'Rekonq',
		      'RockMelt',
		      { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' },
		      'SeaMonkey',
		      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
		      'Sleipnir',
		      'SlimBrowser',
		      { 'label': 'SRWare Iron', 'pattern': 'Iron' },
		      'Sunrise',
		      'Swiftfox',
		      'Vivaldi',
		      'Waterfox',
		      'WebPositive',
		      { 'label': 'Yandex Browser', 'pattern': 'YaBrowser' },
		      { 'label': 'UC Browser', 'pattern': 'UCBrowser' },
		      'Opera Mini',
		      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },
		      'Opera',
		      { 'label': 'Opera', 'pattern': 'OPR' },
		      'Chromium',
		      'Chrome',
		      { 'label': 'Chrome', 'pattern': '(?:HeadlessChrome)' },
		      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },
		      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },
		      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },
		      { 'label': 'IE', 'pattern': 'IEMobile' },
		      { 'label': 'IE', 'pattern': 'MSIE' },
		      'Safari'
		    ]);

		    /* Detectable products (order is important). */
		    var product = getProduct([
		      { 'label': 'BlackBerry', 'pattern': 'BB10' },
		      'BlackBerry',
		      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },
		      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },
		      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },
		      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },
		      { 'label': 'Galaxy S5', 'pattern': 'SM-G900' },
		      { 'label': 'Galaxy S6', 'pattern': 'SM-G920' },
		      { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' },
		      { 'label': 'Galaxy S7', 'pattern': 'SM-G930' },
		      { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' },
		      'Google TV',
		      'Lumia',
		      'iPad',
		      'iPod',
		      'iPhone',
		      'Kindle',
		      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
		      'Nexus',
		      'Nook',
		      'PlayBook',
		      'PlayStation Vita',
		      'PlayStation',
		      'TouchPad',
		      'Transformer',
		      { 'label': 'Wii U', 'pattern': 'WiiU' },
		      'Wii',
		      'Xbox One',
		      { 'label': 'Xbox 360', 'pattern': 'Xbox' },
		      'Xoom'
		    ]);

		    /* Detectable manufacturers. */
		    var manufacturer = getManufacturer({
		      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },
		      'Alcatel': {},
		      'Archos': {},
		      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },
		      'Asus': { 'Transformer': 1 },
		      'Barnes & Noble': { 'Nook': 1 },
		      'BlackBerry': { 'PlayBook': 1 },
		      'Google': { 'Google TV': 1, 'Nexus': 1 },
		      'HP': { 'TouchPad': 1 },
		      'HTC': {},
		      'Huawei': {},
		      'Lenovo': {},
		      'LG': {},
		      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },
		      'Motorola': { 'Xoom': 1 },
		      'Nintendo': { 'Wii U': 1,  'Wii': 1 },
		      'Nokia': { 'Lumia': 1 },
		      'Oppo': {},
		      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },
		      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 },
		      'Xiaomi': { 'Mi': 1, 'Redmi': 1 }
		    });

		    /* Detectable operating systems (order is important). */
		    var os = getOS([
		      'Windows Phone',
		      'KaiOS',
		      'Android',
		      'CentOS',
		      { 'label': 'Chrome OS', 'pattern': 'CrOS' },
		      'Debian',
		      { 'label': 'DragonFly BSD', 'pattern': 'DragonFly' },
		      'Fedora',
		      'FreeBSD',
		      'Gentoo',
		      'Haiku',
		      'Kubuntu',
		      'Linux Mint',
		      'OpenBSD',
		      'Red Hat',
		      'SuSE',
		      'Ubuntu',
		      'Xubuntu',
		      'Cygwin',
		      'Symbian OS',
		      'hpwOS',
		      'webOS ',
		      'webOS',
		      'Tablet OS',
		      'Tizen',
		      'Linux',
		      'Mac OS X',
		      'Macintosh',
		      'Mac',
		      'Windows 98;',
		      'Windows '
		    ]);

		    /*------------------------------------------------------------------------*/

		    /**
		     * Picks the layout engine from an array of guesses.
		     *
		     * @private
		     * @param {Array} guesses An array of guesses.
		     * @returns {null|string} The detected layout engine.
		     */
		    function getLayout(guesses) {
		      return reduce(guesses, function(result, guess) {
		        return result || RegExp('\\b' + (
		          guess.pattern || qualify(guess)
		        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
		      });
		    }

		    /**
		     * Picks the manufacturer from an array of guesses.
		     *
		     * @private
		     * @param {Array} guesses An object of guesses.
		     * @returns {null|string} The detected manufacturer.
		     */
		    function getManufacturer(guesses) {
		      return reduce(guesses, function(result, value, key) {
		        // Lookup the manufacturer by product or scan the UA for the manufacturer.
		        return result || (
		          value[product] ||
		          value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] ||
		          RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)
		        ) && key;
		      });
		    }

		    /**
		     * Picks the browser name from an array of guesses.
		     *
		     * @private
		     * @param {Array} guesses An array of guesses.
		     * @returns {null|string} The detected browser name.
		     */
		    function getName(guesses) {
		      return reduce(guesses, function(result, guess) {
		        return result || RegExp('\\b' + (
		          guess.pattern || qualify(guess)
		        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
		      });
		    }

		    /**
		     * Picks the OS name from an array of guesses.
		     *
		     * @private
		     * @param {Array} guesses An array of guesses.
		     * @returns {null|string} The detected OS name.
		     */
		    function getOS(guesses) {
		      return reduce(guesses, function(result, guess) {
		        var pattern = guess.pattern || qualify(guess);
		        if (!result && (result =
		              RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua)
		            )) {
		          result = cleanupOS(result, pattern, guess.label || guess);
		        }
		        return result;
		      });
		    }

		    /**
		     * Picks the product name from an array of guesses.
		     *
		     * @private
		     * @param {Array} guesses An array of guesses.
		     * @returns {null|string} The detected product name.
		     */
		    function getProduct(guesses) {
		      return reduce(guesses, function(result, guess) {
		        var pattern = guess.pattern || qualify(guess);
		        if (!result && (result =
		              RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) ||
		              RegExp('\\b' + pattern + ' *\\w+-[\\w]*', 'i').exec(ua) ||
		              RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua)
		            )) {
		          // Split by forward slash and append product version if needed.
		          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
		            result[0] += ' ' + result[1];
		          }
		          // Correct character case and cleanup string.
		          guess = guess.label || guess;
		          result = format(result[0]
		            .replace(RegExp(pattern, 'i'), guess)
		            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')
		            .replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
		        }
		        return result;
		      });
		    }

		    /**
		     * Resolves the version using an array of UA patterns.
		     *
		     * @private
		     * @param {Array} patterns An array of UA patterns.
		     * @returns {null|string} The detected version.
		     */
		    function getVersion(patterns) {
		      return reduce(patterns, function(result, pattern) {
		        return result || (RegExp(pattern +
		          '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
		      });
		    }

		    /**
		     * Returns `platform.description` when the platform object is coerced to a string.
		     *
		     * @name toString
		     * @memberOf platform
		     * @returns {string} Returns `platform.description` if available, else an empty string.
		     */
		    function toStringPlatform() {
		      return this.description || '';
		    }

		    /*------------------------------------------------------------------------*/

		    // Convert layout to an array so we can add extra details.
		    layout && (layout = [layout]);

		    // Detect Android products.
		    // Browsers on Android devices typically provide their product IDS after "Android;"
		    // up to "Build" or ") AppleWebKit".
		    // Example:
		    // "Mozilla/5.0 (Linux; Android 8.1.0; Moto G (5) Plus) AppleWebKit/537.36
		    // (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36"
		    if (/\bAndroid\b/.test(os) && !product &&
		        (data = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(ua))) {
		      product = trim(data[1])
		        // Replace any language codes (eg. "en-US").
		        .replace(/^[a-z]{2}-[a-z]{2};\s*/i, '')
		        || null;
		    }
		    // Detect product names that contain their manufacturer's name.
		    if (manufacturer && !product) {
		      product = getProduct([manufacturer]);
		    } else if (manufacturer && product) {
		      product = product
		        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.\\s]', 'i'), manufacturer + ' ')
		        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.]?(\\w)', 'i'), manufacturer + ' $2');
		    }
		    // Clean up Google TV.
		    if ((data = /\bGoogle TV\b/.exec(product))) {
		      product = data[0];
		    }
		    // Detect simulators.
		    if (/\bSimulator\b/i.test(ua)) {
		      product = (product ? product + ' ' : '') + 'Simulator';
		    }
		    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.
		    if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
		      description.push('running in Turbo/Uncompressed mode');
		    }
		    // Detect IE Mobile 11.
		    if (name == 'IE' && /\blike iPhone OS\b/.test(ua)) {
		      data = parse(ua.replace(/like iPhone OS/, ''));
		      manufacturer = data.manufacturer;
		      product = data.product;
		    }
		    // Detect iOS.
		    else if (/^iP/.test(product)) {
		      name || (name = 'Safari');
		      os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua))
		        ? ' ' + data[1].replace(/_/g, '.')
		        : '');
		    }
		    // Detect Kubuntu.
		    else if (name == 'Konqueror' && /^Linux\b/i.test(os)) {
		      os = 'Kubuntu';
		    }
		    // Detect Android browsers.
		    else if ((manufacturer && manufacturer != 'Google' &&
		        ((/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua)) || /\bVita\b/.test(product))) ||
		        (/\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua))) {
		      name = 'Android Browser';
		      os = /\bAndroid\b/.test(os) ? os : 'Android';
		    }
		    // Detect Silk desktop/accelerated modes.
		    else if (name == 'Silk') {
		      if (!/\bMobi/i.test(ua)) {
		        os = 'Android';
		        description.unshift('desktop mode');
		      }
		      if (/Accelerated *= *true/i.test(ua)) {
		        description.unshift('accelerated');
		      }
		    }
		    // Detect UC Browser speed mode.
		    else if (name == 'UC Browser' && /\bUCWEB\b/.test(ua)) {
		      description.push('speed mode');
		    }
		    // Detect PaleMoon identifying as Firefox.
		    else if (name == 'PaleMoon' && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
		      description.push('identifying as Firefox ' + data[1]);
		    }
		    // Detect Firefox OS and products running Firefox.
		    else if (name == 'Firefox' && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
		      os || (os = 'Firefox OS');
		      product || (product = data[1]);
		    }
		    // Detect false positives for Firefox/Safari.
		    else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
		      // Escape the `/` for Firefox 1.
		      if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
		        // Clear name of false positives.
		        name = null;
		      }
		      // Reassign a generic name.
		      if ((data = product || manufacturer || os) &&
		          (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
		        name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
		      }
		    }
		    // Add Chrome version to description for Electron.
		    else if (name == 'Electron' && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
		      description.push('Chromium ' + data);
		    }
		    // Detect non-Opera (Presto-based) versions (order is important).
		    if (!version) {
		      version = getVersion([
		        '(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)',
		        'Version',
		        qualify(name),
		        '(?:Firefox|Minefield|NetFront)'
		      ]);
		    }
		    // Detect stubborn layout engines.
		    if ((data =
		          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||
		          /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') ||
		          /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||
		          !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||
		          layout == 'WebKit' && /\bPlayStation\b(?! Vita\b)/i.test(name) && 'NetFront'
		        )) {
		      layout = [data];
		    }
		    // Detect Windows Phone 7 desktop mode.
		    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
		      name += ' Mobile';
		      os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
		      description.unshift('desktop mode');
		    }
		    // Detect Windows Phone 8.x desktop mode.
		    else if (/\bWPDesktop\b/i.test(ua)) {
		      name = 'IE Mobile';
		      os = 'Windows Phone 8.x';
		      description.unshift('desktop mode');
		      version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
		    }
		    // Detect IE 11 identifying as other browsers.
		    else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
		      if (name) {
		        description.push('identifying as ' + name + (version ? ' ' + version : ''));
		      }
		      name = 'IE';
		      version = data[1];
		    }
		    // Leverage environment features.
		    if (useFeatures) {
		      // Detect server-side environments.
		      // Rhino has a global function while others have a global object.
		      if (isHostType(context, 'global')) {
		        if (java) {
		          data = java.lang.System;
		          arch = data.getProperty('os.arch');
		          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
		        }
		        if (rhino) {
		          try {
		            version = context.require('ringo/engine').version.join('.');
		            name = 'RingoJS';
		          } catch(e) {
		            if ((data = context.system) && data.global.system == context.system) {
		              name = 'Narwhal';
		              os || (os = data[0].os || null);
		            }
		          }
		          if (!name) {
		            name = 'Rhino';
		          }
		        }
		        else if (
		          typeof context.process == 'object' && !context.process.browser &&
		          (data = context.process)
		        ) {
		          if (typeof data.versions == 'object') {
		            if (typeof data.versions.electron == 'string') {
		              description.push('Node ' + data.versions.node);
		              name = 'Electron';
		              version = data.versions.electron;
		            } else if (typeof data.versions.nw == 'string') {
		              description.push('Chromium ' + version, 'Node ' + data.versions.node);
		              name = 'NW.js';
		              version = data.versions.nw;
		            }
		          }
		          if (!name) {
		            name = 'Node.js';
		            arch = data.arch;
		            os = data.platform;
		            version = /[\d.]+/.exec(data.version);
		            version = version ? version[0] : null;
		          }
		        }
		      }
		      // Detect Adobe AIR.
		      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {
		        name = 'Adobe AIR';
		        os = data.flash.system.Capabilities.os;
		      }
		      // Detect PhantomJS.
		      else if (getClassOf((data = context.phantom)) == phantomClass) {
		        name = 'PhantomJS';
		        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);
		      }
		      // Detect IE compatibility modes.
		      else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
		        // We're in compatibility mode when the Trident version + 4 doesn't
		        // equal the document mode.
		        version = [version, doc.documentMode];
		        if ((data = +data[1] + 4) != version[1]) {
		          description.push('IE ' + version[1] + ' mode');
		          layout && (layout[1] = '');
		          version[1] = data;
		        }
		        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
		      }
		      // Detect IE 11 masking as other browsers.
		      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\b/.test(name)) {
		        description.push('masking as ' + name + ' ' + version);
		        name = 'IE';
		        version = '11.0';
		        layout = ['Trident'];
		        os = 'Windows';
		      }
		      os = os && format(os);
		    }
		    // Detect prerelease phases.
		    if (version && (data =
		          /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) ||
		          /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||
		          /\bMinefield\b/i.test(ua) && 'a'
		        )) {
		      prerelease = /b/i.test(data) ? 'beta' : 'alpha';
		      version = version.replace(RegExp(data + '\\+?$'), '') +
		        (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
		    }
		    // Detect Firefox Mobile.
		    if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS|KaiOS)\b/.test(os)) {
		      name = 'Firefox Mobile';
		    }
		    // Obscure Maxthon's unreliable version.
		    else if (name == 'Maxthon' && version) {
		      version = version.replace(/\.[\d.]+/, '.x');
		    }
		    // Detect Xbox 360 and Xbox One.
		    else if (/\bXbox\b/i.test(product)) {
		      if (product == 'Xbox 360') {
		        os = null;
		      }
		      if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
		        description.unshift('mobile mode');
		      }
		    }
		    // Add mobile postfix.
		    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&
		        (os == 'Windows CE' || /Mobi/i.test(ua))) {
		      name += ' Mobile';
		    }
		    // Detect IE platform preview.
		    else if (name == 'IE' && useFeatures) {
		      try {
		        if (context.external === null) {
		          description.unshift('platform preview');
		        }
		      } catch(e) {
		        description.unshift('embedded');
		      }
		    }
		    // Detect BlackBerry OS version.
		    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
		    else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data =
		          (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] ||
		          version
		        )) {
		      data = [data, /BB10/.test(ua)];
		      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
		      version = null;
		    }
		    // Detect Opera identifying/masking itself as another browser.
		    // http://www.opera.com/support/kb/view/843/
		    else if (this != forOwn && product != 'Wii' && (
		          (useFeatures && opera) ||
		          (/Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua)) ||
		          (name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os)) ||
		          (name == 'IE' && (
		            (os && !/^Win/.test(os) && version > 5.5) ||
		            /\bWindows XP\b/.test(os) && version > 8 ||
		            version == 8 && !/\bTrident\b/.test(ua)
		          ))
		        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {
		      // When "identifying", the UA contains both Opera and the other browser's name.
		      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');
		      if (reOpera.test(name)) {
		        if (/\bIE\b/.test(data) && os == 'Mac OS') {
		          os = null;
		        }
		        data = 'identify' + data;
		      }
		      // When "masking", the UA contains only the other browser's name.
		      else {
		        data = 'mask' + data;
		        if (operaClass) {
		          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
		        } else {
		          name = 'Opera';
		        }
		        if (/\bIE\b/.test(data)) {
		          os = null;
		        }
		        if (!useFeatures) {
		          version = null;
		        }
		      }
		      layout = ['Presto'];
		      description.push(data);
		    }
		    // Detect WebKit Nightly and approximate Chrome/Safari versions.
		    if ((data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
		      // Correct build number for numeric comparison.
		      // (e.g. "532.5" becomes "532.05")
		      data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data];
		      // Nightly builds are postfixed with a "+".
		      if (name == 'Safari' && data[1].slice(-1) == '+') {
		        name = 'WebKit Nightly';
		        prerelease = 'alpha';
		        version = data[1].slice(0, -1);
		      }
		      // Clear incorrect browser versions.
		      else if (version == data[1] ||
		          version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
		        version = null;
		      }
		      // Use the full Chrome version when available.
		      data[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(ua) || 0)[1];
		      // Detect Blink layout engine.
		      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {
		        layout = ['Blink'];
		      }
		      // Detect JavaScriptCore.
		      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi
		      if (!useFeatures || (!likeChrome && !data[1])) {
		        layout && (layout[1] = 'like Safari');
		        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : '12');
		      } else {
		        layout && (layout[1] = 'like Chrome');
		        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
		      }
		      // Add the postfix of ".x" or "+" for approximate versions.
		      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));
		      // Obscure version for some Safari 1-2 releases.
		      if (name == 'Safari' && (!version || parseInt(version) > 45)) {
		        version = data;
		      } else if (name == 'Chrome' && /\bHeadlessChrome/i.test(ua)) {
		        description.unshift('headless');
		      }
		    }
		    // Detect Opera desktop modes.
		    if (name == 'Opera' &&  (data = /\bzbov|zvav$/.exec(os))) {
		      name += ' ';
		      description.unshift('desktop mode');
		      if (data == 'zvav') {
		        name += 'Mini';
		        version = null;
		      } else {
		        name += 'Mobile';
		      }
		      os = os.replace(RegExp(' *' + data + '$'), '');
		    }
		    // Detect Chrome desktop mode.
		    else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
		      description.unshift('desktop mode');
		      name = 'Chrome Mobile';
		      version = null;

		      if (/\bOS X\b/.test(os)) {
		        manufacturer = 'Apple';
		        os = 'iOS 4.3+';
		      } else {
		        os = null;
		      }
		    }
		    // Newer versions of SRWare Iron uses the Chrome tag to indicate its version number.
		    else if (/\bSRWare Iron\b/.test(name) && !version) {
		      version = getVersion('Chrome');
		    }
		    // Strip incorrect OS versions.
		    if (version && version.indexOf((data = /[\d.]+$/.exec(os))) == 0 &&
		        ua.indexOf('/' + data + '-') > -1) {
		      os = trim(os.replace(data, ''));
		    }
		    // Ensure OS does not include the browser name.
		    if (os && os.indexOf(name) != -1 && !RegExp(name + ' OS').test(os)) {
		      os = os.replace(RegExp(' *' + qualify(name) + ' *'), '');
		    }
		    // Add layout engine.
		    if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (
		        /Browser|Lunascape|Maxthon/.test(name) ||
		        name != 'Safari' && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) ||
		        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {
		      // Don't add layout details to description if they are falsey.
		      (data = layout[layout.length - 1]) && description.push(data);
		    }
		    // Combine contextual information.
		    if (description.length) {
		      description = ['(' + description.join('; ') + ')'];
		    }
		    // Append manufacturer to description.
		    if (manufacturer && product && product.indexOf(manufacturer) < 0) {
		      description.push('on ' + manufacturer);
		    }
		    // Append product to description.
		    if (product) {
		      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);
		    }
		    // Parse the OS into an object.
		    if (os) {
		      data = / ([\d.+]+)$/.exec(os);
		      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
		      os = {
		        'architecture': 32,
		        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,
		        'version': data ? data[1] : null,
		        'toString': function() {
		          var version = this.version;
		          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
		        }
		      };
		    }
		    // Add browser/OS architecture.
		    if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
		      if (os) {
		        os.architecture = 64;
		        os.family = os.family.replace(RegExp(' *' + data), '');
		      }
		      if (
		          name && (/\bWOW64\b/i.test(ua) ||
		          (useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua)))
		      ) {
		        description.unshift('32-bit');
		      }
		    }
		    // Chrome 39 and above on OS X is always 64-bit.
		    else if (
		        os && /^OS X/.test(os.family) &&
		        name == 'Chrome' && parseFloat(version) >= 39
		    ) {
		      os.architecture = 64;
		    }

		    ua || (ua = null);

		    /*------------------------------------------------------------------------*/

		    /**
		     * The platform object.
		     *
		     * @name platform
		     * @type Object
		     */
		    var platform = {};

		    /**
		     * The platform description.
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.description = ua;

		    /**
		     * The name of the browser's layout engine.
		     *
		     * The list of common layout engines include:
		     * "Blink", "EdgeHTML", "Gecko", "Trident" and "WebKit"
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.layout = layout && layout[0];

		    /**
		     * The name of the product's manufacturer.
		     *
		     * The list of manufacturers include:
		     * "Apple", "Archos", "Amazon", "Asus", "Barnes & Noble", "BlackBerry",
		     * "Google", "HP", "HTC", "LG", "Microsoft", "Motorola", "Nintendo",
		     * "Nokia", "Samsung" and "Sony"
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.manufacturer = manufacturer;

		    /**
		     * The name of the browser/environment.
		     *
		     * The list of common browser names include:
		     * "Chrome", "Electron", "Firefox", "Firefox for iOS", "IE",
		     * "Microsoft Edge", "PhantomJS", "Safari", "SeaMonkey", "Silk",
		     * "Opera Mini" and "Opera"
		     *
		     * Mobile versions of some browsers have "Mobile" appended to their name:
		     * eg. "Chrome Mobile", "Firefox Mobile", "IE Mobile" and "Opera Mobile"
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.name = name;

		    /**
		     * The alpha/beta release indicator.
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.prerelease = prerelease;

		    /**
		     * The name of the product hosting the browser.
		     *
		     * The list of common products include:
		     *
		     * "BlackBerry", "Galaxy S4", "Lumia", "iPad", "iPod", "iPhone", "Kindle",
		     * "Kindle Fire", "Nexus", "Nook", "PlayBook", "TouchPad" and "Transformer"
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.product = product;

		    /**
		     * The browser's user agent string.
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.ua = ua;

		    /**
		     * The browser/environment version.
		     *
		     * @memberOf platform
		     * @type string|null
		     */
		    platform.version = name && version;

		    /**
		     * The name of the operating system.
		     *
		     * @memberOf platform
		     * @type Object
		     */
		    platform.os = os || {

		      /**
		       * The CPU architecture the OS is built for.
		       *
		       * @memberOf platform.os
		       * @type number|null
		       */
		      'architecture': null,

		      /**
		       * The family of the OS.
		       *
		       * Common values include:
		       * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
		       * "Windows XP", "OS X", "Linux", "Ubuntu", "Debian", "Fedora", "Red Hat",
		       * "SuSE", "Android", "iOS" and "Windows Phone"
		       *
		       * @memberOf platform.os
		       * @type string|null
		       */
		      'family': null,

		      /**
		       * The version of the OS.
		       *
		       * @memberOf platform.os
		       * @type string|null
		       */
		      'version': null,

		      /**
		       * Returns the OS string.
		       *
		       * @memberOf platform.os
		       * @returns {string} The OS string.
		       */
		      'toString': function() { return 'null'; }
		    };

		    platform.parse = parse;
		    platform.toString = toStringPlatform;

		    if (platform.version) {
		      description.unshift(version);
		    }
		    if (platform.name) {
		      description.unshift(name);
		    }
		    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
		      description.push(product ? '(' + os + ')' : 'on ' + os);
		    }
		    if (description.length) {
		      platform.description = description.join(' ');
		    }
		    return platform;
		  }

		  /*--------------------------------------------------------------------------*/

		  // Export platform.
		  var platform = parse();

		  // Some AMD build optimizers, like r.js, check for condition patterns like the following:
		  if (freeExports && freeModule) {
		    // Export for CommonJS support.
		    forOwn(platform, function(value, key) {
		      freeExports[key] = value;
		    });
		  }
		  else {
		    // Export to the global object.
		    root.platform = platform;
		  }
		}.call(commonjsGlobal)); 
	} (platform$1, platform$1.exports));

	var platformExports = platform$1.exports;
	var platform = /*@__PURE__*/getDefaultExportFromCjs(platformExports);

	let detallesDispositivo = null;

	async function obtenerDetallesDispositivo() {
	  if (!detallesDispositivo) {
	    detallesDispositivo = await getDeviceDetails();
	    detallesDispositivo.deviceId = localStorage.getItem('deviceId');
	  }
	  return detallesDispositivo;
	}

	async function getDeviceDetails() {
	  const platformInfo = platform.parse(navigator.userAgent);
	  const { name, os } = platformInfo;

	  const ipResponse = await fetch('https://api.ipify.org?format=json');
	  const ipData = await ipResponse.json();

	  return {
	    navegadorNombre: name,
	    sistemaOperativo: `${os.family} ${os.version}`,
	    ipPublica: ipData.ip
	  };
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
	 */

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const stringToByteArray$1 = function (str) {
	    // TODO(user): Use native implementations if/when available
	    const out = [];
	    let p = 0;
	    for (let i = 0; i < str.length; i++) {
	        let c = str.charCodeAt(i);
	        if (c < 128) {
	            out[p++] = c;
	        }
	        else if (c < 2048) {
	            out[p++] = (c >> 6) | 192;
	            out[p++] = (c & 63) | 128;
	        }
	        else if ((c & 0xfc00) === 0xd800 &&
	            i + 1 < str.length &&
	            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
	            // Surrogate Pair
	            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
	            out[p++] = (c >> 18) | 240;
	            out[p++] = ((c >> 12) & 63) | 128;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	        else {
	            out[p++] = (c >> 12) | 224;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	    }
	    return out;
	};
	/**
	 * Turns an array of numbers into the string given by the concatenation of the
	 * characters to which the numbers correspond.
	 * @param bytes Array of numbers representing characters.
	 * @return Stringification of the array.
	 */
	const byteArrayToString = function (bytes) {
	    // TODO(user): Use native implementations if/when available
	    const out = [];
	    let pos = 0, c = 0;
	    while (pos < bytes.length) {
	        const c1 = bytes[pos++];
	        if (c1 < 128) {
	            out[c++] = String.fromCharCode(c1);
	        }
	        else if (c1 > 191 && c1 < 224) {
	            const c2 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
	        }
	        else if (c1 > 239 && c1 < 365) {
	            // Surrogate Pair
	            const c2 = bytes[pos++];
	            const c3 = bytes[pos++];
	            const c4 = bytes[pos++];
	            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
	                0x10000;
	            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
	            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
	        }
	        else {
	            const c2 = bytes[pos++];
	            const c3 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	        }
	    }
	    return out.join('');
	};
	// We define it as an object literal instead of a class because a class compiled down to es5 can't
	// be treeshaked. https://github.com/rollup/rollup/issues/1691
	// Static lookup maps, lazily populated by init_()
	const base64 = {
	    /**
	     * Maps bytes to characters.
	     */
	    byteToCharMap_: null,
	    /**
	     * Maps characters to bytes.
	     */
	    charToByteMap_: null,
	    /**
	     * Maps bytes to websafe characters.
	     * @private
	     */
	    byteToCharMapWebSafe_: null,
	    /**
	     * Maps websafe characters to bytes.
	     * @private
	     */
	    charToByteMapWebSafe_: null,
	    /**
	     * Our default alphabet, shared between
	     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
	     */
	    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
	    /**
	     * Our default alphabet. Value 64 (=) is special; it means "nothing."
	     */
	    get ENCODED_VALS() {
	        return this.ENCODED_VALS_BASE + '+/=';
	    },
	    /**
	     * Our websafe alphabet.
	     */
	    get ENCODED_VALS_WEBSAFE() {
	        return this.ENCODED_VALS_BASE + '-_.';
	    },
	    /**
	     * Whether this browser supports the atob and btoa functions. This extension
	     * started at Mozilla but is now implemented by many browsers. We use the
	     * ASSUME_* variables to avoid pulling in the full useragent detection library
	     * but still allowing the standard per-browser compilations.
	     *
	     */
	    HAS_NATIVE_SUPPORT: typeof atob === 'function',
	    /**
	     * Base64-encode an array of bytes.
	     *
	     * @param input An array of bytes (numbers with
	     *     value in [0, 255]) to encode.
	     * @param webSafe Boolean indicating we should use the
	     *     alternative alphabet.
	     * @return The base64 encoded string.
	     */
	    encodeByteArray(input, webSafe) {
	        if (!Array.isArray(input)) {
	            throw Error('encodeByteArray takes an array as a parameter');
	        }
	        this.init_();
	        const byteToCharMap = webSafe
	            ? this.byteToCharMapWebSafe_
	            : this.byteToCharMap_;
	        const output = [];
	        for (let i = 0; i < input.length; i += 3) {
	            const byte1 = input[i];
	            const haveByte2 = i + 1 < input.length;
	            const byte2 = haveByte2 ? input[i + 1] : 0;
	            const haveByte3 = i + 2 < input.length;
	            const byte3 = haveByte3 ? input[i + 2] : 0;
	            const outByte1 = byte1 >> 2;
	            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
	            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
	            let outByte4 = byte3 & 0x3f;
	            if (!haveByte3) {
	                outByte4 = 64;
	                if (!haveByte2) {
	                    outByte3 = 64;
	                }
	            }
	            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
	        }
	        return output.join('');
	    },
	    /**
	     * Base64-encode a string.
	     *
	     * @param input A string to encode.
	     * @param webSafe If true, we should use the
	     *     alternative alphabet.
	     * @return The base64 encoded string.
	     */
	    encodeString(input, webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
	            return btoa(input);
	        }
	        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * @param input to decode.
	     * @param webSafe True if we should use the
	     *     alternative alphabet.
	     * @return string representing the decoded value.
	     */
	    decodeString(input, webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
	            return atob(input);
	        }
	        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * In base-64 decoding, groups of four characters are converted into three
	     * bytes.  If the encoder did not apply padding, the input length may not
	     * be a multiple of 4.
	     *
	     * In this case, the last group will have fewer than 4 characters, and
	     * padding will be inferred.  If the group has one or two characters, it decodes
	     * to one byte.  If the group has three characters, it decodes to two bytes.
	     *
	     * @param input Input to decode.
	     * @param webSafe True if we should use the web-safe alphabet.
	     * @return bytes representing the decoded value.
	     */
	    decodeStringToByteArray(input, webSafe) {
	        this.init_();
	        const charToByteMap = webSafe
	            ? this.charToByteMapWebSafe_
	            : this.charToByteMap_;
	        const output = [];
	        for (let i = 0; i < input.length;) {
	            const byte1 = charToByteMap[input.charAt(i++)];
	            const haveByte2 = i < input.length;
	            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
	            ++i;
	            const haveByte3 = i < input.length;
	            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            const haveByte4 = i < input.length;
	            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
	                throw new DecodeBase64StringError();
	            }
	            const outByte1 = (byte1 << 2) | (byte2 >> 4);
	            output.push(outByte1);
	            if (byte3 !== 64) {
	                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
	                output.push(outByte2);
	                if (byte4 !== 64) {
	                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
	                    output.push(outByte3);
	                }
	            }
	        }
	        return output;
	    },
	    /**
	     * Lazy static initialization function. Called before
	     * accessing any of the static map variables.
	     * @private
	     */
	    init_() {
	        if (!this.byteToCharMap_) {
	            this.byteToCharMap_ = {};
	            this.charToByteMap_ = {};
	            this.byteToCharMapWebSafe_ = {};
	            this.charToByteMapWebSafe_ = {};
	            // We want quick mappings back and forth, so we precompute two maps.
	            for (let i = 0; i < this.ENCODED_VALS.length; i++) {
	                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
	                this.charToByteMap_[this.byteToCharMap_[i]] = i;
	                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
	                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
	                // Be forgiving when decoding and correctly decode both encodings.
	                if (i >= this.ENCODED_VALS_BASE.length) {
	                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
	                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
	                }
	            }
	        }
	    }
	};
	/**
	 * An error encountered while decoding base64 string.
	 */
	class DecodeBase64StringError extends Error {
	    constructor() {
	        super(...arguments);
	        this.name = 'DecodeBase64StringError';
	    }
	}
	/**
	 * URL-safe base64 encoding
	 */
	const base64Encode = function (str) {
	    const utf8Bytes = stringToByteArray$1(str);
	    return base64.encodeByteArray(utf8Bytes, true);
	};
	/**
	 * URL-safe base64 encoding (without "." padding in the end).
	 * e.g. Used in JSON Web Token (JWT) parts.
	 */
	const base64urlEncodeWithoutPadding = function (str) {
	    // Use base64url encoding and remove padding in the end (dot characters).
	    return base64Encode(str).replace(/\./g, '');
	};
	/**
	 * URL-safe base64 decoding
	 *
	 * NOTE: DO NOT use the global atob() function - it does NOT support the
	 * base64Url variant encoding.
	 *
	 * @param str To be decoded
	 * @return Decoded result, if possible
	 */
	const base64Decode = function (str) {
	    try {
	        return base64.decodeString(str, true);
	    }
	    catch (e) {
	        console.error('base64Decode failed: ', e);
	    }
	    return null;
	};

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Polyfill for `globalThis` object.
	 * @returns the `globalThis` object for the given environment.
	 * @public
	 */
	function getGlobal() {
	    if (typeof self !== 'undefined') {
	        return self;
	    }
	    if (typeof window !== 'undefined') {
	        return window;
	    }
	    if (typeof global !== 'undefined') {
	        return global;
	    }
	    throw new Error('Unable to locate global object.');
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
	/**
	 * Attempt to read defaults from a JSON string provided to
	 * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
	 * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
	 * The dots are in parens because certain compilers (Vite?) cannot
	 * handle seeing that variable in comments.
	 * See https://github.com/firebase/firebase-js-sdk/issues/6838
	 */
	const getDefaultsFromEnvVariable = () => {
	    if (typeof process === 'undefined' || typeof process.env === 'undefined') {
	        return;
	    }
	    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
	    if (defaultsJsonString) {
	        return JSON.parse(defaultsJsonString);
	    }
	};
	const getDefaultsFromCookie = () => {
	    if (typeof document === 'undefined') {
	        return;
	    }
	    let match;
	    try {
	        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
	    }
	    catch (e) {
	        // Some environments such as Angular Universal SSR have a
	        // `document` object but error on accessing `document.cookie`.
	        return;
	    }
	    const decoded = match && base64Decode(match[1]);
	    return decoded && JSON.parse(decoded);
	};
	/**
	 * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
	 * (1) if such an object exists as a property of `globalThis`
	 * (2) if such an object was provided on a shell environment variable
	 * (3) if such an object exists in a cookie
	 * @public
	 */
	const getDefaults = () => {
	    try {
	        return (getDefaultsFromGlobal() ||
	            getDefaultsFromEnvVariable() ||
	            getDefaultsFromCookie());
	    }
	    catch (e) {
	        /**
	         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
	         * to any environment case we have not accounted for. Log to
	         * info instead of swallowing so we can find these unknown cases
	         * and add paths for them if needed.
	         */
	        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
	        return;
	    }
	};
	/**
	 * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
	 * for the given product.
	 * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
	 * @public
	 */
	const getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };
	/**
	 * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
	 * for the given product.
	 * @returns a pair of hostname and port like `["::1", 4000]` if available
	 * @public
	 */
	const getDefaultEmulatorHostnameAndPort = (productName) => {
	    const host = getDefaultEmulatorHost(productName);
	    if (!host) {
	        return undefined;
	    }
	    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
	    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
	        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
	    }
	    // eslint-disable-next-line no-restricted-globals
	    const port = parseInt(host.substring(separatorIndex + 1), 10);
	    if (host[0] === '[') {
	        // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
	        return [host.substring(1, separatorIndex - 1), port];
	    }
	    else {
	        return [host.substring(0, separatorIndex), port];
	    }
	};
	/**
	 * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
	 * @public
	 */
	const getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class Deferred {
	    constructor() {
	        this.reject = () => { };
	        this.resolve = () => { };
	        this.promise = new Promise((resolve, reject) => {
	            this.resolve = resolve;
	            this.reject = reject;
	        });
	    }
	    /**
	     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
	     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
	     * and returns a node-style callback which will resolve or reject the Deferred's promise.
	     */
	    wrapCallback(callback) {
	        return (error, value) => {
	            if (error) {
	                this.reject(error);
	            }
	            else {
	                this.resolve(value);
	            }
	            if (typeof callback === 'function') {
	                // Attaching noop handler just in case developer wasn't expecting
	                // promises
	                this.promise.catch(() => { });
	                // Some of our callbacks don't expect a value and our own tests
	                // assert that the parameter length is 1
	                if (callback.length === 1) {
	                    callback(error);
	                }
	                else {
	                    callback(error, value);
	                }
	            }
	        };
	    }
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function createMockUserToken(token, projectId) {
	    if (token.uid) {
	        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
	    }
	    // Unsecured JWTs use "none" as the algorithm.
	    const header = {
	        alg: 'none',
	        type: 'JWT'
	    };
	    const project = projectId || 'demo-project';
	    const iat = token.iat || 0;
	    const sub = token.sub || token.user_id;
	    if (!sub) {
	        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
	    }
	    const payload = Object.assign({ 
	        // Set all required fields to decent defaults
	        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {
	            sign_in_provider: 'custom',
	            identities: {}
	        } }, token);
	    // Unsecured JWTs use the empty string as a signature.
	    const signature = '';
	    return [
	        base64urlEncodeWithoutPadding(JSON.stringify(header)),
	        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
	        signature
	    ].join('.');
	}
	/**
	 * This method checks if indexedDB is supported by current browser/service worker context
	 * @return true if indexedDB is supported by current browser/service worker context
	 */
	function isIndexedDBAvailable() {
	    try {
	        return typeof indexedDB === 'object';
	    }
	    catch (e) {
	        return false;
	    }
	}
	/**
	 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
	 * if errors occur during the database open operation.
	 *
	 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
	 * private browsing)
	 */
	function validateIndexedDBOpenable() {
	    return new Promise((resolve, reject) => {
	        try {
	            let preExist = true;
	            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
	            const request = self.indexedDB.open(DB_CHECK_NAME);
	            request.onsuccess = () => {
	                request.result.close();
	                // delete database only when it doesn't pre-exist
	                if (!preExist) {
	                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);
	                }
	                resolve(true);
	            };
	            request.onupgradeneeded = () => {
	                preExist = false;
	            };
	            request.onerror = () => {
	                var _a;
	                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
	            };
	        }
	        catch (error) {
	            reject(error);
	        }
	    });
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Standardized Firebase Error.
	 *
	 * Usage:
	 *
	 *   // Typescript string literals for type-safe codes
	 *   type Err =
	 *     'unknown' |
	 *     'object-not-found'
	 *     ;
	 *
	 *   // Closure enum for type-safe error codes
	 *   // at-enum {string}
	 *   var Err = {
	 *     UNKNOWN: 'unknown',
	 *     OBJECT_NOT_FOUND: 'object-not-found',
	 *   }
	 *
	 *   let errors: Map<Err, string> = {
	 *     'generic-error': "Unknown error",
	 *     'file-not-found': "Could not find file: {$file}",
	 *   };
	 *
	 *   // Type-safe function - must pass a valid error code as param.
	 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
	 *
	 *   ...
	 *   throw error.create(Err.GENERIC);
	 *   ...
	 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
	 *   ...
	 *   // Service: Could not file file: foo.txt (service/file-not-found).
	 *
	 *   catch (e) {
	 *     assert(e.message === "Could not find file: foo.txt.");
	 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
	 *       console.log("Could not read file: " + e['file']);
	 *     }
	 *   }
	 */
	const ERROR_NAME = 'FirebaseError';
	// Based on code from:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
	class FirebaseError extends Error {
	    constructor(
	    /** The error code for this error. */
	    code, message, 
	    /** Custom data for this error. */
	    customData) {
	        super(message);
	        this.code = code;
	        this.customData = customData;
	        /** The custom name for all FirebaseErrors. */
	        this.name = ERROR_NAME;
	        // Fix For ES5
	        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
	        Object.setPrototypeOf(this, FirebaseError.prototype);
	        // Maintains proper stack trace for where our error was thrown.
	        // Only available on V8.
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, ErrorFactory.prototype.create);
	        }
	    }
	}
	class ErrorFactory {
	    constructor(service, serviceName, errors) {
	        this.service = service;
	        this.serviceName = serviceName;
	        this.errors = errors;
	    }
	    create(code, ...data) {
	        const customData = data[0] || {};
	        const fullCode = `${this.service}/${code}`;
	        const template = this.errors[code];
	        const message = template ? replaceTemplate(template, customData) : 'Error';
	        // Service Name: Error message (service/code).
	        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
	        const error = new FirebaseError(fullCode, fullMessage, customData);
	        return error;
	    }
	}
	function replaceTemplate(template, data) {
	    return template.replace(PATTERN, (_, key) => {
	        const value = data[key];
	        return value != null ? String(value) : `<${key}?>`;
	    });
	}
	const PATTERN = /\{\$([^}]+)}/g;
	/**
	 * Deep equal two objects. Support Arrays and Objects.
	 */
	function deepEqual(a, b) {
	    if (a === b) {
	        return true;
	    }
	    const aKeys = Object.keys(a);
	    const bKeys = Object.keys(b);
	    for (const k of aKeys) {
	        if (!bKeys.includes(k)) {
	            return false;
	        }
	        const aProp = a[k];
	        const bProp = b[k];
	        if (isObject(aProp) && isObject(bProp)) {
	            if (!deepEqual(aProp, bProp)) {
	                return false;
	            }
	        }
	        else if (aProp !== bProp) {
	            return false;
	        }
	    }
	    for (const k of bKeys) {
	        if (!aKeys.includes(k)) {
	            return false;
	        }
	    }
	    return true;
	}
	function isObject(thing) {
	    return thing !== null && typeof thing === 'object';
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getModularInstance(service) {
	    if (service && service._delegate) {
	        return service._delegate;
	    }
	    else {
	        return service;
	    }
	}

	/**
	 * Component for service name T, e.g. `auth`, `auth-internal`
	 */
	class Component {
	    /**
	     *
	     * @param name The public service name, e.g. app, auth, firestore, database
	     * @param instanceFactory Service factory responsible for creating the public interface
	     * @param type whether the service provided by the component is public or private
	     */
	    constructor(name, instanceFactory, type) {
	        this.name = name;
	        this.instanceFactory = instanceFactory;
	        this.type = type;
	        this.multipleInstances = false;
	        /**
	         * Properties to be added to the service namespace
	         */
	        this.serviceProps = {};
	        this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */;
	        this.onInstanceCreated = null;
	    }
	    setInstantiationMode(mode) {
	        this.instantiationMode = mode;
	        return this;
	    }
	    setMultipleInstances(multipleInstances) {
	        this.multipleInstances = multipleInstances;
	        return this;
	    }
	    setServiceProps(props) {
	        this.serviceProps = props;
	        return this;
	    }
	    setInstanceCreatedCallback(callback) {
	        this.onInstanceCreated = callback;
	        return this;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
	 * NameServiceMapping[T] is an alias for the type of the instance
	 */
	class Provider {
	    constructor(name, container) {
	        this.name = name;
	        this.container = container;
	        this.component = null;
	        this.instances = new Map();
	        this.instancesDeferred = new Map();
	        this.instancesOptions = new Map();
	        this.onInitCallbacks = new Map();
	    }
	    /**
	     * @param identifier A provider can provide mulitple instances of a service
	     * if this.component.multipleInstances is true.
	     */
	    get(identifier) {
	        // if multipleInstances is not supported, use the default name
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        if (!this.instancesDeferred.has(normalizedIdentifier)) {
	            const deferred = new Deferred();
	            this.instancesDeferred.set(normalizedIdentifier, deferred);
	            if (this.isInitialized(normalizedIdentifier) ||
	                this.shouldAutoInitialize()) {
	                // initialize the service if it can be auto-initialized
	                try {
	                    const instance = this.getOrInitializeService({
	                        instanceIdentifier: normalizedIdentifier
	                    });
	                    if (instance) {
	                        deferred.resolve(instance);
	                    }
	                }
	                catch (e) {
	                    // when the instance factory throws an exception during get(), it should not cause
	                    // a fatal error. We just return the unresolved promise in this case.
	                }
	            }
	        }
	        return this.instancesDeferred.get(normalizedIdentifier).promise;
	    }
	    getImmediate(options) {
	        var _a;
	        // if multipleInstances is not supported, use the default name
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
	        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
	        if (this.isInitialized(normalizedIdentifier) ||
	            this.shouldAutoInitialize()) {
	            try {
	                return this.getOrInitializeService({
	                    instanceIdentifier: normalizedIdentifier
	                });
	            }
	            catch (e) {
	                if (optional) {
	                    return null;
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        else {
	            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
	            if (optional) {
	                return null;
	            }
	            else {
	                throw Error(`Service ${this.name} is not available`);
	            }
	        }
	    }
	    getComponent() {
	        return this.component;
	    }
	    setComponent(component) {
	        if (component.name !== this.name) {
	            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
	        }
	        if (this.component) {
	            throw Error(`Component for ${this.name} has already been provided`);
	        }
	        this.component = component;
	        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
	        if (!this.shouldAutoInitialize()) {
	            return;
	        }
	        // if the service is eager, initialize the default instance
	        if (isComponentEager(component)) {
	            try {
	                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
	            }
	            catch (e) {
	                // when the instance factory for an eager Component throws an exception during the eager
	                // initialization, it should not cause a fatal error.
	                // TODO: Investigate if we need to make it configurable, because some component may want to cause
	                // a fatal error in this case?
	            }
	        }
	        // Create service instances for the pending promises and resolve them
	        // NOTE: if this.multipleInstances is false, only the default instance will be created
	        // and all promises with resolve with it regardless of the identifier.
	        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
	            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
	            try {
	                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
	                const instance = this.getOrInitializeService({
	                    instanceIdentifier: normalizedIdentifier
	                });
	                instanceDeferred.resolve(instance);
	            }
	            catch (e) {
	                // when the instance factory throws an exception, it should not cause
	                // a fatal error. We just leave the promise unresolved.
	            }
	        }
	    }
	    clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
	        this.instancesDeferred.delete(identifier);
	        this.instancesOptions.delete(identifier);
	        this.instances.delete(identifier);
	    }
	    // app.delete() will call this method on every provider to delete the services
	    // TODO: should we mark the provider as deleted?
	    async delete() {
	        const services = Array.from(this.instances.values());
	        await Promise.all([
	            ...services
	                .filter(service => 'INTERNAL' in service) // legacy services
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                .map(service => service.INTERNAL.delete()),
	            ...services
	                .filter(service => '_delete' in service) // modularized services
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                .map(service => service._delete())
	        ]);
	    }
	    isComponentSet() {
	        return this.component != null;
	    }
	    isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
	        return this.instances.has(identifier);
	    }
	    getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
	        return this.instancesOptions.get(identifier) || {};
	    }
	    initialize(opts = {}) {
	        const { options = {} } = opts;
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
	        if (this.isInitialized(normalizedIdentifier)) {
	            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
	        }
	        if (!this.isComponentSet()) {
	            throw Error(`Component ${this.name} has not been registered yet`);
	        }
	        const instance = this.getOrInitializeService({
	            instanceIdentifier: normalizedIdentifier,
	            options
	        });
	        // resolve any pending promise waiting for the service instance
	        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
	            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
	            if (normalizedIdentifier === normalizedDeferredIdentifier) {
	                instanceDeferred.resolve(instance);
	            }
	        }
	        return instance;
	    }
	    /**
	     *
	     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
	     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
	     *
	     * @param identifier An optional instance identifier
	     * @returns a function to unregister the callback
	     */
	    onInit(callback, identifier) {
	        var _a;
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
	        existingCallbacks.add(callback);
	        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
	        const existingInstance = this.instances.get(normalizedIdentifier);
	        if (existingInstance) {
	            callback(existingInstance, normalizedIdentifier);
	        }
	        return () => {
	            existingCallbacks.delete(callback);
	        };
	    }
	    /**
	     * Invoke onInit callbacks synchronously
	     * @param instance the service instance`
	     */
	    invokeOnInitCallbacks(instance, identifier) {
	        const callbacks = this.onInitCallbacks.get(identifier);
	        if (!callbacks) {
	            return;
	        }
	        for (const callback of callbacks) {
	            try {
	                callback(instance, identifier);
	            }
	            catch (_a) {
	                // ignore errors in the onInit callback
	            }
	        }
	    }
	    getOrInitializeService({ instanceIdentifier, options = {} }) {
	        let instance = this.instances.get(instanceIdentifier);
	        if (!instance && this.component) {
	            instance = this.component.instanceFactory(this.container, {
	                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
	                options
	            });
	            this.instances.set(instanceIdentifier, instance);
	            this.instancesOptions.set(instanceIdentifier, options);
	            /**
	             * Invoke onInit listeners.
	             * Note this.component.onInstanceCreated is different, which is used by the component creator,
	             * while onInit listeners are registered by consumers of the provider.
	             */
	            this.invokeOnInitCallbacks(instance, instanceIdentifier);
	            /**
	             * Order is important
	             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
	             * makes `isInitialized()` return true.
	             */
	            if (this.component.onInstanceCreated) {
	                try {
	                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
	                }
	                catch (_a) {
	                    // ignore errors in the onInstanceCreatedCallback
	                }
	            }
	        }
	        return instance || null;
	    }
	    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
	        if (this.component) {
	            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
	        }
	        else {
	            return identifier; // assume multiple instances are supported before the component is provided.
	        }
	    }
	    shouldAutoInitialize() {
	        return (!!this.component &&
	            this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */);
	    }
	}
	// undefined should be passed to the service factory for the default instance
	function normalizeIdentifierForFactory(identifier) {
	    return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
	}
	function isComponentEager(component) {
	    return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
	 */
	class ComponentContainer {
	    constructor(name) {
	        this.name = name;
	        this.providers = new Map();
	    }
	    /**
	     *
	     * @param component Component being added
	     * @param overwrite When a component with the same name has already been registered,
	     * if overwrite is true: overwrite the existing component with the new component and create a new
	     * provider with the new component. It can be useful in tests where you want to use different mocks
	     * for different tests.
	     * if overwrite is false: throw an exception
	     */
	    addComponent(component) {
	        const provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
	        }
	        provider.setComponent(component);
	    }
	    addOrOverwriteComponent(component) {
	        const provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            // delete the existing provider from the container, so we can register the new component
	            this.providers.delete(component.name);
	        }
	        this.addComponent(component);
	    }
	    /**
	     * getProvider provides a type safe interface where it can only be called with a field name
	     * present in NameServiceMapping interface.
	     *
	     * Firebase SDKs providing services should extend NameServiceMapping interface to register
	     * themselves.
	     */
	    getProvider(name) {
	        if (this.providers.has(name)) {
	            return this.providers.get(name);
	        }
	        // create a Provider for a service that hasn't registered with Firebase
	        const provider = new Provider(name, this);
	        this.providers.set(name, provider);
	        return provider;
	    }
	    getProviders() {
	        return Array.from(this.providers.values());
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A container for all of the Logger instances
	 */
	/**
	 * The JS SDK supports 5 log levels and also allows a user the ability to
	 * silence the logs altogether.
	 *
	 * The order is a follows:
	 * DEBUG < VERBOSE < INFO < WARN < ERROR
	 *
	 * All of the log types above the current log level will be captured (i.e. if
	 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
	 * `VERBOSE` logs will not)
	 */
	var LogLevel;
	(function (LogLevel) {
	    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
	    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
	    LogLevel[LogLevel["INFO"] = 2] = "INFO";
	    LogLevel[LogLevel["WARN"] = 3] = "WARN";
	    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
	    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
	})(LogLevel || (LogLevel = {}));
	const levelStringToEnum = {
	    'debug': LogLevel.DEBUG,
	    'verbose': LogLevel.VERBOSE,
	    'info': LogLevel.INFO,
	    'warn': LogLevel.WARN,
	    'error': LogLevel.ERROR,
	    'silent': LogLevel.SILENT
	};
	/**
	 * The default log level
	 */
	const defaultLogLevel = LogLevel.INFO;
	/**
	 * By default, `console.debug` is not displayed in the developer console (in
	 * chrome). To avoid forcing users to have to opt-in to these logs twice
	 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
	 * logs to the `console.log` function.
	 */
	const ConsoleMethod = {
	    [LogLevel.DEBUG]: 'log',
	    [LogLevel.VERBOSE]: 'log',
	    [LogLevel.INFO]: 'info',
	    [LogLevel.WARN]: 'warn',
	    [LogLevel.ERROR]: 'error'
	};
	/**
	 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
	 * messages on to their corresponding console counterparts (if the log method
	 * is supported by the current log level)
	 */
	const defaultLogHandler = (instance, logType, ...args) => {
	    if (logType < instance.logLevel) {
	        return;
	    }
	    const now = new Date().toISOString();
	    const method = ConsoleMethod[logType];
	    if (method) {
	        console[method](`[${now}]  ${instance.name}:`, ...args);
	    }
	    else {
	        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
	    }
	};
	class Logger {
	    /**
	     * Gives you an instance of a Logger to capture messages according to
	     * Firebase's logging scheme.
	     *
	     * @param name The name that the logs will be associated with
	     */
	    constructor(name) {
	        this.name = name;
	        /**
	         * The log level of the given Logger instance.
	         */
	        this._logLevel = defaultLogLevel;
	        /**
	         * The main (internal) log handler for the Logger instance.
	         * Can be set to a new function in internal package code but not by user.
	         */
	        this._logHandler = defaultLogHandler;
	        /**
	         * The optional, additional, user-defined log handler for the Logger instance.
	         */
	        this._userLogHandler = null;
	    }
	    get logLevel() {
	        return this._logLevel;
	    }
	    set logLevel(val) {
	        if (!(val in LogLevel)) {
	            throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
	        }
	        this._logLevel = val;
	    }
	    // Workaround for setter/getter having to be the same type.
	    setLogLevel(val) {
	        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
	    }
	    get logHandler() {
	        return this._logHandler;
	    }
	    set logHandler(val) {
	        if (typeof val !== 'function') {
	            throw new TypeError('Value assigned to `logHandler` must be a function');
	        }
	        this._logHandler = val;
	    }
	    get userLogHandler() {
	        return this._userLogHandler;
	    }
	    set userLogHandler(val) {
	        this._userLogHandler = val;
	    }
	    /**
	     * The functions below are all based on the `console` interface
	     */
	    debug(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
	        this._logHandler(this, LogLevel.DEBUG, ...args);
	    }
	    log(...args) {
	        this._userLogHandler &&
	            this._userLogHandler(this, LogLevel.VERBOSE, ...args);
	        this._logHandler(this, LogLevel.VERBOSE, ...args);
	    }
	    info(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
	        this._logHandler(this, LogLevel.INFO, ...args);
	    }
	    warn(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
	        this._logHandler(this, LogLevel.WARN, ...args);
	    }
	    error(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
	        this._logHandler(this, LogLevel.ERROR, ...args);
	    }
	}

	const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

	let idbProxyableTypes;
	let cursorAdvanceMethods;
	// This is a function to prevent it throwing up in node environments.
	function getIdbProxyableTypes() {
	    return (idbProxyableTypes ||
	        (idbProxyableTypes = [
	            IDBDatabase,
	            IDBObjectStore,
	            IDBIndex,
	            IDBCursor,
	            IDBTransaction,
	        ]));
	}
	// This is a function to prevent it throwing up in node environments.
	function getCursorAdvanceMethods() {
	    return (cursorAdvanceMethods ||
	        (cursorAdvanceMethods = [
	            IDBCursor.prototype.advance,
	            IDBCursor.prototype.continue,
	            IDBCursor.prototype.continuePrimaryKey,
	        ]));
	}
	const cursorRequestMap = new WeakMap();
	const transactionDoneMap = new WeakMap();
	const transactionStoreNamesMap = new WeakMap();
	const transformCache = new WeakMap();
	const reverseTransformCache = new WeakMap();
	function promisifyRequest(request) {
	    const promise = new Promise((resolve, reject) => {
	        const unlisten = () => {
	            request.removeEventListener('success', success);
	            request.removeEventListener('error', error);
	        };
	        const success = () => {
	            resolve(wrap(request.result));
	            unlisten();
	        };
	        const error = () => {
	            reject(request.error);
	            unlisten();
	        };
	        request.addEventListener('success', success);
	        request.addEventListener('error', error);
	    });
	    promise
	        .then((value) => {
	        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
	        // (see wrapFunction).
	        if (value instanceof IDBCursor) {
	            cursorRequestMap.set(value, request);
	        }
	        // Catching to avoid "Uncaught Promise exceptions"
	    })
	        .catch(() => { });
	    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
	    // is because we create many promises from a single IDBRequest.
	    reverseTransformCache.set(promise, request);
	    return promise;
	}
	function cacheDonePromiseForTransaction(tx) {
	    // Early bail if we've already created a done promise for this transaction.
	    if (transactionDoneMap.has(tx))
	        return;
	    const done = new Promise((resolve, reject) => {
	        const unlisten = () => {
	            tx.removeEventListener('complete', complete);
	            tx.removeEventListener('error', error);
	            tx.removeEventListener('abort', error);
	        };
	        const complete = () => {
	            resolve();
	            unlisten();
	        };
	        const error = () => {
	            reject(tx.error || new DOMException('AbortError', 'AbortError'));
	            unlisten();
	        };
	        tx.addEventListener('complete', complete);
	        tx.addEventListener('error', error);
	        tx.addEventListener('abort', error);
	    });
	    // Cache it for later retrieval.
	    transactionDoneMap.set(tx, done);
	}
	let idbProxyTraps = {
	    get(target, prop, receiver) {
	        if (target instanceof IDBTransaction) {
	            // Special handling for transaction.done.
	            if (prop === 'done')
	                return transactionDoneMap.get(target);
	            // Polyfill for objectStoreNames because of Edge.
	            if (prop === 'objectStoreNames') {
	                return target.objectStoreNames || transactionStoreNamesMap.get(target);
	            }
	            // Make tx.store return the only store in the transaction, or undefined if there are many.
	            if (prop === 'store') {
	                return receiver.objectStoreNames[1]
	                    ? undefined
	                    : receiver.objectStore(receiver.objectStoreNames[0]);
	            }
	        }
	        // Else transform whatever we get back.
	        return wrap(target[prop]);
	    },
	    set(target, prop, value) {
	        target[prop] = value;
	        return true;
	    },
	    has(target, prop) {
	        if (target instanceof IDBTransaction &&
	            (prop === 'done' || prop === 'store')) {
	            return true;
	        }
	        return prop in target;
	    },
	};
	function replaceTraps(callback) {
	    idbProxyTraps = callback(idbProxyTraps);
	}
	function wrapFunction(func) {
	    // Due to expected object equality (which is enforced by the caching in `wrap`), we
	    // only create one new func per func.
	    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
	    if (func === IDBDatabase.prototype.transaction &&
	        !('objectStoreNames' in IDBTransaction.prototype)) {
	        return function (storeNames, ...args) {
	            const tx = func.call(unwrap(this), storeNames, ...args);
	            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
	            return wrap(tx);
	        };
	    }
	    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
	    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
	    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
	    // with real promises, so each advance methods returns a new promise for the cursor object, or
	    // undefined if the end of the cursor has been reached.
	    if (getCursorAdvanceMethods().includes(func)) {
	        return function (...args) {
	            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
	            // the original object.
	            func.apply(unwrap(this), args);
	            return wrap(cursorRequestMap.get(this));
	        };
	    }
	    return function (...args) {
	        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
	        // the original object.
	        return wrap(func.apply(unwrap(this), args));
	    };
	}
	function transformCachableValue(value) {
	    if (typeof value === 'function')
	        return wrapFunction(value);
	    // This doesn't return, it just creates a 'done' promise for the transaction,
	    // which is later returned for transaction.done (see idbObjectHandler).
	    if (value instanceof IDBTransaction)
	        cacheDonePromiseForTransaction(value);
	    if (instanceOfAny(value, getIdbProxyableTypes()))
	        return new Proxy(value, idbProxyTraps);
	    // Return the same value back if we're not going to transform it.
	    return value;
	}
	function wrap(value) {
	    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
	    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
	    if (value instanceof IDBRequest)
	        return promisifyRequest(value);
	    // If we've already transformed this value before, reuse the transformed value.
	    // This is faster, but it also provides object equality.
	    if (transformCache.has(value))
	        return transformCache.get(value);
	    const newValue = transformCachableValue(value);
	    // Not all types are transformed.
	    // These may be primitive types, so they can't be WeakMap keys.
	    if (newValue !== value) {
	        transformCache.set(value, newValue);
	        reverseTransformCache.set(newValue, value);
	    }
	    return newValue;
	}
	const unwrap = (value) => reverseTransformCache.get(value);

	/**
	 * Open a database.
	 *
	 * @param name Name of the database.
	 * @param version Schema version.
	 * @param callbacks Additional callbacks.
	 */
	function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
	    const request = indexedDB.open(name, version);
	    const openPromise = wrap(request);
	    if (upgrade) {
	        request.addEventListener('upgradeneeded', (event) => {
	            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
	        });
	    }
	    if (blocked) {
	        request.addEventListener('blocked', (event) => blocked(
	        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
	        event.oldVersion, event.newVersion, event));
	    }
	    openPromise
	        .then((db) => {
	        if (terminated)
	            db.addEventListener('close', () => terminated());
	        if (blocking) {
	            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
	        }
	    })
	        .catch(() => { });
	    return openPromise;
	}

	const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
	const writeMethods = ['put', 'add', 'delete', 'clear'];
	const cachedMethods = new Map();
	function getMethod(target, prop) {
	    if (!(target instanceof IDBDatabase &&
	        !(prop in target) &&
	        typeof prop === 'string')) {
	        return;
	    }
	    if (cachedMethods.get(prop))
	        return cachedMethods.get(prop);
	    const targetFuncName = prop.replace(/FromIndex$/, '');
	    const useIndex = prop !== targetFuncName;
	    const isWrite = writeMethods.includes(targetFuncName);
	    if (
	    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
	    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
	        !(isWrite || readMethods.includes(targetFuncName))) {
	        return;
	    }
	    const method = async function (storeName, ...args) {
	        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
	        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
	        let target = tx.store;
	        if (useIndex)
	            target = target.index(args.shift());
	        // Must reject if op rejects.
	        // If it's a write operation, must reject if tx.done rejects.
	        // Must reject with op rejection first.
	        // Must resolve with op value.
	        // Must handle both promises (no unhandled rejections)
	        return (await Promise.all([
	            target[targetFuncName](...args),
	            isWrite && tx.done,
	        ]))[0];
	    };
	    cachedMethods.set(prop, method);
	    return method;
	}
	replaceTraps((oldTraps) => ({
	    ...oldTraps,
	    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
	    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
	}));

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class PlatformLoggerServiceImpl {
	    constructor(container) {
	        this.container = container;
	    }
	    // In initial implementation, this will be called by installations on
	    // auth token refresh, and installations will send this string.
	    getPlatformInfoString() {
	        const providers = this.container.getProviders();
	        // Loop through providers and get library/version pairs from any that are
	        // version components.
	        return providers
	            .map(provider => {
	            if (isVersionServiceProvider(provider)) {
	                const service = provider.getImmediate();
	                return `${service.library}/${service.version}`;
	            }
	            else {
	                return null;
	            }
	        })
	            .filter(logString => logString)
	            .join(' ');
	    }
	}
	/**
	 *
	 * @param provider check if this provider provides a VersionService
	 *
	 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
	 * provides VersionService. The provider is not necessarily a 'app-version'
	 * provider.
	 */
	function isVersionServiceProvider(provider) {
	    const component = provider.getComponent();
	    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* ComponentType.VERSION */;
	}

	const name$p = "@firebase/app";
	const version$1 = "0.10.9";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const logger = new Logger('@firebase/app');

	const name$o = "@firebase/app-compat";

	const name$n = "@firebase/analytics-compat";

	const name$m = "@firebase/analytics";

	const name$l = "@firebase/app-check-compat";

	const name$k = "@firebase/app-check";

	const name$j = "@firebase/auth";

	const name$i = "@firebase/auth-compat";

	const name$h = "@firebase/database";

	const name$g = "@firebase/database-compat";

	const name$f = "@firebase/functions";

	const name$e = "@firebase/functions-compat";

	const name$d = "@firebase/installations";

	const name$c = "@firebase/installations-compat";

	const name$b = "@firebase/messaging";

	const name$a = "@firebase/messaging-compat";

	const name$9 = "@firebase/performance";

	const name$8 = "@firebase/performance-compat";

	const name$7 = "@firebase/remote-config";

	const name$6 = "@firebase/remote-config-compat";

	const name$5 = "@firebase/storage";

	const name$4 = "@firebase/storage-compat";

	const name$3 = "@firebase/firestore";

	const name$2 = "@firebase/vertexai-preview";

	const name$1 = "@firebase/firestore-compat";

	const name$q = "firebase";
	const version$2 = "10.13.0";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The default app name
	 *
	 * @internal
	 */
	const DEFAULT_ENTRY_NAME = '[DEFAULT]';
	const PLATFORM_LOG_STRING = {
	    [name$p]: 'fire-core',
	    [name$o]: 'fire-core-compat',
	    [name$m]: 'fire-analytics',
	    [name$n]: 'fire-analytics-compat',
	    [name$k]: 'fire-app-check',
	    [name$l]: 'fire-app-check-compat',
	    [name$j]: 'fire-auth',
	    [name$i]: 'fire-auth-compat',
	    [name$h]: 'fire-rtdb',
	    [name$g]: 'fire-rtdb-compat',
	    [name$f]: 'fire-fn',
	    [name$e]: 'fire-fn-compat',
	    [name$d]: 'fire-iid',
	    [name$c]: 'fire-iid-compat',
	    [name$b]: 'fire-fcm',
	    [name$a]: 'fire-fcm-compat',
	    [name$9]: 'fire-perf',
	    [name$8]: 'fire-perf-compat',
	    [name$7]: 'fire-rc',
	    [name$6]: 'fire-rc-compat',
	    [name$5]: 'fire-gcs',
	    [name$4]: 'fire-gcs-compat',
	    [name$3]: 'fire-fst',
	    [name$1]: 'fire-fst-compat',
	    [name$2]: 'fire-vertex',
	    'fire-js': 'fire-js',
	    [name$q]: 'fire-js-all'
	};

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @internal
	 */
	const _apps = new Map();
	/**
	 * @internal
	 */
	const _serverApps = new Map();
	/**
	 * Registered components.
	 *
	 * @internal
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const _components = new Map();
	/**
	 * @param component - the component being added to this app's container
	 *
	 * @internal
	 */
	function _addComponent(app, component) {
	    try {
	        app.container.addComponent(component);
	    }
	    catch (e) {
	        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
	    }
	}
	/**
	 *
	 * @param component - the component to register
	 * @returns whether or not the component is registered successfully
	 *
	 * @internal
	 */
	function _registerComponent(component) {
	    const componentName = component.name;
	    if (_components.has(componentName)) {
	        logger.debug(`There were multiple attempts to register component ${componentName}.`);
	        return false;
	    }
	    _components.set(componentName, component);
	    // add the component to existing app instances
	    for (const app of _apps.values()) {
	        _addComponent(app, component);
	    }
	    for (const serverApp of _serverApps.values()) {
	        _addComponent(serverApp, component);
	    }
	    return true;
	}
	/**
	 *
	 * @param app - FirebaseApp instance
	 * @param name - service name
	 *
	 * @returns the provider for the service with the matching name
	 *
	 * @internal
	 */
	function _getProvider(app, name) {
	    const heartbeatController = app.container
	        .getProvider('heartbeat')
	        .getImmediate({ optional: true });
	    if (heartbeatController) {
	        void heartbeatController.triggerHeartbeat();
	    }
	    return app.container.getProvider(name);
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const ERRORS = {
	    ["no-app" /* AppError.NO_APP */]: "No Firebase App '{$appName}' has been created - " +
	        'call initializeApp() first',
	    ["bad-app-name" /* AppError.BAD_APP_NAME */]: "Illegal App name: '{$appName}'",
	    ["duplicate-app" /* AppError.DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
	    ["app-deleted" /* AppError.APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
	    ["server-app-deleted" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',
	    ["no-options" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',
	    ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
	        'Firebase App instance.',
	    ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
	    ["idb-open" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
	    ["idb-get" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
	    ["idb-set" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
	    ["idb-delete" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',
	    ["finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',
	    ["invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'
	};
	const ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class FirebaseAppImpl {
	    constructor(options, config, container) {
	        this._isDeleted = false;
	        this._options = Object.assign({}, options);
	        this._config = Object.assign({}, config);
	        this._name = config.name;
	        this._automaticDataCollectionEnabled =
	            config.automaticDataCollectionEnabled;
	        this._container = container;
	        this.container.addComponent(new Component('app', () => this, "PUBLIC" /* ComponentType.PUBLIC */));
	    }
	    get automaticDataCollectionEnabled() {
	        this.checkDestroyed();
	        return this._automaticDataCollectionEnabled;
	    }
	    set automaticDataCollectionEnabled(val) {
	        this.checkDestroyed();
	        this._automaticDataCollectionEnabled = val;
	    }
	    get name() {
	        this.checkDestroyed();
	        return this._name;
	    }
	    get options() {
	        this.checkDestroyed();
	        return this._options;
	    }
	    get config() {
	        this.checkDestroyed();
	        return this._config;
	    }
	    get container() {
	        return this._container;
	    }
	    get isDeleted() {
	        return this._isDeleted;
	    }
	    set isDeleted(val) {
	        this._isDeleted = val;
	    }
	    /**
	     * This function will throw an Error if the App has already been deleted -
	     * use before performing API actions on the App.
	     */
	    checkDestroyed() {
	        if (this.isDeleted) {
	            throw ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */, { appName: this._name });
	        }
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The current SDK version.
	 *
	 * @public
	 */
	const SDK_VERSION = version$2;
	function initializeApp(_options, rawConfig = {}) {
	    let options = _options;
	    if (typeof rawConfig !== 'object') {
	        const name = rawConfig;
	        rawConfig = { name };
	    }
	    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
	    const name = config.name;
	    if (typeof name !== 'string' || !name) {
	        throw ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */, {
	            appName: String(name)
	        });
	    }
	    options || (options = getDefaultAppConfig());
	    if (!options) {
	        throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */);
	    }
	    const existingApp = _apps.get(name);
	    if (existingApp) {
	        // return the existing app if options and config deep equal the ones in the existing app.
	        if (deepEqual(options, existingApp.options) &&
	            deepEqual(config, existingApp.config)) {
	            return existingApp;
	        }
	        else {
	            throw ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */, { appName: name });
	        }
	    }
	    const container = new ComponentContainer(name);
	    for (const component of _components.values()) {
	        container.addComponent(component);
	    }
	    const newApp = new FirebaseAppImpl(options, config, container);
	    _apps.set(name, newApp);
	    return newApp;
	}
	/**
	 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
	 *
	 * When called with no arguments, the default app is returned. When an app name
	 * is provided, the app corresponding to that name is returned.
	 *
	 * An exception is thrown if the app being retrieved has not yet been
	 * initialized.
	 *
	 * @example
	 * ```javascript
	 * // Return the default app
	 * const app = getApp();
	 * ```
	 *
	 * @example
	 * ```javascript
	 * // Return a named app
	 * const otherApp = getApp("otherApp");
	 * ```
	 *
	 * @param name - Optional name of the app to return. If no name is
	 *   provided, the default is `"[DEFAULT]"`.
	 *
	 * @returns The app corresponding to the provided app name.
	 *   If no app name is provided, the default app is returned.
	 *
	 * @public
	 */
	function getApp(name = DEFAULT_ENTRY_NAME) {
	    const app = _apps.get(name);
	    if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {
	        return initializeApp();
	    }
	    if (!app) {
	        throw ERROR_FACTORY.create("no-app" /* AppError.NO_APP */, { appName: name });
	    }
	    return app;
	}
	/**
	 * Registers a library's name and version for platform logging purposes.
	 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
	 * @param version - Current version of that library.
	 * @param variant - Bundle variant, e.g., node, rn, etc.
	 *
	 * @public
	 */
	function registerVersion(libraryKeyOrName, version, variant) {
	    var _a;
	    // TODO: We can use this check to whitelist strings when/if we set up
	    // a good whitelist system.
	    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
	    if (variant) {
	        library += `-${variant}`;
	    }
	    const libraryMismatch = library.match(/\s|\//);
	    const versionMismatch = version.match(/\s|\//);
	    if (libraryMismatch || versionMismatch) {
	        const warning = [
	            `Unable to register library "${library}" with version "${version}":`
	        ];
	        if (libraryMismatch) {
	            warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
	        }
	        if (libraryMismatch && versionMismatch) {
	            warning.push('and');
	        }
	        if (versionMismatch) {
	            warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
	        }
	        logger.warn(warning.join(' '));
	        return;
	    }
	    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), "VERSION" /* ComponentType.VERSION */));
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const DB_NAME = 'firebase-heartbeat-database';
	const DB_VERSION = 1;
	const STORE_NAME = 'firebase-heartbeat-store';
	let dbPromise = null;
	function getDbPromise() {
	    if (!dbPromise) {
	        dbPromise = openDB(DB_NAME, DB_VERSION, {
	            upgrade: (db, oldVersion) => {
	                // We don't use 'break' in this switch statement, the fall-through
	                // behavior is what we want, because if there are multiple versions between
	                // the old version and the current version, we want ALL the migrations
	                // that correspond to those versions to run, not only the last one.
	                // eslint-disable-next-line default-case
	                switch (oldVersion) {
	                    case 0:
	                        try {
	                            db.createObjectStore(STORE_NAME);
	                        }
	                        catch (e) {
	                            // Safari/iOS browsers throw occasional exceptions on
	                            // db.createObjectStore() that may be a bug. Avoid blocking
	                            // the rest of the app functionality.
	                            console.warn(e);
	                        }
	                }
	            }
	        }).catch(e => {
	            throw ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */, {
	                originalErrorMessage: e.message
	            });
	        });
	    }
	    return dbPromise;
	}
	async function readHeartbeatsFromIndexedDB(app) {
	    try {
	        const db = await getDbPromise();
	        const tx = db.transaction(STORE_NAME);
	        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));
	        // We already have the value but tx.done can throw,
	        // so we need to await it here to catch errors
	        await tx.done;
	        return result;
	    }
	    catch (e) {
	        if (e instanceof FirebaseError) {
	            logger.warn(e.message);
	        }
	        else {
	            const idbGetError = ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */, {
	                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
	            });
	            logger.warn(idbGetError.message);
	        }
	    }
	}
	async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
	    try {
	        const db = await getDbPromise();
	        const tx = db.transaction(STORE_NAME, 'readwrite');
	        const objectStore = tx.objectStore(STORE_NAME);
	        await objectStore.put(heartbeatObject, computeKey(app));
	        await tx.done;
	    }
	    catch (e) {
	        if (e instanceof FirebaseError) {
	            logger.warn(e.message);
	        }
	        else {
	            const idbGetError = ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */, {
	                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
	            });
	            logger.warn(idbGetError.message);
	        }
	    }
	}
	function computeKey(app) {
	    return `${app.name}!${app.options.appId}`;
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const MAX_HEADER_BYTES = 1024;
	// 30 days
	const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
	class HeartbeatServiceImpl {
	    constructor(container) {
	        this.container = container;
	        /**
	         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
	         * the header string.
	         * Stores one record per date. This will be consolidated into the standard
	         * format of one record per user agent string before being sent as a header.
	         * Populated from indexedDB when the controller is instantiated and should
	         * be kept in sync with indexedDB.
	         * Leave public for easier testing.
	         */
	        this._heartbeatsCache = null;
	        const app = this.container.getProvider('app').getImmediate();
	        this._storage = new HeartbeatStorageImpl(app);
	        this._heartbeatsCachePromise = this._storage.read().then(result => {
	            this._heartbeatsCache = result;
	            return result;
	        });
	    }
	    /**
	     * Called to report a heartbeat. The function will generate
	     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
	     * to IndexedDB.
	     * Note that we only store one heartbeat per day. So if a heartbeat for today is
	     * already logged, subsequent calls to this function in the same day will be ignored.
	     */
	    async triggerHeartbeat() {
	        var _a, _b, _c;
	        try {
	            const platformLogger = this.container
	                .getProvider('platform-logger')
	                .getImmediate();
	            // This is the "Firebase user agent" string from the platform logger
	            // service, not the browser user agent.
	            const agent = platformLogger.getPlatformInfoString();
	            const date = getUTCDateString();
	            console.log('heartbeats', (_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats);
	            if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
	                this._heartbeatsCache = await this._heartbeatsCachePromise;
	                // If we failed to construct a heartbeats cache, then return immediately.
	                if (((_c = this._heartbeatsCache) === null || _c === void 0 ? void 0 : _c.heartbeats) == null) {
	                    return;
	                }
	            }
	            // Do not store a heartbeat if one is already stored for this day
	            // or if a header has already been sent today.
	            if (this._heartbeatsCache.lastSentHeartbeatDate === date ||
	                this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
	                return;
	            }
	            else {
	                // There is no entry for this date. Create one.
	                this._heartbeatsCache.heartbeats.push({ date, agent });
	            }
	            // Remove entries older than 30 days.
	            this._heartbeatsCache.heartbeats =
	                this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {
	                    const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
	                    const now = Date.now();
	                    return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
	                });
	            return this._storage.overwrite(this._heartbeatsCache);
	        }
	        catch (e) {
	            logger.warn(e);
	        }
	    }
	    /**
	     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
	     * It also clears all heartbeats from memory as well as in IndexedDB.
	     *
	     * NOTE: Consuming product SDKs should not send the header if this method
	     * returns an empty string.
	     */
	    async getHeartbeatsHeader() {
	        var _a;
	        try {
	            if (this._heartbeatsCache === null) {
	                await this._heartbeatsCachePromise;
	            }
	            // If it's still null or the array is empty, there is no data to send.
	            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||
	                this._heartbeatsCache.heartbeats.length === 0) {
	                return '';
	            }
	            const date = getUTCDateString();
	            // Extract as many heartbeats from the cache as will fit under the size limit.
	            const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
	            const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
	            // Store last sent date to prevent another being logged/sent for the same day.
	            this._heartbeatsCache.lastSentHeartbeatDate = date;
	            if (unsentEntries.length > 0) {
	                // Store any unsent entries if they exist.
	                this._heartbeatsCache.heartbeats = unsentEntries;
	                // This seems more likely than emptying the array (below) to lead to some odd state
	                // since the cache isn't empty and this will be called again on the next request,
	                // and is probably safest if we await it.
	                await this._storage.overwrite(this._heartbeatsCache);
	            }
	            else {
	                this._heartbeatsCache.heartbeats = [];
	                // Do not wait for this, to reduce latency.
	                void this._storage.overwrite(this._heartbeatsCache);
	            }
	            return headerString;
	        }
	        catch (e) {
	            logger.warn(e);
	            return '';
	        }
	    }
	}
	function getUTCDateString() {
	    const today = new Date();
	    // Returns date format 'YYYY-MM-DD'
	    return today.toISOString().substring(0, 10);
	}
	function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
	    // Heartbeats grouped by user agent in the standard format to be sent in
	    // the header.
	    const heartbeatsToSend = [];
	    // Single date format heartbeats that are not sent.
	    let unsentEntries = heartbeatsCache.slice();
	    for (const singleDateHeartbeat of heartbeatsCache) {
	        // Look for an existing entry with the same user agent.
	        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
	        if (!heartbeatEntry) {
	            // If no entry for this user agent exists, create one.
	            heartbeatsToSend.push({
	                agent: singleDateHeartbeat.agent,
	                dates: [singleDateHeartbeat.date]
	            });
	            if (countBytes(heartbeatsToSend) > maxSize) {
	                // If the header would exceed max size, remove the added heartbeat
	                // entry and stop adding to the header.
	                heartbeatsToSend.pop();
	                break;
	            }
	        }
	        else {
	            heartbeatEntry.dates.push(singleDateHeartbeat.date);
	            // If the header would exceed max size, remove the added date
	            // and stop adding to the header.
	            if (countBytes(heartbeatsToSend) > maxSize) {
	                heartbeatEntry.dates.pop();
	                break;
	            }
	        }
	        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
	        // quota and the loop breaks early.)
	        unsentEntries = unsentEntries.slice(1);
	    }
	    return {
	        heartbeatsToSend,
	        unsentEntries
	    };
	}
	class HeartbeatStorageImpl {
	    constructor(app) {
	        this.app = app;
	        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
	    }
	    async runIndexedDBEnvironmentCheck() {
	        if (!isIndexedDBAvailable()) {
	            return false;
	        }
	        else {
	            return validateIndexedDBOpenable()
	                .then(() => true)
	                .catch(() => false);
	        }
	    }
	    /**
	     * Read all heartbeats.
	     */
	    async read() {
	        const canUseIndexedDB = await this._canUseIndexedDBPromise;
	        if (!canUseIndexedDB) {
	            return { heartbeats: [] };
	        }
	        else {
	            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
	            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {
	                return idbHeartbeatObject;
	            }
	            else {
	                return { heartbeats: [] };
	            }
	        }
	    }
	    // overwrite the storage with the provided heartbeats
	    async overwrite(heartbeatsObject) {
	        var _a;
	        const canUseIndexedDB = await this._canUseIndexedDBPromise;
	        if (!canUseIndexedDB) {
	            return;
	        }
	        else {
	            const existingHeartbeatsObject = await this.read();
	            return writeHeartbeatsToIndexedDB(this.app, {
	                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
	                heartbeats: heartbeatsObject.heartbeats
	            });
	        }
	    }
	    // add heartbeats
	    async add(heartbeatsObject) {
	        var _a;
	        const canUseIndexedDB = await this._canUseIndexedDBPromise;
	        if (!canUseIndexedDB) {
	            return;
	        }
	        else {
	            const existingHeartbeatsObject = await this.read();
	            return writeHeartbeatsToIndexedDB(this.app, {
	                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
	                heartbeats: [
	                    ...existingHeartbeatsObject.heartbeats,
	                    ...heartbeatsObject.heartbeats
	                ]
	            });
	        }
	    }
	}
	/**
	 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
	 * in a platform logging header JSON object, stringified, and converted
	 * to base 64.
	 */
	function countBytes(heartbeatsCache) {
	    // base64 has a restricted set of characters, all of which should be 1 byte.
	    return base64urlEncodeWithoutPadding(
	    // heartbeatsCache wrapper properties
	    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerCoreComponents(variant) {
	    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
	    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
	    // Register `app` package.
	    registerVersion(name$p, version$1, variant);
	    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
	    registerVersion(name$p, version$1, 'esm2017');
	    // Register platform SDK identifier (no version).
	    registerVersion('fire-js', '');
	}

	/**
	 * Firebase App
	 *
	 * @remarks This package coordinates the communication between the different Firebase components
	 * @packageDocumentation
	 */
	registerCoreComponents('');

	var name = "firebase";
	var version = "10.13.0";

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	registerVersion(name, version, 'app');

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Simple wrapper around a nullable UID. Mostly exists to make code more
	 * readable.
	 */
	class User {
	    constructor(t) {
	        this.uid = t;
	    }
	    isAuthenticated() {
	        return null != this.uid;
	    }
	    /**
	     * Returns a key representing this user, suitable for inclusion in a
	     * dictionary.
	     */    toKey() {
	        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
	    }
	    isEqual(t) {
	        return t.uid === this.uid;
	    }
	}

	/** A user with a null UID. */ User.UNAUTHENTICATED = new User(null), 
	// TODO(mikelehen): Look into getting a proper uid-equivalent for
	// non-FirebaseAuth providers.
	User.GOOGLE_CREDENTIALS = new User("google-credentials-uid"), User.FIRST_PARTY = new User("first-party-uid"), 
	User.MOCK_USER = new User("mock-user");

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	let d = "10.13.0";

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const f = new Logger("@firebase/firestore");

	function __PRIVATE_logDebug(t, ...e) {
	    if (f.logLevel <= LogLevel.DEBUG) {
	        const r = e.map(__PRIVATE_argToString);
	        f.debug(`Firestore (${d}): ${t}`, ...r);
	    }
	}

	function __PRIVATE_logError(t, ...e) {
	    if (f.logLevel <= LogLevel.ERROR) {
	        const r = e.map(__PRIVATE_argToString);
	        f.error(`Firestore (${d}): ${t}`, ...r);
	    }
	}

	/**
	 * @internal
	 */ function __PRIVATE_logWarn(t, ...e) {
	    if (f.logLevel <= LogLevel.WARN) {
	        const r = e.map(__PRIVATE_argToString);
	        f.warn(`Firestore (${d}): ${t}`, ...r);
	    }
	}

	/**
	 * Converts an additional log parameter to a string representation.
	 */ function __PRIVATE_argToString(t) {
	    if ("string" == typeof t) return t;
	    try {
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	        /** Formats an object as a JSON string, suitable for logging. */
	        return function __PRIVATE_formatJSON(t) {
	            return JSON.stringify(t);
	        }(t);
	    } catch (e) {
	        // Converting to JSON failed, just log the object directly
	        return t;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Unconditionally fails, throwing an Error with the given message.
	 * Messages are stripped in production builds.
	 *
	 * Returns `never` and can be used in expressions:
	 * @example
	 * let futureVar = fail('not implemented yet');
	 */ function fail(t = "Unexpected state") {
	    // Log the failure in addition to throw an exception, just in case the
	    // exception is swallowed.
	    const e = `FIRESTORE (${d}) INTERNAL ASSERTION FAILED: ` + t;
	    // NOTE: We don't use FirestoreError here because these are internal failures
	    // that cannot be handled by the user. (Also it would create a circular
	    // dependency between the error and assert modules which doesn't work.)
	    throw __PRIVATE_logError(e), new Error(e);
	}

	/**
	 * Fails if the given assertion condition is false, throwing an Error with the
	 * given message if it did.
	 *
	 * Messages are stripped in production builds.
	 */ function __PRIVATE_hardAssert(t, e) {
	    t || fail();
	}

	/**
	 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
	 * instance of `T` before casting.
	 */ function __PRIVATE_debugCast(t, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	e) {
	    return t;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const E = "ok", m = "cancelled", A = "unknown", T = "invalid-argument", R = "deadline-exceeded", P = "not-found", I = "permission-denied", p = "unauthenticated", y = "resource-exhausted", w = "failed-precondition", g = "aborted", F = "out-of-range", v = "unimplemented", D = "internal", b = "unavailable";

	/** An error returned by a Firestore operation. */ class FirestoreError extends FirebaseError {
	    /** @hideconstructor */
	    constructor(
	    /**
	     * The backend error code associated with this error.
	     */
	    t, 
	    /**
	     * A custom error description.
	     */
	    e) {
	        super(t, e), this.code = t, this.message = e, 
	        // HACK: We write a toString property directly because Error is not a real
	        // class and so inheritance does not work correctly. We could alternatively
	        // do the same "back-door inheritance" trick that FirebaseError does.
	        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_OAuthToken {
	    constructor(t, e) {
	        this.user = e, this.type = "OAuth", this.headers = new Map, this.headers.set("Authorization", `Bearer ${t}`);
	    }
	}

	/**
	 * A CredentialsProvider that always yields an empty token.
	 * @internal
	 */ class __PRIVATE_EmptyAuthCredentialsProvider {
	    getToken() {
	        return Promise.resolve(null);
	    }
	    invalidateToken() {}
	    start(t, e) {
	        // Fire with initial user.
	        t.enqueueRetryable((() => e(User.UNAUTHENTICATED)));
	    }
	    shutdown() {}
	}

	/**
	 * A CredentialsProvider that always returns a constant token. Used for
	 * emulator token mocking.
	 */ class __PRIVATE_EmulatorAuthCredentialsProvider {
	    constructor(t) {
	        this.token = t, 
	        /**
	         * Stores the listener registered with setChangeListener()
	         * This isn't actually necessary since the UID never changes, but we use this
	         * to verify the listen contract is adhered to in tests.
	         */
	        this.changeListener = null;
	    }
	    getToken() {
	        return Promise.resolve(this.token);
	    }
	    invalidateToken() {}
	    start(t, e) {
	        this.changeListener = e, 
	        // Fire with initial user.
	        t.enqueueRetryable((() => e(this.token.user)));
	    }
	    shutdown() {
	        this.changeListener = null;
	    }
	}

	/** Credential provider for the Lite SDK. */ class __PRIVATE_LiteAuthCredentialsProvider {
	    constructor(t) {
	        this.auth = null, t.onInit((t => {
	            this.auth = t;
	        }));
	    }
	    getToken() {
	        return this.auth ? this.auth.getToken().then((t => t ? (__PRIVATE_hardAssert("string" == typeof t.accessToken), 
	        new __PRIVATE_OAuthToken(t.accessToken, new User(this.auth.getUid()))) : null)) : Promise.resolve(null);
	    }
	    invalidateToken() {}
	    start(t, e) {}
	    shutdown() {}
	}

	/*
	 * FirstPartyToken provides a fresh token each time its value
	 * is requested, because if the token is too old, requests will be rejected.
	 * Technically this may no longer be necessary since the SDK should gracefully
	 * recover from unauthenticated errors (see b/33147818 for context), but it's
	 * safer to keep the implementation as-is.
	 */ class __PRIVATE_FirstPartyToken {
	    constructor(t, e, r) {
	        this.t = t, this.i = e, this.o = r, this.type = "FirstParty", this.user = User.FIRST_PARTY, 
	        this.u = new Map;
	    }
	    /**
	     * Gets an authorization token, using a provided factory function, or return
	     * null.
	     */    l() {
	        return this.o ? this.o() : null;
	    }
	    get headers() {
	        this.u.set("X-Goog-AuthUser", this.t);
	        // Use array notation to prevent minification
	        const t = this.l();
	        return t && this.u.set("Authorization", t), this.i && this.u.set("X-Goog-Iam-Authorization-Token", this.i), 
	        this.u;
	    }
	}

	/*
	 * Provides user credentials required for the Firestore JavaScript SDK
	 * to authenticate the user, using technique that is only available
	 * to applications hosted by Google.
	 */ class __PRIVATE_FirstPartyAuthCredentialsProvider {
	    constructor(t, e, r) {
	        this.t = t, this.i = e, this.o = r;
	    }
	    getToken() {
	        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.t, this.i, this.o));
	    }
	    start(t, e) {
	        // Fire with initial uid.
	        t.enqueueRetryable((() => e(User.FIRST_PARTY)));
	    }
	    shutdown() {}
	    invalidateToken() {}
	}

	class AppCheckToken {
	    constructor(t) {
	        this.value = t, this.type = "AppCheck", this.headers = new Map, t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
	    }
	}

	/** AppCheck token provider for the Lite SDK. */ class __PRIVATE_LiteAppCheckTokenProvider {
	    constructor(t) {
	        this.h = t, this.appCheck = null, t.onInit((t => {
	            this.appCheck = t;
	        }));
	    }
	    getToken() {
	        return this.appCheck ? this.appCheck.getToken().then((t => t ? (__PRIVATE_hardAssert("string" == typeof t.token), 
	        new AppCheckToken(t.token)) : null)) : Promise.resolve(null);
	    }
	    invalidateToken() {}
	    start(t, e) {}
	    shutdown() {}
	}

	/**
	 * Builds a CredentialsProvider depending on the type of
	 * the credentials passed in.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class DatabaseInfo {
	    /**
	     * Constructs a DatabaseInfo using the provided host, databaseId and
	     * persistenceKey.
	     *
	     * @param databaseId - The database to use.
	     * @param appId - The Firebase App Id.
	     * @param persistenceKey - A unique identifier for this Firestore's local
	     * storage (used in conjunction with the databaseId).
	     * @param host - The Firestore backend host to connect to.
	     * @param ssl - Whether to use SSL when connecting.
	     * @param forceLongPolling - Whether to use the forceLongPolling option
	     * when using WebChannel as the network transport.
	     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
	     * option when using WebChannel as the network transport.
	     * @param longPollingOptions Options that configure long-polling.
	     * @param useFetchStreams Whether to use the Fetch API instead of
	     * XMLHTTPRequest
	     */
	    constructor(t, e, r, n, i, s, o, a, u) {
	        this.databaseId = t, this.appId = e, this.persistenceKey = r, this.host = n, this.ssl = i, 
	        this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = a, 
	        this.useFetchStreams = u;
	    }
	}

	/** The default database name for a project. */
	/**
	 * Represents the database ID a Firestore client is associated with.
	 * @internal
	 */
	class DatabaseId {
	    constructor(t, e) {
	        this.projectId = t, this.database = e || "(default)";
	    }
	    static empty() {
	        return new DatabaseId("", "");
	    }
	    get isDefaultDatabase() {
	        return "(default)" === this.database;
	    }
	    isEqual(t) {
	        return t instanceof DatabaseId && t.projectId === this.projectId && t.database === this.database;
	    }
	}

	/**
	 * Path represents an ordered sequence of string segments.
	 */
	class BasePath {
	    constructor(t, e, r) {
	        void 0 === e ? e = 0 : e > t.length && fail(), void 0 === r ? r = t.length - e : r > t.length - e && fail(), 
	        this.segments = t, this.offset = e, this.len = r;
	    }
	    get length() {
	        return this.len;
	    }
	    isEqual(t) {
	        return 0 === BasePath.comparator(this, t);
	    }
	    child(t) {
	        const e = this.segments.slice(this.offset, this.limit());
	        return t instanceof BasePath ? t.forEach((t => {
	            e.push(t);
	        })) : e.push(t), this.construct(e);
	    }
	    /** The index of one past the last segment of the path. */    limit() {
	        return this.offset + this.length;
	    }
	    popFirst(t) {
	        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
	    }
	    popLast() {
	        return this.construct(this.segments, this.offset, this.length - 1);
	    }
	    firstSegment() {
	        return this.segments[this.offset];
	    }
	    lastSegment() {
	        return this.get(this.length - 1);
	    }
	    get(t) {
	        return this.segments[this.offset + t];
	    }
	    isEmpty() {
	        return 0 === this.length;
	    }
	    isPrefixOf(t) {
	        if (t.length < this.length) return !1;
	        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
	        return !0;
	    }
	    isImmediateParentOf(t) {
	        if (this.length + 1 !== t.length) return !1;
	        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
	        return !0;
	    }
	    forEach(t) {
	        for (let e = this.offset, r = this.limit(); e < r; e++) t(this.segments[e]);
	    }
	    toArray() {
	        return this.segments.slice(this.offset, this.limit());
	    }
	    static comparator(t, e) {
	        const r = Math.min(t.length, e.length);
	        for (let n = 0; n < r; n++) {
	            const r = t.get(n), i = e.get(n);
	            if (r < i) return -1;
	            if (r > i) return 1;
	        }
	        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
	    }
	}

	/**
	 * A slash-separated path for navigating resources (documents and collections)
	 * within Firestore.
	 *
	 * @internal
	 */ class ResourcePath extends BasePath {
	    construct(t, e, r) {
	        return new ResourcePath(t, e, r);
	    }
	    canonicalString() {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        return this.toArray().join("/");
	    }
	    toString() {
	        return this.canonicalString();
	    }
	    /**
	     * Returns a string representation of this path
	     * where each path segment has been encoded with
	     * `encodeURIComponent`.
	     */    toUriEncodedString() {
	        return this.toArray().map(encodeURIComponent).join("/");
	    }
	    /**
	     * Creates a resource path from the given slash-delimited string. If multiple
	     * arguments are provided, all components are combined. Leading and trailing
	     * slashes from all components are ignored.
	     */    static fromString(...t) {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        const e = [];
	        for (const r of t) {
	            if (r.indexOf("//") >= 0) throw new FirestoreError(T, `Invalid segment (${r}). Paths must not contain // in them.`);
	            // Strip leading and trailing slashed.
	                        e.push(...r.split("/").filter((t => t.length > 0)));
	        }
	        return new ResourcePath(e);
	    }
	    static emptyPath() {
	        return new ResourcePath([]);
	    }
	}

	const S = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

	/**
	 * A dot-separated path for navigating sub-objects within a document.
	 * @internal
	 */ class FieldPath$1 extends BasePath {
	    construct(t, e, r) {
	        return new FieldPath$1(t, e, r);
	    }
	    /**
	     * Returns true if the string could be used as a segment in a field path
	     * without escaping.
	     */    static isValidIdentifier(t) {
	        return S.test(t);
	    }
	    canonicalString() {
	        return this.toArray().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), 
	        FieldPath$1.isValidIdentifier(t) || (t = "`" + t + "`"), t))).join(".");
	    }
	    toString() {
	        return this.canonicalString();
	    }
	    /**
	     * Returns true if this field references the key of a document.
	     */    isKeyField() {
	        return 1 === this.length && "__name__" === this.get(0);
	    }
	    /**
	     * The field designating the key of a document.
	     */    static keyField() {
	        return new FieldPath$1([ "__name__" ]);
	    }
	    /**
	     * Parses a field string from the given server-formatted string.
	     *
	     * - Splitting the empty string is not allowed (for now at least).
	     * - Empty segments within the string (e.g. if there are two consecutive
	     *   separators) are not allowed.
	     *
	     * TODO(b/37244157): we should make this more strict. Right now, it allows
	     * non-identifier path components, even if they aren't escaped.
	     */    static fromServerFormat(t) {
	        const e = [];
	        let r = "", n = 0;
	        const __PRIVATE_addCurrentSegment = () => {
	            if (0 === r.length) throw new FirestoreError(T, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
	            e.push(r), r = "";
	        };
	        let i = !1;
	        for (;n < t.length; ) {
	            const e = t[n];
	            if ("\\" === e) {
	                if (n + 1 === t.length) throw new FirestoreError(T, "Path has trailing escape character: " + t);
	                const e = t[n + 1];
	                if ("\\" !== e && "." !== e && "`" !== e) throw new FirestoreError(T, "Path has invalid escape sequence: " + t);
	                r += e, n += 2;
	            } else "`" === e ? (i = !i, n++) : "." !== e || i ? (r += e, n++) : (__PRIVATE_addCurrentSegment(), 
	            n++);
	        }
	        if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(T, "Unterminated ` in path: " + t);
	        return new FieldPath$1(e);
	    }
	    static emptyPath() {
	        return new FieldPath$1([]);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @internal
	 */ class DocumentKey {
	    constructor(t) {
	        this.path = t;
	    }
	    static fromPath(t) {
	        return new DocumentKey(ResourcePath.fromString(t));
	    }
	    static fromName(t) {
	        return new DocumentKey(ResourcePath.fromString(t).popFirst(5));
	    }
	    static empty() {
	        return new DocumentKey(ResourcePath.emptyPath());
	    }
	    get collectionGroup() {
	        return this.path.popLast().lastSegment();
	    }
	    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {
	        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
	    }
	    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {
	        return this.path.get(this.path.length - 2);
	    }
	    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {
	        return this.path.popLast();
	    }
	    isEqual(t) {
	        return null !== t && 0 === ResourcePath.comparator(this.path, t.path);
	    }
	    toString() {
	        return this.path.toString();
	    }
	    static comparator(t, e) {
	        return ResourcePath.comparator(t.path, e.path);
	    }
	    static isDocumentKey(t) {
	        return t.length % 2 == 0;
	    }
	    /**
	     * Creates and returns a new document key with the given segments.
	     *
	     * @param segments - The segments of the path to the document
	     * @returns A new instance of DocumentKey
	     */    static fromSegments(t) {
	        return new DocumentKey(new ResourcePath(t.slice()));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function __PRIVATE_validateNonEmptyArgument(t, e, r) {
	    if (!r) throw new FirestoreError(T, `Function ${t}() cannot be called with an empty ${e}.`);
	}

	/**
	 * Validates that `path` refers to a collection (indicated by the fact it
	 * contains an odd numbers of segments).
	 */ function __PRIVATE_validateCollectionPath(t) {
	    if (DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
	}

	/**
	 * Returns true if it's a non-null object without a custom prototype
	 * (i.e. excludes Array, Date, etc.).
	 */
	/** Returns a string describing the type / value of the provided input. */
	function __PRIVATE_valueDescription(t) {
	    if (void 0 === t) return "undefined";
	    if (null === t) return "null";
	    if ("string" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), 
	    JSON.stringify(t);
	    if ("number" == typeof t || "boolean" == typeof t) return "" + t;
	    if ("object" == typeof t) {
	        if (t instanceof Array) return "an array";
	        {
	            const e = 
	            /** try to get the constructor name for an object. */
	            function __PRIVATE_tryGetCustomObjectType(t) {
	                if (t.constructor) return t.constructor.name;
	                return null;
	            }
	            /**
	 * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
	 * underlying instance. Throws if  `obj` is not an instance of `T`.
	 *
	 * This cast is used in the Lite and Full SDK to verify instance types for
	 * arguments passed to the public API.
	 * @internal
	 */ (t);
	            return e ? `a custom ${e} object` : "an object";
	        }
	    }
	    return "function" == typeof t ? "a function" : fail();
	}

	function __PRIVATE_cast(t, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	e) {
	    if ("_delegate" in t && (
	    // Unwrap Compat types
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    t = t._delegate), !(t instanceof e)) {
	        if (e.name === t.constructor.name) throw new FirestoreError(T, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
	        {
	            const r = __PRIVATE_valueDescription(t);
	            throw new FirestoreError(T, `Expected type '${e.name}', but it was: ${r}`);
	        }
	    }
	    return t;
	}

	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Compares two `ExperimentalLongPollingOptions` objects for equality.
	 */
	/**
	 * Creates and returns a new `ExperimentalLongPollingOptions` with the same
	 * option values as the given instance.
	 */
	function __PRIVATE_cloneLongPollingOptions(t) {
	    const e = {};
	    return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;
	}

	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The value returned from the most recent invocation of
	 * `generateUniqueDebugId()`, or null if it has never been invoked.
	 */ let N = null;

	/**
	 * Generates and returns an initial value for `lastUniqueDebugId`.
	 *
	 * The returned value is randomly selected from a range of integers that are
	 * represented as 8 hexadecimal digits. This means that (within reason) any
	 * numbers generated by incrementing the returned number by 1 will also be
	 * represented by 8 hexadecimal digits. This leads to all "IDs" having the same
	 * length when converted to a hexadecimal string, making reading logs containing
	 * these IDs easier to follow. And since the return value is randomly selected
	 * it will help to differentiate between logs from different executions.
	 */
	/**
	 * Generates and returns a unique ID as a hexadecimal string.
	 *
	 * The returned ID is intended to be used in debug logging messages to help
	 * correlate log messages that may be spatially separated in the logs, but
	 * logically related. For example, a network connection could include the same
	 * "debug ID" string in all of its log messages to help trace a specific
	 * connection over time.
	 *
	 * @return the 10-character generated ID (e.g. "0xa1b2c3d4").
	 */
	function __PRIVATE_generateUniqueDebugId() {
	    return null === N ? N = function __PRIVATE_generateInitialUniqueDebugId() {
	        return 268435456 + Math.round(2147483648 * Math.random());
	    }() : N++, "0x" + N.toString(16);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns whether a variable is either undefined or null.
	 */ function __PRIVATE_isNullOrUndefined(t) {
	    return null == t;
	}

	/** Returns whether the value represents -0. */ function __PRIVATE_isNegativeZero(t) {
	    // Detect if the value is -0.0. Based on polyfill from
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	    return 0 === t && 1 / t == -1 / 0;
	}

	/**
	 * Returns whether a value is an integer and in the safe integer range
	 * @param value - The value to test for being an integer and in the safe range
	 */
	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const O = {
	    BatchGetDocuments: "batchGet",
	    Commit: "commit",
	    RunQuery: "runQuery",
	    RunAggregationQuery: "runAggregationQuery"
	};

	/**
	 * Maps RPC names to the corresponding REST endpoint name.
	 *
	 * We use array notation to avoid mangling.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Error Codes describing the different ways GRPC can fail. These are copied
	 * directly from GRPC's sources here:
	 *
	 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
	 *
	 * Important! The names of these identifiers matter because the string forms
	 * are used for reverse lookups from the webchannel stream. Do NOT change the
	 * names of these identifiers or change this into a const enum.
	 */
	var q, B;

	/**
	 * Converts an HTTP Status Code to the equivalent error code.
	 *
	 * @param status - An HTTP Status Code, like 200, 404, 503, etc.
	 * @returns The equivalent Code. Unknown status codes are mapped to
	 *     Code.UNKNOWN.
	 */
	function __PRIVATE_mapCodeFromHttpStatus(t) {
	    if (void 0 === t) return __PRIVATE_logError("RPC_ERROR", "HTTP error has no status"), 
	    A;
	    // The canonical error codes for Google APIs [1] specify mapping onto HTTP
	    // status codes but the mapping is not bijective. In each case of ambiguity
	    // this function chooses a primary error.
	    
	    // [1]
	    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
	        switch (t) {
	      case 200:
	        // OK
	        return E;

	      case 400:
	        // Bad Request
	        return w;

	        // Other possibilities based on the forward mapping
	        // return Code.INVALID_ARGUMENT;
	        // return Code.OUT_OF_RANGE;
	              case 401:
	        // Unauthorized
	        return p;

	      case 403:
	        // Forbidden
	        return I;

	      case 404:
	        // Not Found
	        return P;

	      case 409:
	        // Conflict
	        return g;

	        // Other possibilities:
	        // return Code.ALREADY_EXISTS;
	              case 416:
	        // Range Not Satisfiable
	        return F;

	      case 429:
	        // Too Many Requests
	        return y;

	      case 499:
	        // Client Closed Request
	        return m;

	      case 500:
	        // Internal Server Error
	        return A;

	        // Other possibilities:
	        // return Code.INTERNAL;
	        // return Code.DATA_LOSS;
	              case 501:
	        // Unimplemented
	        return v;

	      case 503:
	        // Service Unavailable
	        return b;

	      case 504:
	        // Gateway Timeout
	        return R;

	      default:
	        return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? w : t >= 500 && t < 600 ? D : A;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A Rest-based connection that relies on the native HTTP stack
	 * (e.g. `fetch` or a polyfill).
	 */ (B = q || (q = {}))[B.OK = 0] = "OK", B[B.CANCELLED = 1] = "CANCELLED", B[B.UNKNOWN = 2] = "UNKNOWN", 
	B[B.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", B[B.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", 
	B[B.NOT_FOUND = 5] = "NOT_FOUND", B[B.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", B[B.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
	B[B.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", B[B.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
	B[B.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", B[B.ABORTED = 10] = "ABORTED", 
	B[B.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", B[B.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
	B[B.INTERNAL = 13] = "INTERNAL", B[B.UNAVAILABLE = 14] = "UNAVAILABLE", B[B.DATA_LOSS = 15] = "DATA_LOSS";

	class __PRIVATE_FetchConnection extends 
	/**
	 * Base class for all Rest-based connections to the backend (WebChannel and
	 * HTTP).
	 */
	class __PRIVATE_RestConnection {
	    constructor(t) {
	        this.databaseInfo = t, this.databaseId = t.databaseId;
	        const e = t.ssl ? "https" : "http", r = encodeURIComponent(this.databaseId.projectId), n = encodeURIComponent(this.databaseId.database);
	        this.m = e + "://" + t.host, this.A = `projects/${r}/databases/${n}`, this.T = "(default)" === this.databaseId.database ? `project_id=${r}` : `project_id=${r}&database_id=${n}`;
	    }
	    get R() {
	        // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine
	        // where to run the query, and expect the `request` to NOT specify the "path".
	        return !1;
	    }
	    P(t, e, r, n, i) {
	        const s = __PRIVATE_generateUniqueDebugId(), o = this.V(t, e.toUriEncodedString());
	        __PRIVATE_logDebug("RestConnection", `Sending RPC '${t}' ${s}:`, o, r);
	        const a = {
	            "google-cloud-resource-prefix": this.A,
	            "x-goog-request-params": this.T
	        };
	        return this.I(a, n, i), this.p(t, o, a, r).then((e => (__PRIVATE_logDebug("RestConnection", `Received RPC '${t}' ${s}: `, e), 
	        e)), (e => {
	            throw __PRIVATE_logWarn("RestConnection", `RPC '${t}' ${s} failed with error: `, e, "url: ", o, "request:", r), 
	            e;
	        }));
	    }
	    g(t, e, r, n, i, s) {
	        // The REST API automatically aggregates all of the streamed results, so we
	        // can just use the normal invoke() method.
	        return this.P(t, e, r, n, i);
	    }
	    /**
	     * Modifies the headers for a request, adding any authorization token if
	     * present and any additional headers for the request.
	     */    I(t, e, r) {
	        t["X-Goog-Api-Client"] = 
	        // SDK_VERSION is updated to different value at runtime depending on the entry point,
	        // so we need to get its value when we need it in a function.
	        function __PRIVATE_getGoogApiClientValue() {
	            return "gl-js/ fire/" + d;
	        }(), 
	        // Content-Type: text/plain will avoid preflight requests which might
	        // mess with CORS and redirects by proxies. If we add custom headers
	        // we will need to change this code to potentially use the $httpOverwrite
	        // parameter supported by ESF to avoid triggering preflight requests.
	        t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), 
	        e && e.headers.forEach(((e, r) => t[r] = e)), r && r.headers.forEach(((e, r) => t[r] = e));
	    }
	    V(t, e) {
	        const r = O[t];
	        return `${this.m}/v1/${e}:${r}`;
	    }
	    /**
	     * Closes and cleans up any resources associated with the connection. This
	     * implementation is a no-op because there are no resources associated
	     * with the RestConnection that need to be cleaned up.
	     */    terminate() {
	        // No-op
	    }
	} {
	    /**
	     * @param databaseInfo - The connection info.
	     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.
	     */
	    constructor(t, e) {
	        super(t), this.F = e;
	    }
	    v(t, e) {
	        throw new Error("Not supported by FetchConnection");
	    }
	    async p(t, e, r, n) {
	        var i;
	        const s = JSON.stringify(n);
	        let o;
	        try {
	            o = await this.F(e, {
	                method: "POST",
	                headers: r,
	                body: s
	            });
	        } catch (t) {
	            const e = t;
	            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(e.status), "Request failed with error: " + e.statusText);
	        }
	        if (!o.ok) {
	            let t = await o.json();
	            Array.isArray(t) && (t = t[0]);
	            const e = null === (i = null == t ? void 0 : t.error) || void 0 === i ? void 0 : i.message;
	            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);
	        }
	        return o.json();
	    }
	}

	function __PRIVATE_primitiveComparator(t, e) {
	    return t < e ? -1 : t > e ? 1 : 0;
	}

	/** Helper to compare arrays using isEqual(). */ function __PRIVATE_arrayEquals(t, e, r) {
	    return t.length === e.length && t.every(((t, n) => r(t, e[n])));
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function __PRIVATE_objectSize(t) {
	    let e = 0;
	    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e++;
	    return e;
	}

	function forEach(t, e) {
	    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e(r, t[r]);
	}

	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An error encountered while decoding base64 string.
	 */
	class __PRIVATE_Base64DecodeError extends Error {
	    constructor() {
	        super(...arguments), this.name = "Base64DecodeError";
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Converts a Base64 encoded string to a binary string. */
	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Immutable class that represents a "proto" byte string.
	 *
	 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
	 * sent on the wire. This class abstracts away this differentiation by holding
	 * the proto byte string in a common class that must be converted into a string
	 * before being sent as a proto.
	 * @internal
	 */
	class ByteString {
	    constructor(t) {
	        this.binaryString = t;
	    }
	    static fromBase64String(t) {
	        const e = function __PRIVATE_decodeBase64(t) {
	            try {
	                return atob(t);
	            } catch (t) {
	                // Check that `DOMException` is defined before using it to avoid
	                // "ReferenceError: Property 'DOMException' doesn't exist" in react-native.
	                // (https://github.com/firebase/firebase-js-sdk/issues/7115)
	                throw "undefined" != typeof DOMException && t instanceof DOMException ? new __PRIVATE_Base64DecodeError("Invalid base64 string: " + t) : t;
	            }
	        }
	        /** Converts a binary string to a Base64 encoded string. */ (t);
	        return new ByteString(e);
	    }
	    static fromUint8Array(t) {
	        // TODO(indexing); Remove the copy of the byte string here as this method
	        // is frequently called during indexing.
	        const e = 
	        /**
	 * Helper function to convert an Uint8array to a binary string.
	 */
	        function __PRIVATE_binaryStringFromUint8Array(t) {
	            let e = "";
	            for (let r = 0; r < t.length; ++r) e += String.fromCharCode(t[r]);
	            return e;
	        }
	        /**
	 * Helper function to convert a binary string to an Uint8Array.
	 */ (t);
	        return new ByteString(e);
	    }
	    [Symbol.iterator]() {
	        let t = 0;
	        return {
	            next: () => t < this.binaryString.length ? {
	                value: this.binaryString.charCodeAt(t++),
	                done: !1
	            } : {
	                value: void 0,
	                done: !0
	            }
	        };
	    }
	    toBase64() {
	        return function __PRIVATE_encodeBase64(t) {
	            return btoa(t);
	        }(this.binaryString);
	    }
	    toUint8Array() {
	        return function __PRIVATE_uint8ArrayFromBinaryString(t) {
	            const e = new Uint8Array(t.length);
	            for (let r = 0; r < t.length; r++) e[r] = t.charCodeAt(r);
	            return e;
	        }
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
	        (this.binaryString);
	    }
	    approximateByteSize() {
	        return 2 * this.binaryString.length;
	    }
	    compareTo(t) {
	        return __PRIVATE_primitiveComparator(this.binaryString, t.binaryString);
	    }
	    isEqual(t) {
	        return this.binaryString === t.binaryString;
	    }
	}

	ByteString.EMPTY_BYTE_STRING = new ByteString("");

	const $ = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

	/**
	 * Converts the possible Proto values for a timestamp value into a "seconds and
	 * nanos" representation.
	 */ function __PRIVATE_normalizeTimestamp(t) {
	    // The json interface (for the browser) will return an iso timestamp string,
	    // while the proto js library (for node) will return a
	    // google.protobuf.Timestamp instance.
	    if (__PRIVATE_hardAssert(!!t), "string" == typeof t) {
	        // The date string can have higher precision (nanos) than the Date class
	        // (millis), so we do some custom parsing here.
	        // Parse the nanos right out of the string.
	        let e = 0;
	        const r = $.exec(t);
	        if (__PRIVATE_hardAssert(!!r), r[1]) {
	            // Pad the fraction out to 9 digits (nanos).
	            let t = r[1];
	            t = (t + "000000000").substr(0, 9), e = Number(t);
	        }
	        // Parse the date to get the seconds.
	                const n = new Date(t);
	        return {
	            seconds: Math.floor(n.getTime() / 1e3),
	            nanos: e
	        };
	    }
	    return {
	        seconds: __PRIVATE_normalizeNumber(t.seconds),
	        nanos: __PRIVATE_normalizeNumber(t.nanos)
	    };
	}

	/**
	 * Converts the possible Proto types for numbers into a JavaScript number.
	 * Returns 0 if the value is not numeric.
	 */ function __PRIVATE_normalizeNumber(t) {
	    // TODO(bjornick): Handle int64 greater than 53 bits.
	    return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
	}

	/** Converts the possible Proto types for Blobs into a ByteString. */ function __PRIVATE_normalizeByteString(t) {
	    return "string" == typeof t ? ByteString.fromBase64String(t) : ByteString.fromUint8Array(t);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
	/**
	 * A `Timestamp` represents a point in time independent of any time zone or
	 * calendar, represented as seconds and fractions of seconds at nanosecond
	 * resolution in UTC Epoch time.
	 *
	 * It is encoded using the Proleptic Gregorian Calendar which extends the
	 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
	 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
	 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
	 * 9999-12-31T23:59:59.999999999Z.
	 *
	 * For examples and further specifications, refer to the
	 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
	 */
	class Timestamp {
	    /**
	     * Creates a new timestamp.
	     *
	     * @param seconds - The number of seconds of UTC time since Unix epoch
	     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	     *     9999-12-31T23:59:59Z inclusive.
	     * @param nanoseconds - The non-negative fractions of a second at nanosecond
	     *     resolution. Negative second values with fractions must still have
	     *     non-negative nanoseconds values that count forward in time. Must be
	     *     from 0 to 999,999,999 inclusive.
	     */
	    constructor(
	    /**
	     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
	     */
	    t, 
	    /**
	     * The fractions of a second at nanosecond resolution.*
	     */
	    e) {
	        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new FirestoreError(T, "Timestamp nanoseconds out of range: " + e);
	        if (e >= 1e9) throw new FirestoreError(T, "Timestamp nanoseconds out of range: " + e);
	        if (t < -62135596800) throw new FirestoreError(T, "Timestamp seconds out of range: " + t);
	        // This will break in the year 10,000.
	                if (t >= 253402300800) throw new FirestoreError(T, "Timestamp seconds out of range: " + t);
	    }
	    /**
	     * Creates a new timestamp with the current date, with millisecond precision.
	     *
	     * @returns a new timestamp representing the current date.
	     */    static now() {
	        return Timestamp.fromMillis(Date.now());
	    }
	    /**
	     * Creates a new timestamp from the given date.
	     *
	     * @param date - The date to initialize the `Timestamp` from.
	     * @returns A new `Timestamp` representing the same point in time as the given
	     *     date.
	     */    static fromDate(t) {
	        return Timestamp.fromMillis(t.getTime());
	    }
	    /**
	     * Creates a new timestamp from the given number of milliseconds.
	     *
	     * @param milliseconds - Number of milliseconds since Unix epoch
	     *     1970-01-01T00:00:00Z.
	     * @returns A new `Timestamp` representing the same point in time as the given
	     *     number of milliseconds.
	     */    static fromMillis(t) {
	        const e = Math.floor(t / 1e3), r = Math.floor(1e6 * (t - 1e3 * e));
	        return new Timestamp(e, r);
	    }
	    /**
	     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
	     * causes a loss of precision since `Date` objects only support millisecond
	     * precision.
	     *
	     * @returns JavaScript `Date` object representing the same point in time as
	     *     this `Timestamp`, with millisecond precision.
	     */    toDate() {
	        return new Date(this.toMillis());
	    }
	    /**
	     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
	     * epoch). This operation causes a loss of precision.
	     *
	     * @returns The point in time corresponding to this timestamp, represented as
	     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
	     */    toMillis() {
	        return 1e3 * this.seconds + this.nanoseconds / 1e6;
	    }
	    _compareTo(t) {
	        return this.seconds === t.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, t.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, t.seconds);
	    }
	    /**
	     * Returns true if this `Timestamp` is equal to the provided one.
	     *
	     * @param other - The `Timestamp` to compare against.
	     * @returns true if this `Timestamp` is equal to the provided one.
	     */    isEqual(t) {
	        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
	    }
	    /** Returns a textual representation of this `Timestamp`. */    toString() {
	        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
	    }
	    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {
	        return {
	            seconds: this.seconds,
	            nanoseconds: this.nanoseconds
	        };
	    }
	    /**
	     * Converts this object to a primitive string, which allows `Timestamp` objects
	     * to be compared using the `>`, `<=`, `>=` and `>` operators.
	     */    valueOf() {
	        // This method returns a string of the form <seconds>.<nanoseconds> where
	        // <seconds> is translated to have a non-negative value and both <seconds>
	        // and <nanoseconds> are left-padded with zeroes to be a consistent length.
	        // Strings with this format then have a lexicographical ordering that matches
	        // the expected ordering. The <seconds> translation is done to avoid having
	        // a leading negative sign (i.e. a leading '-' character) in its string
	        // representation, which would affect its lexicographical ordering.
	        const t = this.seconds - -62135596800;
	        // Note: Up to 12 decimal digits are required to represent all valid
	        // 'seconds' values.
	                return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a locally-applied ServerTimestamp.
	 *
	 * Server Timestamps are backed by MapValues that contain an internal field
	 * `__type__` with a value of `server_timestamp`. The previous value and local
	 * write time are stored in its `__previous_value__` and `__local_write_time__`
	 * fields respectively.
	 *
	 * Notes:
	 * - ServerTimestampValue instances are created as the result of applying a
	 *   transform. They can only exist in the local view of a document. Therefore
	 *   they do not need to be parsed or serialized.
	 * - When evaluated locally (e.g. for snapshot.data()), they by default
	 *   evaluate to `null`. This behavior can be configured by passing custom
	 *   FieldValueOptions to value().
	 * - With respect to other ServerTimestampValues, they sort by their
	 *   localWriteTime.
	 */ function __PRIVATE_isServerTimestamp(t) {
	    var e, r;
	    return "server_timestamp" === (null === (r = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === r ? void 0 : r.stringValue);
	}

	/**
	 * Returns the value of the field before this ServerTimestamp was set.
	 *
	 * Preserving the previous values allows the user to display the last resoled
	 * value until the backend responds with the timestamp.
	 */ function __PRIVATE_getPreviousValue(t) {
	    const e = t.mapValue.fields.__previous_value__;
	    return __PRIVATE_isServerTimestamp(e) ? __PRIVATE_getPreviousValue(e) : e;
	}

	/**
	 * Returns the local time at which this timestamp was first set.
	 */ function __PRIVATE_getLocalWriteTime(t) {
	    const e = __PRIVATE_normalizeTimestamp(t.mapValue.fields.__local_write_time__.timestampValue);
	    return new Timestamp(e.seconds, e.nanos);
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Q = {
	    fields: {
	        __type__: {
	            stringValue: "__max__"
	        }
	    }
	};

	/** Extracts the backend's type order for the provided value. */
	function __PRIVATE_typeOrder(t) {
	    return "nullValue" in t ? 0 /* TypeOrder.NullValue */ : "booleanValue" in t ? 1 /* TypeOrder.BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* TypeOrder.NumberValue */ : "timestampValue" in t ? 3 /* TypeOrder.TimestampValue */ : "stringValue" in t ? 5 /* TypeOrder.StringValue */ : "bytesValue" in t ? 6 /* TypeOrder.BlobValue */ : "referenceValue" in t ? 7 /* TypeOrder.RefValue */ : "geoPointValue" in t ? 8 /* TypeOrder.GeoPointValue */ : "arrayValue" in t ? 9 /* TypeOrder.ArrayValue */ : "mapValue" in t ? __PRIVATE_isServerTimestamp(t) ? 4 /* TypeOrder.ServerTimestampValue */ : 
	    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */
	    function __PRIVATE_isMaxValue(t) {
	        return "__max__" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;
	    }
	    /**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	    /**
	 * Represents a bound of a query.
	 *
	 * The bound is specified with the given components representing a position and
	 * whether it's just before or just after the position (relative to whatever the
	 * query order is).
	 *
	 * The position represents a logical index position for a query. It's a prefix
	 * of values for the (potentially implicit) order by clauses of a query.
	 *
	 * Bound provides a function to determine whether a document comes before or
	 * after a bound. This is influenced by whether the position is just before or
	 * just after the provided values.
	 */ (t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 
	    /** Returns true if `value` is a VetorValue. */
	    function __PRIVATE_isVectorValue(t) {
	        var e, r;
	        return "__vector__" === (null === (r = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === r ? void 0 : r.stringValue);
	    }
	    /** Creates a deep copy of `source`. */ (t) ? 10 /* TypeOrder.VectorValue */ : 11 /* TypeOrder.ObjectValue */ : fail();
	}

	/** Tests `left` and `right` for equality based on the backend semantics. */ function __PRIVATE_valueEquals(t, e) {
	    if (t === e) return !0;
	    const r = __PRIVATE_typeOrder(t);
	    if (r !== __PRIVATE_typeOrder(e)) return !1;
	    switch (r) {
	      case 0 /* TypeOrder.NullValue */ :
	      case 9007199254740991 /* TypeOrder.MaxValue */ :
	        return !0;

	      case 1 /* TypeOrder.BooleanValue */ :
	        return t.booleanValue === e.booleanValue;

	      case 4 /* TypeOrder.ServerTimestampValue */ :
	        return __PRIVATE_getLocalWriteTime(t).isEqual(__PRIVATE_getLocalWriteTime(e));

	      case 3 /* TypeOrder.TimestampValue */ :
	        return function __PRIVATE_timestampEquals(t, e) {
	            if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
	            // Use string equality for ISO 8601 timestamps
	            return t.timestampValue === e.timestampValue;
	            const r = __PRIVATE_normalizeTimestamp(t.timestampValue), n = __PRIVATE_normalizeTimestamp(e.timestampValue);
	            return r.seconds === n.seconds && r.nanos === n.nanos;
	        }(t, e);

	      case 5 /* TypeOrder.StringValue */ :
	        return t.stringValue === e.stringValue;

	      case 6 /* TypeOrder.BlobValue */ :
	        return function __PRIVATE_blobEquals(t, e) {
	            return __PRIVATE_normalizeByteString(t.bytesValue).isEqual(__PRIVATE_normalizeByteString(e.bytesValue));
	        }(t, e);

	      case 7 /* TypeOrder.RefValue */ :
	        return t.referenceValue === e.referenceValue;

	      case 8 /* TypeOrder.GeoPointValue */ :
	        return function __PRIVATE_geoPointEquals(t, e) {
	            return __PRIVATE_normalizeNumber(t.geoPointValue.latitude) === __PRIVATE_normalizeNumber(e.geoPointValue.latitude) && __PRIVATE_normalizeNumber(t.geoPointValue.longitude) === __PRIVATE_normalizeNumber(e.geoPointValue.longitude);
	        }(t, e);

	      case 2 /* TypeOrder.NumberValue */ :
	        return function __PRIVATE_numberEquals(t, e) {
	            if ("integerValue" in t && "integerValue" in e) return __PRIVATE_normalizeNumber(t.integerValue) === __PRIVATE_normalizeNumber(e.integerValue);
	            if ("doubleValue" in t && "doubleValue" in e) {
	                const r = __PRIVATE_normalizeNumber(t.doubleValue), n = __PRIVATE_normalizeNumber(e.doubleValue);
	                return r === n ? __PRIVATE_isNegativeZero(r) === __PRIVATE_isNegativeZero(n) : isNaN(r) && isNaN(n);
	            }
	            return !1;
	        }(t, e);

	      case 9 /* TypeOrder.ArrayValue */ :
	        return __PRIVATE_arrayEquals(t.arrayValue.values || [], e.arrayValue.values || [], __PRIVATE_valueEquals);

	      case 10 /* TypeOrder.VectorValue */ :
	      case 11 /* TypeOrder.ObjectValue */ :
	        return function __PRIVATE_objectEquals(t, e) {
	            const r = t.mapValue.fields || {}, n = e.mapValue.fields || {};
	            if (__PRIVATE_objectSize(r) !== __PRIVATE_objectSize(n)) return !1;
	            for (const t in r) if (r.hasOwnProperty(t) && (void 0 === n[t] || !__PRIVATE_valueEquals(r[t], n[t]))) return !1;
	            return !0;
	        }
	        /** Returns true if the ArrayValue contains the specified element. */ (t, e);

	      default:
	        return fail();
	    }
	}

	function __PRIVATE_arrayValueContains(t, e) {
	    return void 0 !== (t.values || []).find((t => __PRIVATE_valueEquals(t, e)));
	}

	function __PRIVATE_valueCompare(t, e) {
	    if (t === e) return 0;
	    const r = __PRIVATE_typeOrder(t), n = __PRIVATE_typeOrder(e);
	    if (r !== n) return __PRIVATE_primitiveComparator(r, n);
	    switch (r) {
	      case 0 /* TypeOrder.NullValue */ :
	      case 9007199254740991 /* TypeOrder.MaxValue */ :
	        return 0;

	      case 1 /* TypeOrder.BooleanValue */ :
	        return __PRIVATE_primitiveComparator(t.booleanValue, e.booleanValue);

	      case 2 /* TypeOrder.NumberValue */ :
	        return function __PRIVATE_compareNumbers(t, e) {
	            const r = __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue), n = __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
	            return r < n ? -1 : r > n ? 1 : r === n ? 0 : 
	            // one or both are NaN.
	            isNaN(r) ? isNaN(n) ? 0 : -1 : 1;
	        }(t, e);

	      case 3 /* TypeOrder.TimestampValue */ :
	        return __PRIVATE_compareTimestamps(t.timestampValue, e.timestampValue);

	      case 4 /* TypeOrder.ServerTimestampValue */ :
	        return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(t), __PRIVATE_getLocalWriteTime(e));

	      case 5 /* TypeOrder.StringValue */ :
	        return __PRIVATE_primitiveComparator(t.stringValue, e.stringValue);

	      case 6 /* TypeOrder.BlobValue */ :
	        return function __PRIVATE_compareBlobs(t, e) {
	            const r = __PRIVATE_normalizeByteString(t), n = __PRIVATE_normalizeByteString(e);
	            return r.compareTo(n);
	        }(t.bytesValue, e.bytesValue);

	      case 7 /* TypeOrder.RefValue */ :
	        return function __PRIVATE_compareReferences(t, e) {
	            const r = t.split("/"), n = e.split("/");
	            for (let t = 0; t < r.length && t < n.length; t++) {
	                const e = __PRIVATE_primitiveComparator(r[t], n[t]);
	                if (0 !== e) return e;
	            }
	            return __PRIVATE_primitiveComparator(r.length, n.length);
	        }(t.referenceValue, e.referenceValue);

	      case 8 /* TypeOrder.GeoPointValue */ :
	        return function __PRIVATE_compareGeoPoints(t, e) {
	            const r = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(e.latitude));
	            if (0 !== r) return r;
	            return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.longitude), __PRIVATE_normalizeNumber(e.longitude));
	        }(t.geoPointValue, e.geoPointValue);

	      case 9 /* TypeOrder.ArrayValue */ :
	        return __PRIVATE_compareArrays(t.arrayValue, e.arrayValue);

	      case 10 /* TypeOrder.VectorValue */ :
	        return function __PRIVATE_compareVectors(t, e) {
	            var r, n, i, s;
	            const o = t.fields || {}, a = e.fields || {}, u = null === (r = o.value) || void 0 === r ? void 0 : r.arrayValue, _ = null === (n = a.value) || void 0 === n ? void 0 : n.arrayValue, c = __PRIVATE_primitiveComparator((null === (i = null == u ? void 0 : u.values) || void 0 === i ? void 0 : i.length) || 0, (null === (s = null == _ ? void 0 : _.values) || void 0 === s ? void 0 : s.length) || 0);
	            if (0 !== c) return c;
	            return __PRIVATE_compareArrays(u, _);
	        }(t.mapValue, e.mapValue);

	      case 11 /* TypeOrder.ObjectValue */ :
	        return function __PRIVATE_compareMaps(t, e) {
	            if (t === Q && e === Q) return 0;
	            if (t === Q) return 1;
	            if (e === Q) return -1;
	            const r = t.fields || {}, n = Object.keys(r), i = e.fields || {}, s = Object.keys(i);
	            // Even though MapValues are likely sorted correctly based on their insertion
	            // order (e.g. when received from the backend), local modifications can bring
	            // elements out of order. We need to re-sort the elements to ensure that
	            // canonical IDs are independent of insertion order.
	            n.sort(), s.sort();
	            for (let t = 0; t < n.length && t < s.length; ++t) {
	                const e = __PRIVATE_primitiveComparator(n[t], s[t]);
	                if (0 !== e) return e;
	                const o = __PRIVATE_valueCompare(r[n[t]], i[s[t]]);
	                if (0 !== o) return o;
	            }
	            return __PRIVATE_primitiveComparator(n.length, s.length);
	        }
	        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);

	      default:
	        throw fail();
	    }
	}

	function __PRIVATE_compareTimestamps(t, e) {
	    if ("string" == typeof t && "string" == typeof e && t.length === e.length) return __PRIVATE_primitiveComparator(t, e);
	    const r = __PRIVATE_normalizeTimestamp(t), n = __PRIVATE_normalizeTimestamp(e), i = __PRIVATE_primitiveComparator(r.seconds, n.seconds);
	    return 0 !== i ? i : __PRIVATE_primitiveComparator(r.nanos, n.nanos);
	}

	function __PRIVATE_compareArrays(t, e) {
	    const r = t.values || [], n = e.values || [];
	    for (let t = 0; t < r.length && t < n.length; ++t) {
	        const e = __PRIVATE_valueCompare(r[t], n[t]);
	        if (e) return e;
	    }
	    return __PRIVATE_primitiveComparator(r.length, n.length);
	}

	function __PRIVATE_refValue(t, e) {
	    return {
	        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`
	    };
	}

	/** Returns true if `value` is an ArrayValue. */ function isArray(t) {
	    return !!t && "arrayValue" in t;
	}

	/** Returns true if `value` is a NullValue. */ function __PRIVATE_isNullValue(t) {
	    return !!t && "nullValue" in t;
	}

	/** Returns true if `value` is NaN. */ function __PRIVATE_isNanValue(t) {
	    return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
	}

	/** Returns true if `value` is a MapValue. */ function __PRIVATE_isMapValue(t) {
	    return !!t && "mapValue" in t;
	}

	function __PRIVATE_deepClone(t) {
	    if (t.geoPointValue) return {
	        geoPointValue: Object.assign({}, t.geoPointValue)
	    };
	    if (t.timestampValue && "object" == typeof t.timestampValue) return {
	        timestampValue: Object.assign({}, t.timestampValue)
	    };
	    if (t.mapValue) {
	        const e = {
	            mapValue: {
	                fields: {}
	            }
	        };
	        return forEach(t.mapValue.fields, ((t, r) => e.mapValue.fields[t] = __PRIVATE_deepClone(r))), 
	        e;
	    }
	    if (t.arrayValue) {
	        const e = {
	            arrayValue: {
	                values: []
	            }
	        };
	        for (let r = 0; r < (t.arrayValue.values || []).length; ++r) e.arrayValue.values[r] = __PRIVATE_deepClone(t.arrayValue.values[r]);
	        return e;
	    }
	    return Object.assign({}, t);
	}

	class Bound {
	    constructor(t, e) {
	        this.position = t, this.inclusive = e;
	    }
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Filter {}

	class FieldFilter extends Filter {
	    constructor(t, e, r) {
	        super(), this.field = t, this.op = e, this.value = r;
	    }
	    /**
	     * Creates a filter based on the provided arguments.
	     */    static create(t, e, r) {
	        return t.isKeyField() ? "in" /* Operator.IN */ === e || "not-in" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, r) : new __PRIVATE_KeyFieldFilter(t, e, r) : "array-contains" /* Operator.ARRAY_CONTAINS */ === e ? new __PRIVATE_ArrayContainsFilter(t, r) : "in" /* Operator.IN */ === e ? new __PRIVATE_InFilter(t, r) : "not-in" /* Operator.NOT_IN */ === e ? new __PRIVATE_NotInFilter(t, r) : "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new __PRIVATE_ArrayContainsAnyFilter(t, r) : new FieldFilter(t, e, r);
	    }
	    static createKeyFieldInFilter(t, e, r) {
	        return "in" /* Operator.IN */ === e ? new __PRIVATE_KeyFieldInFilter(t, r) : new __PRIVATE_KeyFieldNotInFilter(t, r);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        // Types do not have to match in NOT_EQUAL filters.
	                return "!=" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(__PRIVATE_valueCompare(e, this.value)) : null !== e && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(e) && this.matchesComparison(__PRIVATE_valueCompare(e, this.value));
	        // Only compare types with matching backend order (such as double and int).
	        }
	    matchesComparison(t) {
	        switch (this.op) {
	          case "<" /* Operator.LESS_THAN */ :
	            return t < 0;

	          case "<=" /* Operator.LESS_THAN_OR_EQUAL */ :
	            return t <= 0;

	          case "==" /* Operator.EQUAL */ :
	            return 0 === t;

	          case "!=" /* Operator.NOT_EQUAL */ :
	            return 0 !== t;

	          case ">" /* Operator.GREATER_THAN */ :
	            return t > 0;

	          case ">=" /* Operator.GREATER_THAN_OR_EQUAL */ :
	            return t >= 0;

	          default:
	            return fail();
	        }
	    }
	    isInequality() {
	        return [ "<" /* Operator.LESS_THAN */ , "<=" /* Operator.LESS_THAN_OR_EQUAL */ , ">" /* Operator.GREATER_THAN */ , ">=" /* Operator.GREATER_THAN_OR_EQUAL */ , "!=" /* Operator.NOT_EQUAL */ , "not-in" /* Operator.NOT_IN */ ].indexOf(this.op) >= 0;
	    }
	    getFlattenedFilters() {
	        return [ this ];
	    }
	    getFilters() {
	        return [ this ];
	    }
	}

	class CompositeFilter extends Filter {
	    constructor(t, e) {
	        super(), this.filters = t, this.op = e, this.D = null;
	    }
	    /**
	     * Creates a filter based on the provided arguments.
	     */    static create(t, e) {
	        return new CompositeFilter(t, e);
	    }
	    matches(t) {
	        return function __PRIVATE_compositeFilterIsConjunction(t) {
	            return "and" /* CompositeOperator.AND */ === t.op;
	        }(this) ? void 0 === this.filters.find((e => !e.matches(t))) : void 0 !== this.filters.find((e => e.matches(t)));
	    }
	    getFlattenedFilters() {
	        return null !== this.D || (this.D = this.filters.reduce(((t, e) => t.concat(e.getFlattenedFilters())), [])), 
	        this.D;
	    }
	    // Returns a mutable copy of `this.filters`
	    getFilters() {
	        return Object.assign([], this.filters);
	    }
	}

	class __PRIVATE_KeyFieldFilter extends FieldFilter {
	    constructor(t, e, r) {
	        super(t, e, r), this.key = DocumentKey.fromName(r.referenceValue);
	    }
	    matches(t) {
	        const e = DocumentKey.comparator(t.key, this.key);
	        return this.matchesComparison(e);
	    }
	}

	/** Filter that matches on key fields within an array. */ class __PRIVATE_KeyFieldInFilter extends FieldFilter {
	    constructor(t, e) {
	        super(t, "in" /* Operator.IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("in" /* Operator.IN */ , e);
	    }
	    matches(t) {
	        return this.keys.some((e => e.isEqual(t.key)));
	    }
	}

	/** Filter that matches on key fields not present within an array. */ class __PRIVATE_KeyFieldNotInFilter extends FieldFilter {
	    constructor(t, e) {
	        super(t, "not-in" /* Operator.NOT_IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("not-in" /* Operator.NOT_IN */ , e);
	    }
	    matches(t) {
	        return !this.keys.some((e => e.isEqual(t.key)));
	    }
	}

	function __PRIVATE_extractDocumentKeysFromArrayValue(t, e) {
	    var r;
	    return ((null === (r = e.arrayValue) || void 0 === r ? void 0 : r.values) || []).map((t => DocumentKey.fromName(t.referenceValue)));
	}

	/** A Filter that implements the array-contains operator. */ class __PRIVATE_ArrayContainsFilter extends FieldFilter {
	    constructor(t, e) {
	        super(t, "array-contains" /* Operator.ARRAY_CONTAINS */ , e);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        return isArray(e) && __PRIVATE_arrayValueContains(e.arrayValue, this.value);
	    }
	}

	/** A Filter that implements the IN operator. */ class __PRIVATE_InFilter extends FieldFilter {
	    constructor(t, e) {
	        super(t, "in" /* Operator.IN */ , e);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        return null !== e && __PRIVATE_arrayValueContains(this.value.arrayValue, e);
	    }
	}

	/** A Filter that implements the not-in operator. */ class __PRIVATE_NotInFilter extends FieldFilter {
	    constructor(t, e) {
	        super(t, "not-in" /* Operator.NOT_IN */ , e);
	    }
	    matches(t) {
	        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {
	            nullValue: "NULL_VALUE"
	        })) return !1;
	        const e = t.data.field(this.field);
	        return null !== e && !__PRIVATE_arrayValueContains(this.value.arrayValue, e);
	    }
	}

	/** A Filter that implements the array-contains-any operator. */ class __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {
	    constructor(t, e) {
	        super(t, "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ , e);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        return !(!isArray(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => __PRIVATE_arrayValueContains(this.value.arrayValue, t)));
	    }
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
	 */ class OrderBy {
	    constructor(t, e = "asc" /* Direction.ASCENDING */) {
	        this.field = t, this.dir = e;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A version of a document in Firestore. This corresponds to the version
	 * timestamp, such as update_time or read_time.
	 */ class SnapshotVersion {
	    constructor(t) {
	        this.timestamp = t;
	    }
	    static fromTimestamp(t) {
	        return new SnapshotVersion(t);
	    }
	    static min() {
	        return new SnapshotVersion(new Timestamp(0, 0));
	    }
	    static max() {
	        return new SnapshotVersion(new Timestamp(253402300799, 999999999));
	    }
	    compareTo(t) {
	        return this.timestamp._compareTo(t.timestamp);
	    }
	    isEqual(t) {
	        return this.timestamp.isEqual(t.timestamp);
	    }
	    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {
	        // Convert to microseconds.
	        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
	    }
	    toString() {
	        return "SnapshotVersion(" + this.timestamp.toString() + ")";
	    }
	    toTimestamp() {
	        return this.timestamp;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// An immutable sorted map implementation, based on a Left-leaning Red-Black
	// tree.
	class SortedMap {
	    constructor(t, e) {
	        this.comparator = t, this.root = e || LLRBNode.EMPTY;
	    }
	    // Returns a copy of the map, with the specified key/value added or replaced.
	    insert(t, e) {
	        return new SortedMap(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
	    }
	    // Returns a copy of the map, with the specified key removed.
	    remove(t) {
	        return new SortedMap(this.comparator, this.root.remove(t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
	    }
	    // Returns the value of the node with the given key, or null.
	    get(t) {
	        let e = this.root;
	        for (;!e.isEmpty(); ) {
	            const r = this.comparator(t, e.key);
	            if (0 === r) return e.value;
	            r < 0 ? e = e.left : r > 0 && (e = e.right);
	        }
	        return null;
	    }
	    // Returns the index of the element in this sorted map, or -1 if it doesn't
	    // exist.
	    indexOf(t) {
	        // Number of nodes that were pruned when descending right
	        let e = 0, r = this.root;
	        for (;!r.isEmpty(); ) {
	            const n = this.comparator(t, r.key);
	            if (0 === n) return e + r.left.size;
	            n < 0 ? r = r.left : (
	            // Count all nodes left of the node plus the node itself
	            e += r.left.size + 1, r = r.right);
	        }
	        // Node not found
	                return -1;
	    }
	    isEmpty() {
	        return this.root.isEmpty();
	    }
	    // Returns the total number of nodes in the map.
	    get size() {
	        return this.root.size;
	    }
	    // Returns the minimum key in the map.
	    minKey() {
	        return this.root.minKey();
	    }
	    // Returns the maximum key in the map.
	    maxKey() {
	        return this.root.maxKey();
	    }
	    // Traverses the map in key order and calls the specified action function
	    // for each key/value pair. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    inorderTraversal(t) {
	        return this.root.inorderTraversal(t);
	    }
	    forEach(t) {
	        this.inorderTraversal(((e, r) => (t(e, r), !1)));
	    }
	    toString() {
	        const t = [];
	        return this.inorderTraversal(((e, r) => (t.push(`${e}:${r}`), !1))), `{${t.join(", ")}}`;
	    }
	    // Traverses the map in reverse key order and calls the specified action
	    // function for each key/value pair. If action returns true, traversal is
	    // aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    reverseTraversal(t) {
	        return this.root.reverseTraversal(t);
	    }
	    // Returns an iterator over the SortedMap.
	    getIterator() {
	        return new SortedMapIterator(this.root, null, this.comparator, !1);
	    }
	    getIteratorFrom(t) {
	        return new SortedMapIterator(this.root, t, this.comparator, !1);
	    }
	    getReverseIterator() {
	        return new SortedMapIterator(this.root, null, this.comparator, !0);
	    }
	    getReverseIteratorFrom(t) {
	        return new SortedMapIterator(this.root, t, this.comparator, !0);
	    }
	}

	 // end SortedMap
	// An iterator over an LLRBNode.
	class SortedMapIterator {
	    constructor(t, e, r, n) {
	        this.isReverse = n, this.nodeStack = [];
	        let i = 1;
	        for (;!t.isEmpty(); ) if (i = e ? r(t.key, e) : 1, 
	        // flip the comparison if we're going in reverse
	        e && n && (i *= -1), i < 0) 
	        // This node is less than our start key. ignore it
	        t = this.isReverse ? t.left : t.right; else {
	            if (0 === i) {
	                // This node is exactly equal to our start key. Push it on the stack,
	                // but stop iterating;
	                this.nodeStack.push(t);
	                break;
	            }
	            // This node is greater than our start key, add it to the stack and move
	            // to the next one
	            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
	        }
	    }
	    getNext() {
	        let t = this.nodeStack.pop();
	        const e = {
	            key: t.key,
	            value: t.value
	        };
	        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), 
	        t = t.left;
	        return e;
	    }
	    hasNext() {
	        return this.nodeStack.length > 0;
	    }
	    peek() {
	        if (0 === this.nodeStack.length) return null;
	        const t = this.nodeStack[this.nodeStack.length - 1];
	        return {
	            key: t.key,
	            value: t.value
	        };
	    }
	}

	 // end SortedMapIterator
	// Represents a node in a Left-leaning Red-Black tree.
	class LLRBNode {
	    constructor(t, e, r, n, i) {
	        this.key = t, this.value = e, this.color = null != r ? r : LLRBNode.RED, this.left = null != n ? n : LLRBNode.EMPTY, 
	        this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;
	    }
	    // Returns a copy of the current node, optionally replacing pieces of it.
	    copy(t, e, r, n, i) {
	        return new LLRBNode(null != t ? t : this.key, null != e ? e : this.value, null != r ? r : this.color, null != n ? n : this.left, null != i ? i : this.right);
	    }
	    isEmpty() {
	        return !1;
	    }
	    // Traverses the tree in key order and calls the specified action function
	    // for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    inorderTraversal(t) {
	        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
	    }
	    // Traverses the tree in reverse key order and calls the specified action
	    // function for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    reverseTraversal(t) {
	        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
	    }
	    // Returns the minimum node in the tree.
	    min() {
	        return this.left.isEmpty() ? this : this.left.min();
	    }
	    // Returns the maximum key in the tree.
	    minKey() {
	        return this.min().key;
	    }
	    // Returns the maximum key in the tree.
	    maxKey() {
	        return this.right.isEmpty() ? this.key : this.right.maxKey();
	    }
	    // Returns new tree, with the key/value added.
	    insert(t, e, r) {
	        let n = this;
	        const i = r(t, n.key);
	        return n = i < 0 ? n.copy(null, null, null, n.left.insert(t, e, r), null) : 0 === i ? n.copy(null, e, null, null, null) : n.copy(null, null, null, null, n.right.insert(t, e, r)), 
	        n.fixUp();
	    }
	    removeMin() {
	        if (this.left.isEmpty()) return LLRBNode.EMPTY;
	        let t = this;
	        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), 
	        t.fixUp();
	    }
	    // Returns new tree, with the specified item removed.
	    remove(t, e) {
	        let r, n = this;
	        if (e(t, n.key) < 0) n.left.isEmpty() || n.left.isRed() || n.left.left.isRed() || (n = n.moveRedLeft()), 
	        n = n.copy(null, null, null, n.left.remove(t, e), null); else {
	            if (n.left.isRed() && (n = n.rotateRight()), n.right.isEmpty() || n.right.isRed() || n.right.left.isRed() || (n = n.moveRedRight()), 
	            0 === e(t, n.key)) {
	                if (n.right.isEmpty()) return LLRBNode.EMPTY;
	                r = n.right.min(), n = n.copy(r.key, r.value, null, null, n.right.removeMin());
	            }
	            n = n.copy(null, null, null, null, n.right.remove(t, e));
	        }
	        return n.fixUp();
	    }
	    isRed() {
	        return this.color;
	    }
	    // Returns new tree after performing any needed rotations.
	    fixUp() {
	        let t = this;
	        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), 
	        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
	    }
	    moveRedLeft() {
	        let t = this.colorFlip();
	        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), 
	        t = t.rotateLeft(), t = t.colorFlip()), t;
	    }
	    moveRedRight() {
	        let t = this.colorFlip();
	        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
	    }
	    rotateLeft() {
	        const t = this.copy(null, null, LLRBNode.RED, null, this.right.left);
	        return this.right.copy(null, null, this.color, t, null);
	    }
	    rotateRight() {
	        const t = this.copy(null, null, LLRBNode.RED, this.left.right, null);
	        return this.left.copy(null, null, this.color, null, t);
	    }
	    colorFlip() {
	        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
	        return this.copy(null, null, !this.color, t, e);
	    }
	    // For testing.
	    checkMaxDepth() {
	        const t = this.check();
	        return Math.pow(2, t) <= this.size + 1;
	    }
	    // In a balanced RB tree, the black-depth (number of black nodes) from root to
	    // leaves is equal on both sides.  This function verifies that or asserts.
	    check() {
	        if (this.isRed() && this.left.isRed()) throw fail();
	        if (this.right.isRed()) throw fail();
	        const t = this.left.check();
	        if (t !== this.right.check()) throw fail();
	        return t + (this.isRed() ? 0 : 1);
	    }
	}

	 // end LLRBNode
	// Empty node is shared between all LLRB trees.
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	LLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;

	// end LLRBEmptyNode
	LLRBNode.EMPTY = new 
	// Represents an empty node (a leaf node in the Red-Black Tree).
	class LLRBEmptyNode {
	    constructor() {
	        this.size = 0;
	    }
	    get key() {
	        throw fail();
	    }
	    get value() {
	        throw fail();
	    }
	    get color() {
	        throw fail();
	    }
	    get left() {
	        throw fail();
	    }
	    get right() {
	        throw fail();
	    }
	    // Returns a copy of the current node.
	    copy(t, e, r, n, i) {
	        return this;
	    }
	    // Returns a copy of the tree, with the specified key/value added.
	    insert(t, e, r) {
	        return new LLRBNode(t, e);
	    }
	    // Returns a copy of the tree, with the specified key removed.
	    remove(t, e) {
	        return this;
	    }
	    isEmpty() {
	        return !0;
	    }
	    inorderTraversal(t) {
	        return !1;
	    }
	    reverseTraversal(t) {
	        return !1;
	    }
	    minKey() {
	        return null;
	    }
	    maxKey() {
	        return null;
	    }
	    isRed() {
	        return !1;
	    }
	    // For testing.
	    checkMaxDepth() {
	        return !0;
	    }
	    check() {
	        return 0;
	    }
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * SortedSet is an immutable (copy-on-write) collection that holds elements
	 * in order specified by the provided comparator.
	 *
	 * NOTE: if provided comparator returns 0 for two elements, we consider them to
	 * be equal!
	 */
	class SortedSet {
	    constructor(t) {
	        this.comparator = t, this.data = new SortedMap(this.comparator);
	    }
	    has(t) {
	        return null !== this.data.get(t);
	    }
	    first() {
	        return this.data.minKey();
	    }
	    last() {
	        return this.data.maxKey();
	    }
	    get size() {
	        return this.data.size;
	    }
	    indexOf(t) {
	        return this.data.indexOf(t);
	    }
	    /** Iterates elements in order defined by "comparator" */    forEach(t) {
	        this.data.inorderTraversal(((e, r) => (t(e), !1)));
	    }
	    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {
	        const r = this.data.getIteratorFrom(t[0]);
	        for (;r.hasNext(); ) {
	            const n = r.getNext();
	            if (this.comparator(n.key, t[1]) >= 0) return;
	            e(n.key);
	        }
	    }
	    /**
	     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
	     */    forEachWhile(t, e) {
	        let r;
	        for (r = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); r.hasNext(); ) {
	            if (!t(r.getNext().key)) return;
	        }
	    }
	    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {
	        const e = this.data.getIteratorFrom(t);
	        return e.hasNext() ? e.getNext().key : null;
	    }
	    getIterator() {
	        return new SortedSetIterator(this.data.getIterator());
	    }
	    getIteratorFrom(t) {
	        return new SortedSetIterator(this.data.getIteratorFrom(t));
	    }
	    /** Inserts or updates an element */    add(t) {
	        return this.copy(this.data.remove(t).insert(t, !0));
	    }
	    /** Deletes an element */    delete(t) {
	        return this.has(t) ? this.copy(this.data.remove(t)) : this;
	    }
	    isEmpty() {
	        return this.data.isEmpty();
	    }
	    unionWith(t) {
	        let e = this;
	        // Make sure `result` always refers to the larger one of the two sets.
	                return e.size < t.size && (e = t, t = this), t.forEach((t => {
	            e = e.add(t);
	        })), e;
	    }
	    isEqual(t) {
	        if (!(t instanceof SortedSet)) return !1;
	        if (this.size !== t.size) return !1;
	        const e = this.data.getIterator(), r = t.data.getIterator();
	        for (;e.hasNext(); ) {
	            const t = e.getNext().key, n = r.getNext().key;
	            if (0 !== this.comparator(t, n)) return !1;
	        }
	        return !0;
	    }
	    toArray() {
	        const t = [];
	        return this.forEach((e => {
	            t.push(e);
	        })), t;
	    }
	    toString() {
	        const t = [];
	        return this.forEach((e => t.push(e))), "SortedSet(" + t.toString() + ")";
	    }
	    copy(t) {
	        const e = new SortedSet(this.comparator);
	        return e.data = t, e;
	    }
	}

	class SortedSetIterator {
	    constructor(t) {
	        this.iter = t;
	    }
	    getNext() {
	        return this.iter.getNext().key;
	    }
	    hasNext() {
	        return this.iter.hasNext();
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
	 * ability to add and remove fields (via the ObjectValueBuilder).
	 */ class ObjectValue {
	    constructor(t) {
	        this.value = t;
	    }
	    static empty() {
	        return new ObjectValue({
	            mapValue: {}
	        });
	    }
	    /**
	     * Returns the value at the given path or null.
	     *
	     * @param path - the path to search
	     * @returns The value at the path or null if the path is not set.
	     */    field(t) {
	        if (t.isEmpty()) return this.value;
	        {
	            let e = this.value;
	            for (let r = 0; r < t.length - 1; ++r) if (e = (e.mapValue.fields || {})[t.get(r)], 
	            !__PRIVATE_isMapValue(e)) return null;
	            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
	        }
	    }
	    /**
	     * Sets the field to the provided value.
	     *
	     * @param path - The field path to set.
	     * @param value - The value to set.
	     */    set(t, e) {
	        this.getFieldsMap(t.popLast())[t.lastSegment()] = __PRIVATE_deepClone(e);
	    }
	    /**
	     * Sets the provided fields to the provided values.
	     *
	     * @param data - A map of fields to values (or null for deletes).
	     */    setAll(t) {
	        let e = FieldPath$1.emptyPath(), r = {}, n = [];
	        t.forEach(((t, i) => {
	            if (!e.isImmediateParentOf(i)) {
	                // Insert the accumulated changes at this parent location
	                const t = this.getFieldsMap(e);
	                this.applyChanges(t, r, n), r = {}, n = [], e = i.popLast();
	            }
	            t ? r[i.lastSegment()] = __PRIVATE_deepClone(t) : n.push(i.lastSegment());
	        }));
	        const i = this.getFieldsMap(e);
	        this.applyChanges(i, r, n);
	    }
	    /**
	     * Removes the field at the specified path. If there is no field at the
	     * specified path, nothing is changed.
	     *
	     * @param path - The field path to remove.
	     */    delete(t) {
	        const e = this.field(t.popLast());
	        __PRIVATE_isMapValue(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
	    }
	    isEqual(t) {
	        return __PRIVATE_valueEquals(this.value, t.value);
	    }
	    /**
	     * Returns the map that contains the leaf element of `path`. If the parent
	     * entry does not yet exist, or if it is not a map, a new map will be created.
	     */    getFieldsMap(t) {
	        let e = this.value;
	        e.mapValue.fields || (e.mapValue = {
	            fields: {}
	        });
	        for (let r = 0; r < t.length; ++r) {
	            let n = e.mapValue.fields[t.get(r)];
	            __PRIVATE_isMapValue(n) && n.mapValue.fields || (n = {
	                mapValue: {
	                    fields: {}
	                }
	            }, e.mapValue.fields[t.get(r)] = n), e = n;
	        }
	        return e.mapValue.fields;
	    }
	    /**
	     * Modifies `fieldsMap` by adding, replacing or deleting the specified
	     * entries.
	     */    applyChanges(t, e, r) {
	        forEach(e, ((e, r) => t[e] = r));
	        for (const e of r) delete t[e];
	    }
	    clone() {
	        return new ObjectValue(__PRIVATE_deepClone(this.value));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a document in Firestore with a key, version, data and whether it
	 * has local mutations applied to it.
	 *
	 * Documents can transition between states via `convertToFoundDocument()`,
	 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
	 * not transition to one of these states even after all mutations have been
	 * applied, `isValidDocument()` returns false and the document should be removed
	 * from all views.
	 */ class MutableDocument {
	    constructor(t, e, r, n, i, s, o) {
	        this.key = t, this.documentType = e, this.version = r, this.readTime = n, this.createTime = i, 
	        this.data = s, this.documentState = o;
	    }
	    /**
	     * Creates a document with no known version or data, but which can serve as
	     * base document for mutations.
	     */    static newInvalidDocument(t) {
	        return new MutableDocument(t, 0 /* DocumentType.INVALID */ , 
	        /* version */ SnapshotVersion.min(), 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);
	    }
	    /**
	     * Creates a new document that is known to exist with the given data at the
	     * given version.
	     */    static newFoundDocument(t, e, r, n) {
	        return new MutableDocument(t, 1 /* DocumentType.FOUND_DOCUMENT */ , 
	        /* version */ e, 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ r, n, 0 /* DocumentState.SYNCED */);
	    }
	    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {
	        return new MutableDocument(t, 2 /* DocumentType.NO_DOCUMENT */ , 
	        /* version */ e, 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);
	    }
	    /**
	     * Creates a new document that is known to exist at the given version but
	     * whose data is not known (e.g. a document that was updated without a known
	     * base document).
	     */    static newUnknownDocument(t, e) {
	        return new MutableDocument(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */ , 
	        /* version */ e, 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);
	    }
	    /**
	     * Changes the document type to indicate that it exists and that its version
	     * and data are known.
	     */    convertToFoundDocument(t, e) {
	        // If a document is switching state from being an invalid or deleted
	        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an
	        // update from Watch or due to applying a local set mutation on top
	        // of a deleted document, our best guess about its createTime would be the
	        // version at which the document transitioned to a FOUND_DOCUMENT.
	        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), 
	        this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */ , this.data = e, 
	        this.documentState = 0 /* DocumentState.SYNCED */ , this;
	    }
	    /**
	     * Changes the document type to indicate that it doesn't exist at the given
	     * version.
	     */    convertToNoDocument(t) {
	        return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */ , 
	        this.data = ObjectValue.empty(), this.documentState = 0 /* DocumentState.SYNCED */ , 
	        this;
	    }
	    /**
	     * Changes the document type to indicate that it exists at a given version but
	     * that its data is not known (e.g. a document that was updated without a known
	     * base document).
	     */    convertToUnknownDocument(t) {
	        return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */ , 
	        this.data = ObjectValue.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , 
	        this;
	    }
	    setHasCommittedMutations() {
	        return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , this;
	    }
	    setHasLocalMutations() {
	        return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ , this.version = SnapshotVersion.min(), 
	        this;
	    }
	    setReadTime(t) {
	        return this.readTime = t, this;
	    }
	    get hasLocalMutations() {
	        return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;
	    }
	    get hasCommittedMutations() {
	        return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;
	    }
	    get hasPendingWrites() {
	        return this.hasLocalMutations || this.hasCommittedMutations;
	    }
	    isValidDocument() {
	        return 0 /* DocumentType.INVALID */ !== this.documentType;
	    }
	    isFoundDocument() {
	        return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;
	    }
	    isNoDocument() {
	        return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;
	    }
	    isUnknownDocument() {
	        return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;
	    }
	    isEqual(t) {
	        return t instanceof MutableDocument && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
	    }
	    mutableCopy() {
	        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
	    }
	    toString() {
	        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Visible for testing
	class __PRIVATE_TargetImpl {
	    constructor(t, e = null, r = [], n = [], i = null, s = null, o = null) {
	        this.path = t, this.collectionGroup = e, this.orderBy = r, this.filters = n, this.limit = i, 
	        this.startAt = s, this.endAt = o, this.C = null;
	    }
	}

	/**
	 * Initializes a Target with a path and optional additional query constraints.
	 * Path must currently be empty if this is a collection group query.
	 *
	 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
	 * using this factory method, because `Query` provides an implicit `orderBy`
	 * property.
	 */ function __PRIVATE_newTarget(t, e = null, r = [], n = [], i = null, s = null, o = null) {
	    return new __PRIVATE_TargetImpl(t, e, r, n, i, s, o);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Query encapsulates all the query attributes we support in the SDK. It can
	 * be run against the LocalStore, as well as be converted to a `Target` to
	 * query the RemoteStore results.
	 *
	 * Visible for testing.
	 */
	class __PRIVATE_QueryImpl {
	    /**
	     * Initializes a Query with a path and optional additional query constraints.
	     * Path must currently be empty if this is a collection group query.
	     */
	    constructor(t, e = null, r = [], n = [], i = null, s = "F" /* LimitType.First */ , o = null, a = null) {
	        this.path = t, this.collectionGroup = e, this.explicitOrderBy = r, this.filters = n, 
	        this.limit = i, this.limitType = s, this.startAt = o, this.endAt = a, this.S = null, 
	        // The corresponding `Target` of this `Query` instance, for use with
	        // non-aggregate queries.
	        this.N = null, 
	        // The corresponding `Target` of this `Query` instance, for use with
	        // aggregate queries. Unlike targets for non-aggregate queries,
	        // aggregate query targets do not contain normalized order-bys, they only
	        // contain explicit order-bys.
	        this.O = null, this.startAt, this.endAt;
	    }
	}

	/** Creates a new Query for a query that matches all documents at `path` */
	/**
	 * Returns whether the query matches a collection group rather than a specific
	 * collection.
	 */
	function __PRIVATE_isCollectionGroupQuery(t) {
	    return null !== t.collectionGroup;
	}

	/**
	 * Returns the normalized order-by constraint that is used to execute the Query,
	 * which can be different from the order-by constraints the user provided (e.g.
	 * the SDK and backend always orders by `__name__`). The normalized order-by
	 * includes implicit order-bys in addition to the explicit user provided
	 * order-bys.
	 */ function __PRIVATE_queryNormalizedOrderBy(t) {
	    const e = __PRIVATE_debugCast(t);
	    if (null === e.S) {
	        e.S = [];
	        const t = new Set;
	        // Any explicit order by fields should be added as is.
	                for (const r of e.explicitOrderBy) e.S.push(r), t.add(r.field.canonicalString());
	        // The order of the implicit ordering always matches the last explicit order by.
	                const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* Direction.ASCENDING */ , n = 
	        // Returns the sorted set of inequality filter fields used in this query.
	        function __PRIVATE_getInequalityFilterFields(t) {
	            let e = new SortedSet(FieldPath$1.comparator);
	            return t.filters.forEach((t => {
	                t.getFlattenedFilters().forEach((t => {
	                    t.isInequality() && (e = e.add(t.field));
	                }));
	            })), e;
	        }
	        /**
	 * Creates a new Query for a collection group query that matches all documents
	 * within the provided collection group.
	 */ (e);
	        // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical
	        // order. When there are multiple inequality filters on the same field, the field should be added
	        // only once.
	        // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key
	        // field to be sorted last.
	                n.forEach((n => {
	            t.has(n.canonicalString()) || n.isKeyField() || e.S.push(new OrderBy(n, r));
	        })), 
	        // Add the document key field to the last if it is not explicitly ordered.
	        t.has(FieldPath$1.keyField().canonicalString()) || e.S.push(new OrderBy(FieldPath$1.keyField(), r));
	    }
	    return e.S;
	}

	/**
	 * Converts this `Query` instance to its corresponding `Target` representation.
	 */ function __PRIVATE_queryToTarget(t) {
	    const e = __PRIVATE_debugCast(t);
	    return e.N || (e.N = __PRIVATE__queryToTarget(e, __PRIVATE_queryNormalizedOrderBy(t))), 
	    e.N;
	}

	/**
	 * Converts this `Query` instance to its corresponding `Target` representation,
	 * for use within an aggregate query. Unlike targets for non-aggregate queries,
	 * aggregate query targets do not contain normalized order-bys, they only
	 * contain explicit order-bys.
	 */ function __PRIVATE__queryToTarget(t, e) {
	    if ("F" /* LimitType.First */ === t.limitType) return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);
	    {
	        // Flip the orderBy directions since we want the last results
	        e = e.map((t => {
	            const e = "desc" /* Direction.DESCENDING */ === t.dir ? "asc" /* Direction.ASCENDING */ : "desc" /* Direction.DESCENDING */;
	            return new OrderBy(t.field, e);
	        }));
	        // We need to swap the cursors to match the now-flipped query ordering.
	        const r = t.endAt ? new Bound(t.endAt.position, t.endAt.inclusive) : null, n = t.startAt ? new Bound(t.startAt.position, t.startAt.inclusive) : null;
	        // Now return as a LimitType.First query.
	        return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, r, n);
	    }
	}

	function __PRIVATE_queryWithAddedFilter(t, e) {
	    const r = t.filters.concat([ e ]);
	    return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), r, t.limit, t.limitType, t.startAt, t.endAt);
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns an DoubleValue for `value` that is encoded based the serializer's
	 * `useProto3Json` setting.
	 */ function __PRIVATE_toDouble(t, e) {
	    if (t.useProto3Json) {
	        if (isNaN(e)) return {
	            doubleValue: "NaN"
	        };
	        if (e === 1 / 0) return {
	            doubleValue: "Infinity"
	        };
	        if (e === -1 / 0) return {
	            doubleValue: "-Infinity"
	        };
	    }
	    return {
	        doubleValue: __PRIVATE_isNegativeZero(e) ? "-0" : e
	    };
	}

	/**
	 * Returns an IntegerValue for `value`.
	 */
	/**
	 * Returns a value for a number that's appropriate to put into a proto.
	 * The return value is an IntegerValue if it can safely represent the value,
	 * otherwise a DoubleValue is returned.
	 */
	function toNumber(t, e) {
	    return function isSafeInteger(t) {
	        return "number" == typeof t && Number.isInteger(t) && !__PRIVATE_isNegativeZero(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
	    }(e) ? function __PRIVATE_toInteger(t) {
	        return {
	            integerValue: "" + t
	        };
	    }(e) : __PRIVATE_toDouble(t, e);
	}

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Used to represent a field transform on a mutation. */ class TransformOperation {
	    constructor() {
	        // Make sure that the structural type of `TransformOperation` is unique.
	        // See https://github.com/microsoft/TypeScript/issues/5451
	        this._ = void 0;
	    }
	}

	/** Transforms a value into a server-generated timestamp. */ class __PRIVATE_ServerTimestampTransform extends TransformOperation {}

	/** Transforms an array value via a union operation. */ class __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {
	    constructor(t) {
	        super(), this.elements = t;
	    }
	}

	/** Transforms an array value via a remove operation. */ class __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {
	    constructor(t) {
	        super(), this.elements = t;
	    }
	}

	/**
	 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
	 * transforms. Converts all field values to integers or doubles, but unlike the
	 * backend does not cap integer values at 2^63. Instead, JavaScript number
	 * arithmetic is used and precision loss can occur for values greater than 2^53.
	 */ class __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {
	    constructor(t, e) {
	        super(), this.serializer = t, this.q = e;
	    }
	}

	/**
	 * Encodes a precondition for a mutation. This follows the model that the
	 * backend accepts with the special case of an explicit "empty" precondition
	 * (meaning no precondition).
	 */ class Precondition {
	    constructor(t, e) {
	        this.updateTime = t, this.exists = e;
	    }
	    /** Creates a new empty Precondition. */    static none() {
	        return new Precondition;
	    }
	    /** Creates a new Precondition with an exists flag. */    static exists(t) {
	        return new Precondition(void 0, t);
	    }
	    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
	        return new Precondition(t);
	    }
	    /** Returns whether this Precondition is empty. */    get isNone() {
	        return void 0 === this.updateTime && void 0 === this.exists;
	    }
	    isEqual(t) {
	        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
	    }
	}

	/**
	 * A mutation describes a self-contained change to a document. Mutations can
	 * create, replace, delete, and update subsets of documents.
	 *
	 * Mutations not only act on the value of the document but also its version.
	 *
	 * For local mutations (mutations that haven't been committed yet), we preserve
	 * the existing version for Set and Patch mutations. For Delete mutations, we
	 * reset the version to 0.
	 *
	 * Here's the expected transition table.
	 *
	 * MUTATION           APPLIED TO            RESULTS IN
	 *
	 * SetMutation        Document(v3)          Document(v3)
	 * SetMutation        NoDocument(v3)        Document(v0)
	 * SetMutation        InvalidDocument(v0)   Document(v0)
	 * PatchMutation      Document(v3)          Document(v3)
	 * PatchMutation      NoDocument(v3)        NoDocument(v3)
	 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
	 * DeleteMutation     Document(v3)          NoDocument(v0)
	 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
	 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
	 *
	 * For acknowledged mutations, we use the updateTime of the WriteResponse as
	 * the resulting version for Set and Patch mutations. As deletes have no
	 * explicit update time, we use the commitTime of the WriteResponse for
	 * Delete mutations.
	 *
	 * If a mutation is acknowledged by the backend but fails the precondition check
	 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
	 * the updated version.
	 *
	 * Field transforms are used only with Patch and Set Mutations. We use the
	 * `updateTransforms` message to store transforms, rather than the `transforms`s
	 * messages.
	 *
	 * ## Subclassing Notes
	 *
	 * Every type of mutation needs to implement its own applyToRemoteDocument() and
	 * applyToLocalView() to implement the actual behavior of applying the mutation
	 * to some source document (see `setMutationApplyToRemoteDocument()` for an
	 * example).
	 */ class Mutation {}

	/**
	 * A mutation that creates or replaces the document at the given key with the
	 * object value contents.
	 */ class __PRIVATE_SetMutation extends Mutation {
	    constructor(t, e, r, n = []) {
	        super(), this.key = t, this.value = e, this.precondition = r, this.fieldTransforms = n, 
	        this.type = 0 /* MutationType.Set */;
	    }
	    getFieldMask() {
	        return null;
	    }
	}

	/**
	 * A mutation that modifies fields of the document at the given key with the
	 * given values. The values are applied through a field mask:
	 *
	 *  * When a field is in both the mask and the values, the corresponding field
	 *    is updated.
	 *  * When a field is in neither the mask nor the values, the corresponding
	 *    field is unmodified.
	 *  * When a field is in the mask but not in the values, the corresponding field
	 *    is deleted.
	 *  * When a field is not in the mask but is in the values, the values map is
	 *    ignored.
	 */ class __PRIVATE_PatchMutation extends Mutation {
	    constructor(t, e, r, n, i = []) {
	        super(), this.key = t, this.data = e, this.fieldMask = r, this.precondition = n, 
	        this.fieldTransforms = i, this.type = 1 /* MutationType.Patch */;
	    }
	    getFieldMask() {
	        return this.fieldMask;
	    }
	}

	/** A mutation that deletes the document at the given key. */ class __PRIVATE_DeleteMutation extends Mutation {
	    constructor(t, e) {
	        super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */ , 
	        this.fieldTransforms = [];
	    }
	    getFieldMask() {
	        return null;
	    }
	}

	/**
	 * A mutation that verifies the existence of the document at the given key with
	 * the provided precondition.
	 *
	 * The `verify` operation is only used in Transactions, and this class serves
	 * primarily to facilitate serialization into protos.
	 */ class __PRIVATE_VerifyMutation extends Mutation {
	    constructor(t, e) {
	        super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */ , 
	        this.fieldTransforms = [];
	    }
	    getFieldMask() {
	        return null;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const L = (() => {
	    const t = {
	        asc: "ASCENDING",
	        desc: "DESCENDING"
	    };
	    return t;
	})(), M = (() => {
	    const t = {
	        "<": "LESS_THAN",
	        "<=": "LESS_THAN_OR_EQUAL",
	        ">": "GREATER_THAN",
	        ">=": "GREATER_THAN_OR_EQUAL",
	        "==": "EQUAL",
	        "!=": "NOT_EQUAL",
	        "array-contains": "ARRAY_CONTAINS",
	        in: "IN",
	        "not-in": "NOT_IN",
	        "array-contains-any": "ARRAY_CONTAINS_ANY"
	    };
	    return t;
	})(), x = (() => {
	    const t = {
	        and: "AND",
	        or: "OR"
	    };
	    return t;
	})();

	/**
	 * This class generates JsonObject values for the Datastore API suitable for
	 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
	 *
	 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
	 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
	 * format.
	 *
	 * For a description of the Proto3 JSON format check
	 * https://developers.google.com/protocol-buffers/docs/proto3#json
	 *
	 * TODO(klimt): We can remove the databaseId argument if we keep the full
	 * resource name in documents.
	 */
	class JsonProtoSerializer {
	    constructor(t, e) {
	        this.databaseId = t, this.useProto3Json = e;
	    }
	}

	/**
	 * Returns a value for a number (or null) that's appropriate to put into
	 * a google.protobuf.Int32Value proto.
	 * DO NOT USE THIS FOR ANYTHING ELSE.
	 * This method cheats. It's typed as returning "number" because that's what
	 * our generated proto interfaces say Int32Value must be. But GRPC actually
	 * expects a { value: <number> } struct.
	 */
	/**
	 * Returns a value for a Date that's appropriate to put into a proto.
	 */
	function toTimestamp(t, e) {
	    if (t.useProto3Json) {
	        return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
	    }
	    return {
	        seconds: "" + e.seconds,
	        nanos: e.nanoseconds
	    };
	}

	/**
	 * Returns a value for bytes that's appropriate to put in a proto.
	 *
	 * Visible for testing.
	 */
	function __PRIVATE_toBytes(t, e) {
	    return t.useProto3Json ? e.toBase64() : e.toUint8Array();
	}

	function __PRIVATE_toVersion(t, e) {
	    return toTimestamp(t, e.toTimestamp());
	}

	function __PRIVATE_fromVersion(t) {
	    return __PRIVATE_hardAssert(!!t), SnapshotVersion.fromTimestamp(function fromTimestamp(t) {
	        const e = __PRIVATE_normalizeTimestamp(t);
	        return new Timestamp(e.seconds, e.nanos);
	    }(t));
	}

	function __PRIVATE_toResourceName(t, e) {
	    return __PRIVATE_toResourcePath(t, e).canonicalString();
	}

	function __PRIVATE_toResourcePath(t, e) {
	    const r = function __PRIVATE_fullyQualifiedPrefixPath(t) {
	        return new ResourcePath([ "projects", t.projectId, "databases", t.database ]);
	    }(t).child("documents");
	    return void 0 === e ? r : r.child(e);
	}

	function __PRIVATE_toName(t, e) {
	    return __PRIVATE_toResourceName(t.databaseId, e.path);
	}

	function fromName(t, e) {
	    const r = function __PRIVATE_fromResourceName(t) {
	        const e = ResourcePath.fromString(t);
	        return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(e)), e;
	    }(e);
	    if (r.get(1) !== t.databaseId.projectId) throw new FirestoreError(T, "Tried to deserialize key from different project: " + r.get(1) + " vs " + t.databaseId.projectId);
	    if (r.get(3) !== t.databaseId.database) throw new FirestoreError(T, "Tried to deserialize key from different database: " + r.get(3) + " vs " + t.databaseId.database);
	    return new DocumentKey(function __PRIVATE_extractLocalPathFromResourceName(t) {
	        return __PRIVATE_hardAssert(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
	    }
	    /** Creates a Document proto from key and fields (but no create/update time) */ (r));
	}

	function __PRIVATE_toMutationDocument(t, e, r) {
	    return {
	        name: __PRIVATE_toName(t, e),
	        fields: r.value.mapValue.fields
	    };
	}

	function toMutation(t, e) {
	    let r;
	    if (e instanceof __PRIVATE_SetMutation) r = {
	        update: __PRIVATE_toMutationDocument(t, e.key, e.value)
	    }; else if (e instanceof __PRIVATE_DeleteMutation) r = {
	        delete: __PRIVATE_toName(t, e.key)
	    }; else if (e instanceof __PRIVATE_PatchMutation) r = {
	        update: __PRIVATE_toMutationDocument(t, e.key, e.data),
	        updateMask: __PRIVATE_toDocumentMask(e.fieldMask)
	    }; else {
	        if (!(e instanceof __PRIVATE_VerifyMutation)) return fail();
	        r = {
	            verify: __PRIVATE_toName(t, e.key)
	        };
	    }
	    return e.fieldTransforms.length > 0 && (r.updateTransforms = e.fieldTransforms.map((t => function __PRIVATE_toFieldTransform(t, e) {
	        const r = e.transform;
	        if (r instanceof __PRIVATE_ServerTimestampTransform) return {
	            fieldPath: e.field.canonicalString(),
	            setToServerValue: "REQUEST_TIME"
	        };
	        if (r instanceof __PRIVATE_ArrayUnionTransformOperation) return {
	            fieldPath: e.field.canonicalString(),
	            appendMissingElements: {
	                values: r.elements
	            }
	        };
	        if (r instanceof __PRIVATE_ArrayRemoveTransformOperation) return {
	            fieldPath: e.field.canonicalString(),
	            removeAllFromArray: {
	                values: r.elements
	            }
	        };
	        if (r instanceof __PRIVATE_NumericIncrementTransformOperation) return {
	            fieldPath: e.field.canonicalString(),
	            increment: r.q
	        };
	        throw fail();
	    }(0, t)))), e.precondition.isNone || (r.currentDocument = function __PRIVATE_toPrecondition(t, e) {
	        return void 0 !== e.updateTime ? {
	            updateTime: __PRIVATE_toVersion(t, e.updateTime)
	        } : void 0 !== e.exists ? {
	            exists: e.exists
	        } : fail();
	    }(t, e.precondition)), r;
	}

	function __PRIVATE_toQueryTarget(t, e) {
	    // Dissect the path into parent, collectionId, and optional key filter.
	    const r = {
	        structuredQuery: {}
	    }, n = e.path;
	    let i;
	    null !== e.collectionGroup ? (i = n, r.structuredQuery.from = [ {
	        collectionId: e.collectionGroup,
	        allDescendants: !0
	    } ]) : (i = n.popLast(), r.structuredQuery.from = [ {
	        collectionId: n.lastSegment()
	    } ]), r.parent = function __PRIVATE_toQueryPath(t, e) {
	        return __PRIVATE_toResourceName(t.databaseId, e);
	    }(t, i);
	    const s = function __PRIVATE_toFilters(t) {
	        if (0 === t.length) return;
	        return __PRIVATE_toFilter(CompositeFilter.create(t, "and" /* CompositeOperator.AND */));
	    }(e.filters);
	    s && (r.structuredQuery.where = s);
	    const o = function __PRIVATE_toOrder(t) {
	        if (0 === t.length) return;
	        return t.map((t => 
	        // visible for testing
	        function __PRIVATE_toPropertyOrder(t) {
	            return {
	                field: __PRIVATE_toFieldPathReference(t.field),
	                direction: __PRIVATE_toDirection(t.dir)
	            };
	        }
	        // visible for testing
	        (t)));
	    }(e.orderBy);
	    o && (r.structuredQuery.orderBy = o);
	    const a = function __PRIVATE_toInt32Proto(t, e) {
	        return t.useProto3Json || __PRIVATE_isNullOrUndefined(e) ? e : {
	            value: e
	        };
	    }(t, e.limit);
	    return null !== a && (r.structuredQuery.limit = a), e.startAt && (r.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(t) {
	        return {
	            before: t.inclusive,
	            values: t.position
	        };
	    }(e.startAt)), e.endAt && (r.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(t) {
	        return {
	            before: !t.inclusive,
	            values: t.position
	        };
	    }
	    // visible for testing
	    (e.endAt)), {
	        B: r,
	        parent: i
	    };
	}

	function __PRIVATE_toDirection(t) {
	    return L[t];
	}

	// visible for testing
	function __PRIVATE_toOperatorName(t) {
	    return M[t];
	}

	function __PRIVATE_toCompositeOperatorName(t) {
	    return x[t];
	}

	function __PRIVATE_toFieldPathReference(t) {
	    return {
	        fieldPath: t.canonicalString()
	    };
	}

	function __PRIVATE_toFilter(t) {
	    return t instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(t) {
	        if ("==" /* Operator.EQUAL */ === t.op) {
	            if (__PRIVATE_isNanValue(t.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(t.field),
	                    op: "IS_NAN"
	                }
	            };
	            if (__PRIVATE_isNullValue(t.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(t.field),
	                    op: "IS_NULL"
	                }
	            };
	        } else if ("!=" /* Operator.NOT_EQUAL */ === t.op) {
	            if (__PRIVATE_isNanValue(t.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(t.field),
	                    op: "IS_NOT_NAN"
	                }
	            };
	            if (__PRIVATE_isNullValue(t.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(t.field),
	                    op: "IS_NOT_NULL"
	                }
	            };
	        }
	        return {
	            fieldFilter: {
	                field: __PRIVATE_toFieldPathReference(t.field),
	                op: __PRIVATE_toOperatorName(t.op),
	                value: t.value
	            }
	        };
	    }(t) : t instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(t) {
	        const e = t.getFilters().map((t => __PRIVATE_toFilter(t)));
	        if (1 === e.length) return e[0];
	        return {
	            compositeFilter: {
	                op: __PRIVATE_toCompositeOperatorName(t.op),
	                filters: e
	            }
	        };
	    }(t) : fail();
	}

	function __PRIVATE_toDocumentMask(t) {
	    const e = [];
	    return t.fields.forEach((t => e.push(t.canonicalString()))), {
	        fieldPaths: e
	    };
	}

	function __PRIVATE_isValidResourceName(t) {
	    // Resource names have at least 4 components (project ID, database ID)
	    return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function __PRIVATE_newSerializer(t) {
	    return new JsonProtoSerializer(t, /* useProto3Json= */ !0);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Datastore and its related methods are a wrapper around the external Google
	 * Cloud Datastore grpc API, which provides an interface that is more convenient
	 * for the rest of the client SDK architecture to consume.
	 */
	/**
	 * An implementation of Datastore that exposes additional state for internal
	 * consumption.
	 */
	class __PRIVATE_DatastoreImpl extends class Datastore {} {
	    constructor(t, e, r, n) {
	        super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = r, 
	        this.serializer = n, this.Y = !1;
	    }
	    Z() {
	        if (this.Y) throw new FirestoreError(w, "The client has already been terminated.");
	    }
	    /** Invokes the provided RPC with auth and AppCheck tokens. */    P(t, e, r, n) {
	        return this.Z(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([i, s]) => this.connection.P(t, __PRIVATE_toResourcePath(e, r), n, i, s))).catch((t => {
	            throw "FirebaseError" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), 
	            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());
	        }));
	    }
	    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    g(t, e, r, n, i) {
	        return this.Z(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, o]) => this.connection.g(t, __PRIVATE_toResourcePath(e, r), n, s, o, i))).catch((t => {
	            throw "FirebaseError" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), 
	            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());
	        }));
	    }
	    terminate() {
	        this.Y = !0, this.connection.terminate();
	    }
	}

	// TODO(firestorexp): Make sure there is only one Datastore instance per
	// firestore-exp client.
	async function __PRIVATE_invokeCommitRpc(t, e) {
	    const r = __PRIVATE_debugCast(t), n = {
	        writes: e.map((t => toMutation(r.serializer, t)))
	    };
	    await r.P("Commit", r.serializer.databaseId, ResourcePath.emptyPath(), n);
	}

	async function __PRIVATE_invokeRunQueryRpc(t, e) {
	    const r = __PRIVATE_debugCast(t), {B: n, parent: i} = __PRIVATE_toQueryTarget(r.serializer, __PRIVATE_queryToTarget(e));
	    return (await r.g("RunQuery", r.serializer.databaseId, i, {
	        structuredQuery: n.structuredQuery
	    })).filter((t => !!t.document)).map((t => function __PRIVATE_fromDocument(t, e, r) {
	        const n = fromName(t, e.name), i = __PRIVATE_fromVersion(e.updateTime), s = e.createTime ? __PRIVATE_fromVersion(e.createTime) : SnapshotVersion.min(), o = new ObjectValue({
	            mapValue: {
	                fields: e.fields
	            }
	        }), a = MutableDocument.newFoundDocument(n, i, s, o);
	        return r && a.setHasCommittedMutations(), r ? a.setHasCommittedMutations() : a;
	    }(r.serializer, t.document, void 0)));
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const k = new Map;

	/**
	 * An instance map that ensures only one Datastore exists per Firestore
	 * instance.
	 */
	/**
	 * Returns an initialized and started Datastore for the given Firestore
	 * instance. Callers must invoke removeComponents() when the Firestore
	 * instance is terminated.
	 */
	function __PRIVATE_getDatastore(t) {
	    if (t._terminated) throw new FirestoreError(w, "The client has already been terminated.");
	    if (!k.has(t)) {
	        __PRIVATE_logDebug("ComponentProvider", "Initializing Datastore");
	        const e = function __PRIVATE_newConnection(t) {
	            return new __PRIVATE_FetchConnection(t, fetch.bind(null));
	        }(function __PRIVATE_makeDatabaseInfo(t, e, r, n) {
	            return new DatabaseInfo(t, e, r, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(n.experimentalLongPollingOptions), n.useFetchStreams);
	        }
	        /**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (t._databaseId, t.app.options.appId || "", t._persistenceKey, t._freezeSettings())), r = __PRIVATE_newSerializer(t._databaseId), n = function __PRIVATE_newDatastore(t, e, r, n) {
	            return new __PRIVATE_DatastoreImpl(t, e, r, n);
	        }(t._authCredentials, t._appCheckCredentials, e, r);
	        k.set(t, n);
	    }
	    return k.get(t);
	}

	/**
	 * Removes all components associated with the provided instance. Must be called
	 * when the `Firestore` instance is terminated.
	 */
	/**
	 * A concrete type describing all the values that can be applied via a
	 * user-supplied `FirestoreSettings` object. This is a separate type so that
	 * defaults can be supplied and the value can be checked for equality.
	 */
	class FirestoreSettingsImpl {
	    constructor(t) {
	        var e, r;
	        if (void 0 === t.host) {
	            if (void 0 !== t.ssl) throw new FirestoreError(T, "Can't provide ssl option if host option is not set");
	            this.host = "firestore.googleapis.com", this.ssl = true;
	        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
	        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
	        this.localCache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
	            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new FirestoreError(T, "cacheSizeBytes must be at least 1048576");
	            this.cacheSizeBytes = t.cacheSizeBytes;
	        }
	        !function __PRIVATE_validateIsNotUsedTogether(t, e, r, n) {
	            if (!0 === e && !0 === n) throw new FirestoreError(T, `${t} and ${r} cannot be used together.`);
	        }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling), 
	        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : 
	        // For backwards compatibility, coerce the value to boolean even though
	        // the TypeScript compiler has narrowed the type to boolean already.
	        // noinspection PointlessBooleanExpressionJS
	        this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
	        this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (r = t.experimentalLongPollingOptions) && void 0 !== r ? r : {}), 
	        function __PRIVATE_validateLongPollingOptions(t) {
	            if (void 0 !== t.timeoutSeconds) {
	                if (isNaN(t.timeoutSeconds)) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);
	                if (t.timeoutSeconds < 5) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);
	                if (t.timeoutSeconds > 30) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);
	            }
	        }
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	        /**
	 * The Cloud Firestore service interface.
	 *
	 * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.
	 */ (this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;
	    }
	    isEqual(t) {
	        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(t, e) {
	            return t.timeoutSeconds === e.timeoutSeconds;
	        }(this.experimentalLongPollingOptions, t.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
	    }
	}

	class Firestore {
	    /** @hideconstructor */
	    constructor(t, e, r, n) {
	        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = r, 
	        this._app = n, 
	        /**
	         * Whether it's a Firestore or Firestore Lite instance.
	         */
	        this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new FirestoreSettingsImpl({}), 
	        this._settingsFrozen = !1;
	    }
	    /**
	     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
	     * instance.
	     */    get app() {
	        if (!this._app) throw new FirestoreError(w, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
	        return this._app;
	    }
	    get _initialized() {
	        return this._settingsFrozen;
	    }
	    get _terminated() {
	        return void 0 !== this._terminateTask;
	    }
	    _setSettings(t) {
	        if (this._settingsFrozen) throw new FirestoreError(w, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
	        this._settings = new FirestoreSettingsImpl(t), void 0 !== t.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(t) {
	            if (!t) return new __PRIVATE_EmptyAuthCredentialsProvider;
	            switch (t.type) {
	              case "firstParty":
	                return new __PRIVATE_FirstPartyAuthCredentialsProvider(t.sessionIndex || "0", t.iamToken || null, t.authTokenFactory || null);

	              case "provider":
	                return t.client;

	              default:
	                throw new FirestoreError(T, "makeAuthCredentialsProvider failed due to invalid credential type");
	            }
	        }(t.credentials));
	    }
	    _getSettings() {
	        return this._settings;
	    }
	    _freezeSettings() {
	        return this._settingsFrozen = !0, this._settings;
	    }
	    _delete() {
	        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
	    }
	    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {
	        return {
	            app: this._app,
	            databaseId: this._databaseId,
	            settings: this._settings
	        };
	    }
	    /**
	     * Terminates all components used by this client. Subclasses can override
	     * this method to clean up their own dependencies, but must also call this
	     * method.
	     *
	     * Only ever called once.
	     */    _terminate() {
	        return function __PRIVATE_removeComponents(t) {
	            const e = k.get(t);
	            e && (__PRIVATE_logDebug("ComponentProvider", "Removing Datastore"), k.delete(t), 
	            e.terminate());
	        }(this), Promise.resolve();
	    }
	}

	function getFirestore(e, r) {
	    const n = "object" == typeof e ? e : getApp(), i = "string" == typeof e ? e : "(default)", s = _getProvider(n, "firestore/lite").getImmediate({
	        identifier: i
	    });
	    if (!s._initialized) {
	        const t = getDefaultEmulatorHostnameAndPort("firestore");
	        t && connectFirestoreEmulator(s, ...t);
	    }
	    return s;
	}

	/**
	 * Modify this instance to communicate with the Cloud Firestore emulator.
	 *
	 * Note: This must be called before this instance has been used to do any
	 * operations.
	 *
	 * @param firestore - The `Firestore` instance to configure to connect to the
	 * emulator.
	 * @param host - the emulator host (ex: localhost).
	 * @param port - the emulator port (ex: 9000).
	 * @param options.mockUserToken - the mock auth token to use for unit testing
	 * Security Rules.
	 */ function connectFirestoreEmulator(t, e, r, n = {}) {
	    var i;
	    const s = (t = __PRIVATE_cast(t, Firestore))._getSettings(), o = `${e}:${r}`;
	    if ("firestore.googleapis.com" !== s.host && s.host !== o && __PRIVATE_logWarn("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), 
	    t._setSettings(Object.assign(Object.assign({}, s), {
	        host: o,
	        ssl: !1
	    })), n.mockUserToken) {
	        let e, r;
	        if ("string" == typeof n.mockUserToken) e = n.mockUserToken, r = User.MOCK_USER; else {
	            // Let createMockUserToken validate first (catches common mistakes like
	            // invalid field "uid" and missing field "sub" / "user_id".)
	            e = createMockUserToken(n.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);
	            const s = n.mockUserToken.sub || n.mockUserToken.user_id;
	            if (!s) throw new FirestoreError(T, "mockUserToken must contain 'sub' or 'user_id' field!");
	            r = new User(s);
	        }
	        t._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(e, r));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `Query` refers to a query which you can read or listen to. You can also
	 * construct refined `Query` objects by adding filters and ordering.
	 */ class Query {
	    // This is the lite version of the Query class in the main SDK.
	    /** @hideconstructor protected */
	    constructor(t, 
	    /**
	     * If provided, the `FirestoreDataConverter` associated with this instance.
	     */
	    e, r) {
	        this.converter = e, this._query = r, 
	        /** The type of this Firestore reference. */
	        this.type = "query", this.firestore = t;
	    }
	    withConverter(t) {
	        return new Query(this.firestore, t, this._query);
	    }
	}

	/**
	 * A `DocumentReference` refers to a document location in a Firestore database
	 * and can be used to write, read, or listen to the location. The document at
	 * the referenced location may or may not exist.
	 */ class DocumentReference {
	    /** @hideconstructor */
	    constructor(t, 
	    /**
	     * If provided, the `FirestoreDataConverter` associated with this instance.
	     */
	    e, r) {
	        this.converter = e, this._key = r, 
	        /** The type of this Firestore reference. */
	        this.type = "document", this.firestore = t;
	    }
	    get _path() {
	        return this._key.path;
	    }
	    /**
	     * The document's identifier within its collection.
	     */    get id() {
	        return this._key.path.lastSegment();
	    }
	    /**
	     * A string representing the path of the referenced document (relative
	     * to the root of the database).
	     */    get path() {
	        return this._key.path.canonicalString();
	    }
	    /**
	     * The collection this `DocumentReference` belongs to.
	     */    get parent() {
	        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());
	    }
	    withConverter(t) {
	        return new DocumentReference(this.firestore, t, this._key);
	    }
	}

	/**
	 * A `CollectionReference` object can be used for adding documents, getting
	 * document references, and querying for documents (using {@link (query:1)}).
	 */ class CollectionReference extends Query {
	    /** @hideconstructor */
	    constructor(t, e, r) {
	        super(t, e, function __PRIVATE_newQueryForPath(t) {
	            return new __PRIVATE_QueryImpl(t);
	        }(r)), this._path = r, 
	        /** The type of this Firestore reference. */
	        this.type = "collection";
	    }
	    /** The collection's identifier. */    get id() {
	        return this._query.path.lastSegment();
	    }
	    /**
	     * A string representing the path of the referenced collection (relative
	     * to the root of the database).
	     */    get path() {
	        return this._query.path.canonicalString();
	    }
	    /**
	     * A reference to the containing `DocumentReference` if this is a
	     * subcollection. If this isn't a subcollection, the reference is null.
	     */    get parent() {
	        const t = this._path.popLast();
	        return t.isEmpty() ? null : new DocumentReference(this.firestore, 
	        /* converter= */ null, new DocumentKey(t));
	    }
	    withConverter(t) {
	        return new CollectionReference(this.firestore, t, this._path);
	    }
	}

	function collection(t, e, ...r) {
	    if (t = getModularInstance(t), __PRIVATE_validateNonEmptyArgument("collection", "path", e), t instanceof Firestore) {
	        const n = ResourcePath.fromString(e, ...r);
	        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t, /* converter= */ null, n);
	    }
	    {
	        if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
	        const n = t._path.child(ResourcePath.fromString(e, ...r));
	        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t.firestore, 
	        /* converter= */ null, n);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing an array of bytes.
	 */ class Bytes {
	    /** @hideconstructor */
	    constructor(t) {
	        this._byteString = t;
	    }
	    /**
	     * Creates a new `Bytes` object from the given Base64 string, converting it to
	     * bytes.
	     *
	     * @param base64 - The Base64 string used to create the `Bytes` object.
	     */    static fromBase64String(t) {
	        try {
	            return new Bytes(ByteString.fromBase64String(t));
	        } catch (t) {
	            throw new FirestoreError(T, "Failed to construct data from Base64 string: " + t);
	        }
	    }
	    /**
	     * Creates a new `Bytes` object from the given Uint8Array.
	     *
	     * @param array - The Uint8Array used to create the `Bytes` object.
	     */    static fromUint8Array(t) {
	        return new Bytes(ByteString.fromUint8Array(t));
	    }
	    /**
	     * Returns the underlying bytes as a Base64-encoded string.
	     *
	     * @returns The Base64-encoded string created from the `Bytes` object.
	     */    toBase64() {
	        return this._byteString.toBase64();
	    }
	    /**
	     * Returns the underlying bytes in a new `Uint8Array`.
	     *
	     * @returns The Uint8Array created from the `Bytes` object.
	     */    toUint8Array() {
	        return this._byteString.toUint8Array();
	    }
	    /**
	     * Returns a string representation of the `Bytes` object.
	     *
	     * @returns A string representation of the `Bytes` object.
	     */    toString() {
	        return "Bytes(base64: " + this.toBase64() + ")";
	    }
	    /**
	     * Returns true if this `Bytes` object is equal to the provided one.
	     *
	     * @param other - The `Bytes` object to compare against.
	     * @returns true if this `Bytes` object is equal to the provided one.
	     */    isEqual(t) {
	        return this._byteString.isEqual(t._byteString);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `FieldPath` refers to a field in a document. The path may consist of a
	 * single field name (referring to a top-level field in the document), or a
	 * list of field names (referring to a nested field in the document).
	 *
	 * Create a `FieldPath` by providing field names. If more than one field
	 * name is provided, the path will point to a nested field in a document.
	 */ class FieldPath {
	    /**
	     * Creates a `FieldPath` from the provided field names. If more than one field
	     * name is provided, the path will point to a nested field in a document.
	     *
	     * @param fieldNames - A list of field names.
	     */
	    constructor(...t) {
	        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new FirestoreError(T, "Invalid field name at argument $(i + 1). Field names must not be empty.");
	        this._internalPath = new FieldPath$1(t);
	    }
	    /**
	     * Returns true if this `FieldPath` is equal to the provided one.
	     *
	     * @param other - The `FieldPath` to compare against.
	     * @returns true if this `FieldPath` is equal to the provided one.
	     */    isEqual(t) {
	        return this._internalPath.isEqual(t._internalPath);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Sentinel values that can be used when writing document fields with `set()`
	 * or `update()`.
	 */ class FieldValue {
	    /**
	     * @param _methodName - The public API endpoint that returns this class.
	     * @hideconstructor
	     */
	    constructor(t) {
	        this._methodName = t;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing a geographic location in Firestore. The
	 * location is represented as latitude/longitude pair.
	 *
	 * Latitude values are in the range of [-90, 90].
	 * Longitude values are in the range of [-180, 180].
	 */ class GeoPoint {
	    /**
	     * Creates a new immutable `GeoPoint` object with the provided latitude and
	     * longitude values.
	     * @param latitude - The latitude as number between -90 and 90.
	     * @param longitude - The longitude as number between -180 and 180.
	     */
	    constructor(t, e) {
	        if (!isFinite(t) || t < -90 || t > 90) throw new FirestoreError(T, "Latitude must be a number between -90 and 90, but was: " + t);
	        if (!isFinite(e) || e < -180 || e > 180) throw new FirestoreError(T, "Longitude must be a number between -180 and 180, but was: " + e);
	        this._lat = t, this._long = e;
	    }
	    /**
	     * The latitude of this `GeoPoint` instance.
	     */    get latitude() {
	        return this._lat;
	    }
	    /**
	     * The longitude of this `GeoPoint` instance.
	     */    get longitude() {
	        return this._long;
	    }
	    /**
	     * Returns true if this `GeoPoint` is equal to the provided one.
	     *
	     * @param other - The `GeoPoint` to compare against.
	     * @returns true if this `GeoPoint` is equal to the provided one.
	     */    isEqual(t) {
	        return this._lat === t._lat && this._long === t._long;
	    }
	    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {
	        return {
	            latitude: this._lat,
	            longitude: this._long
	        };
	    }
	    /**
	     * Actually private to JS consumers of our API, so this function is prefixed
	     * with an underscore.
	     */    _compareTo(t) {
	        return __PRIVATE_primitiveComparator(this._lat, t._lat) || __PRIVATE_primitiveComparator(this._long, t._long);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Verifies equality for an array of primitives.
	 *
	 * @private
	 * @internal
	 * @param left Array of primitives.
	 * @param right Array of primitives.
	 * @return True if arrays are equal.
	 */
	/**
	 * @license
	 * Copyright 2024 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a vector type in Firestore documents.
	 * Create an instance with {@link FieldValue.vector}.
	 *
	 * @class VectorValue
	 */
	class VectorValue {
	    /**
	     * @private
	     * @internal
	     */
	    constructor(t) {
	        // Making a copy of the parameter.
	        this._values = (t || []).map((t => t));
	    }
	    /**
	     * Returns a copy of the raw number array form of the vector.
	     */    toArray() {
	        return this._values.map((t => t));
	    }
	    /**
	     * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.
	     */    isEqual(t) {
	        return function __PRIVATE_isPrimitiveArrayEqual(t, e) {
	            if (t.length !== e.length) return !1;
	            for (let r = 0; r < t.length; ++r) if (t[r] !== e[r]) return !1;
	            return !0;
	        }(this._values, t._values);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const U = /^__.*__$/;

	function __PRIVATE_isWrite(t) {
	    switch (t) {
	      case 0 /* UserDataSource.Set */ :
	 // fall through
	              case 2 /* UserDataSource.MergeSet */ :
	 // fall through
	              case 1 /* UserDataSource.Update */ :
	        return !0;

	      case 3 /* UserDataSource.Argument */ :
	      case 4 /* UserDataSource.ArrayArgument */ :
	        return !1;

	      default:
	        throw fail();
	    }
	}

	/** A "context" object passed around while parsing user data. */ class __PRIVATE_ParseContextImpl {
	    /**
	     * Initializes a ParseContext with the given source and path.
	     *
	     * @param settings - The settings for the parser.
	     * @param databaseId - The database ID of the Firestore instance.
	     * @param serializer - The serializer to use to generate the Value proto.
	     * @param ignoreUndefinedProperties - Whether to ignore undefined properties
	     * rather than throw.
	     * @param fieldTransforms - A mutable list of field transforms encountered
	     * while parsing the data.
	     * @param fieldMask - A mutable list of field paths encountered while parsing
	     * the data.
	     *
	     * TODO(b/34871131): We don't support array paths right now, so path can be
	     * null to indicate the context represents any location within an array (in
	     * which case certain features will not work and errors will be somewhat
	     * compromised).
	     */
	    constructor(t, e, r, n, i, s) {
	        this.settings = t, this.databaseId = e, this.serializer = r, this.ignoreUndefinedProperties = n, 
	        // Minor hack: If fieldTransforms is undefined, we assume this is an
	        // external call and we need to validate the entire path.
	        void 0 === i && this.tt(), this.fieldTransforms = i || [], this.fieldMask = s || [];
	    }
	    get path() {
	        return this.settings.path;
	    }
	    get et() {
	        return this.settings.et;
	    }
	    /** Returns a new context with the specified settings overwritten. */    rt(t) {
	        return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
	    }
	    nt(t) {
	        var e;
	        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.rt({
	            path: r,
	            it: !1
	        });
	        return n.st(t), n;
	    }
	    ot(t) {
	        var e;
	        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.rt({
	            path: r,
	            it: !1
	        });
	        return n.tt(), n;
	    }
	    ut(t) {
	        // TODO(b/34871131): We don't support array paths right now; so make path
	        // undefined.
	        return this.rt({
	            path: void 0,
	            it: !0
	        });
	    }
	    _t(t) {
	        return __PRIVATE_createError(t, this.settings.methodName, this.settings.ct || !1, this.path, this.settings.lt);
	    }
	    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
	        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));
	    }
	    tt() {
	        // TODO(b/34871131): Remove null check once we have proper paths for fields
	        // within arrays.
	        if (this.path) for (let t = 0; t < this.path.length; t++) this.st(this.path.get(t));
	    }
	    st(t) {
	        if (0 === t.length) throw this._t("Document fields must not be empty");
	        if (__PRIVATE_isWrite(this.et) && U.test(t)) throw this._t('Document fields cannot begin and end with "__"');
	    }
	}

	/**
	 * Helper for parsing raw user input (provided via the API) into internal model
	 * classes.
	 */ class __PRIVATE_UserDataReader {
	    constructor(t, e, r) {
	        this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = r || __PRIVATE_newSerializer(t);
	    }
	    /** Creates a new top-level parse context. */    ht(t, e, r, n = !1) {
	        return new __PRIVATE_ParseContextImpl({
	            et: t,
	            methodName: e,
	            lt: r,
	            path: FieldPath$1.emptyPath(),
	            it: !1,
	            ct: n
	        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
	    }
	}

	function __PRIVATE_newUserDataReader(t) {
	    const e = t._freezeSettings(), r = __PRIVATE_newSerializer(t._databaseId);
	    return new __PRIVATE_UserDataReader(t._databaseId, !!e.ignoreUndefinedProperties, r);
	}

	/**
	 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
	 * bound).
	 *
	 * @param allowArrays - Whether the query value is an array that may directly
	 * contain additional arrays (e.g. the operand of an `in` query).
	 */ function __PRIVATE_parseQueryValue(t, e, r, n = !1) {
	    return __PRIVATE_parseData(r, t.ht(n ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */ , e));
	}

	/**
	 * Parses user data to Protobuf Values.
	 *
	 * @param input - Data to be parsed.
	 * @param context - A context object representing the current path being parsed,
	 * the source of the data being parsed, etc.
	 * @returns The parsed value, or null if the value was a FieldValue sentinel
	 * that should not be included in the resulting parsed data.
	 */ function __PRIVATE_parseData(t, e) {
	    if (__PRIVATE_looksLikeJsonObject(
	    // Unwrap the API type from the Compat SDK. This will return the API type
	    // from firestore-exp.
	    t = getModularInstance(t))) return __PRIVATE_validatePlainObject("Unsupported field value:", e, t), 
	    __PRIVATE_parseObject(t, e);
	    if (t instanceof FieldValue) 
	    // FieldValues usually parse into transforms (except deleteField())
	    // in which case we do not want to include this field in our parsed data
	    // (as doing so will overwrite the field directly prior to the transform
	    // trying to transform it). So we don't add this location to
	    // context.fieldMask and we return null as our parsing result.
	    /**
	 * "Parses" the provided FieldValueImpl, adding any necessary transforms to
	 * context.fieldTransforms.
	 */
	    return function __PRIVATE_parseSentinelFieldValue(t, e) {
	        // Sentinels are only supported with writes, and not within arrays.
	        if (!__PRIVATE_isWrite(e.et)) throw e._t(`${t._methodName}() can only be used with update() and set()`);
	        if (!e.path) throw e._t(`${t._methodName}() is not currently supported inside arrays`);
	        const r = t._toFieldTransform(e);
	        r && e.fieldTransforms.push(r);
	    }
	    /**
	 * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
	 *
	 * @returns The parsed value
	 */ (t, e), null;
	    if (void 0 === t && e.ignoreUndefinedProperties) 
	    // If the input is undefined it can never participate in the fieldMask, so
	    // don't handle this below. If `ignoreUndefinedProperties` is false,
	    // `parseScalarValue` will reject an undefined value.
	    return null;
	    if (
	    // If context.path is null we are inside an array and we don't support
	    // field mask paths more granular than the top-level array.
	    e.path && e.fieldMask.push(e.path), t instanceof Array) {
	        // TODO(b/34871131): Include the path containing the array in the error
	        // message.
	        // In the case of IN queries, the parsed data is an array (representing
	        // the set of values to be included for the IN query) that may directly
	        // contain additional arrays (each representing an individual field
	        // value), so we disable this validation.
	        if (e.settings.it && 4 /* UserDataSource.ArrayArgument */ !== e.et) throw e._t("Nested arrays are not supported");
	        return function __PRIVATE_parseArray(t, e) {
	            const r = [];
	            let n = 0;
	            for (const i of t) {
	                let t = __PRIVATE_parseData(i, e.ut(n));
	                null == t && (
	                // Just include nulls in the array for fields being replaced with a
	                // sentinel.
	                t = {
	                    nullValue: "NULL_VALUE"
	                }), r.push(t), n++;
	            }
	            return {
	                arrayValue: {
	                    values: r
	                }
	            };
	        }(t, e);
	    }
	    return function __PRIVATE_parseScalarValue(t, e) {
	        if (null === (t = getModularInstance(t))) return {
	            nullValue: "NULL_VALUE"
	        };
	        if ("number" == typeof t) return toNumber(e.serializer, t);
	        if ("boolean" == typeof t) return {
	            booleanValue: t
	        };
	        if ("string" == typeof t) return {
	            stringValue: t
	        };
	        if (t instanceof Date) {
	            const r = Timestamp.fromDate(t);
	            return {
	                timestampValue: toTimestamp(e.serializer, r)
	            };
	        }
	        if (t instanceof Timestamp) {
	            // Firestore backend truncates precision down to microseconds. To ensure
	            // offline mode works the same with regards to truncation, perform the
	            // truncation immediately without waiting for the backend to do that.
	            const r = new Timestamp(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
	            return {
	                timestampValue: toTimestamp(e.serializer, r)
	            };
	        }
	        if (t instanceof GeoPoint) return {
	            geoPointValue: {
	                latitude: t.latitude,
	                longitude: t.longitude
	            }
	        };
	        if (t instanceof Bytes) return {
	            bytesValue: __PRIVATE_toBytes(e.serializer, t._byteString)
	        };
	        if (t instanceof DocumentReference) {
	            const r = e.databaseId, n = t.firestore._databaseId;
	            if (!n.isEqual(r)) throw e._t(`Document reference is for database ${n.projectId}/${n.database} but should be for database ${r.projectId}/${r.database}`);
	            return {
	                referenceValue: __PRIVATE_toResourceName(t.firestore._databaseId || e.databaseId, t._key.path)
	            };
	        }
	        if (t instanceof VectorValue) 
	        /**
	 * Creates a new VectorValue proto value (using the internal format).
	 */
	        return function __PRIVATE_parseVectorValue(t, e) {
	            return {
	                mapValue: {
	                    fields: {
	                        __type__: {
	                            stringValue: "__vector__"
	                        },
	                        value: {
	                            arrayValue: {
	                                values: t.toArray().map((t => {
	                                    if ("number" != typeof t) throw e._t("VectorValues must only contain numeric values.");
	                                    return __PRIVATE_toDouble(e.serializer, t);
	                                }))
	                            }
	                        }
	                    }
	                }
	            };
	        }
	        /**
	 * Checks whether an object looks like a JSON object that should be converted
	 * into a struct. Normal class/prototype instances are considered to look like
	 * JSON objects since they should be converted to a struct value. Arrays, Dates,
	 * GeoPoints, etc. are not considered to look like JSON objects since they map
	 * to specific FieldValue types other than ObjectValue.
	 */ (t, e);
	        throw e._t(`Unsupported field value: ${__PRIVATE_valueDescription(t)}`);
	    }(t, e);
	}

	function __PRIVATE_parseObject(t, e) {
	    const r = {};
	    return !function isEmpty(t) {
	        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
	        return !0;
	    }(t) ? forEach(t, ((t, n) => {
	        const i = __PRIVATE_parseData(n, e.nt(t));
	        null != i && (r[t] = i);
	    })) : 
	    // If we encounter an empty object, we explicitly add it to the update
	    // mask to ensure that the server creates a map entry.
	    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {
	        mapValue: {
	            fields: r
	        }
	    };
	}

	function __PRIVATE_looksLikeJsonObject(t) {
	    return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Timestamp || t instanceof GeoPoint || t instanceof Bytes || t instanceof DocumentReference || t instanceof FieldValue || t instanceof VectorValue);
	}

	function __PRIVATE_validatePlainObject(t, e, r) {
	    if (!__PRIVATE_looksLikeJsonObject(r) || !function __PRIVATE_isPlainObject(t) {
	        return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
	    }(r)) {
	        const n = __PRIVATE_valueDescription(r);
	        throw "an object" === n ? e._t(t + " a custom object") : e._t(t + " " + n);
	    }
	}

	/**
	 * Matches any characters in a field path string that are reserved.
	 */ const j = new RegExp("[~\\*/\\[\\]]");

	/**
	 * Wraps fromDotSeparatedString with an error message about the method that
	 * was thrown.
	 * @param methodName - The publicly visible method name
	 * @param path - The dot-separated string form of a field path which will be
	 * split on dots.
	 * @param targetDoc - The document against which the field path will be
	 * evaluated.
	 */ function __PRIVATE_fieldPathFromDotSeparatedString(t, e, r) {
	    if (e.search(j) >= 0) throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
	    /* hasConverter= */ !1, 
	    /* path= */ void 0, r);
	    try {
	        return new FieldPath(...e.split("."))._internalPath;
	    } catch (n) {
	        throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
	        /* hasConverter= */ !1, 
	        /* path= */ void 0, r);
	    }
	}

	function __PRIVATE_createError(t, e, r, n, i) {
	    const s = n && !n.isEmpty(), o = void 0 !== i;
	    let a = `Function ${e}() called with invalid data`;
	    r && (a += " (via `toFirestore()`)"), a += ". ";
	    let u = "";
	    return (s || o) && (u += " (found", s && (u += ` in field ${n}`), o && (u += ` in document ${i}`), 
	    u += ")"), new FirestoreError(T, a + t + u);
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `DocumentSnapshot` contains data read from a document in your Firestore
	 * database. The data can be extracted with `.data()` or `.get(<field>)` to
	 * get a specific field.
	 *
	 * For a `DocumentSnapshot` that points to a non-existing document, any data
	 * access will return 'undefined'. You can use the `exists()` method to
	 * explicitly verify a document's existence.
	 */ class DocumentSnapshot {
	    // Note: This class is stripped down version of the DocumentSnapshot in
	    // the legacy SDK. The changes are:
	    // - No support for SnapshotMetadata.
	    // - No support for SnapshotOptions.
	    /** @hideconstructor protected */
	    constructor(t, e, r, n, i) {
	        this._firestore = t, this._userDataWriter = e, this._key = r, this._document = n, 
	        this._converter = i;
	    }
	    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
	        return this._key.path.lastSegment();
	    }
	    /**
	     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
	     */    get ref() {
	        return new DocumentReference(this._firestore, this._converter, this._key);
	    }
	    /**
	     * Signals whether or not the document at the snapshot's location exists.
	     *
	     * @returns true if the document exists.
	     */    exists() {
	        return null !== this._document;
	    }
	    /**
	     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
	     * the document doesn't exist.
	     *
	     * @returns An `Object` containing all fields in the document or `undefined`
	     * if the document doesn't exist.
	     */    data() {
	        if (this._document) {
	            if (this._converter) {
	                // We only want to use the converter and create a new DocumentSnapshot
	                // if a converter has been provided.
	                const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, 
	                /* converter= */ null);
	                return this._converter.fromFirestore(t);
	            }
	            return this._userDataWriter.convertValue(this._document.data.value);
	        }
	    }
	    /**
	     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
	     * document or field doesn't exist.
	     *
	     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
	     * field.
	     * @returns The data at the specified field location or undefined if no such
	     * field exists in the document.
	     */
	    // We are using `any` here to avoid an explicit cast by our users.
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    get(t) {
	        if (this._document) {
	            const e = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", t));
	            if (null !== e) return this._userDataWriter.convertValue(e);
	        }
	    }
	}

	/**
	 * A `QueryDocumentSnapshot` contains data read from a document in your
	 * Firestore database as part of a query. The document is guaranteed to exist
	 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
	 * specific field.
	 *
	 * A `QueryDocumentSnapshot` offers the same API surface as a
	 * `DocumentSnapshot`. Since query results contain only existing documents, the
	 * `exists` property will always be true and `data()` will never return
	 * 'undefined'.
	 */ class QueryDocumentSnapshot extends DocumentSnapshot {
	    /**
	     * Retrieves all fields in the document as an `Object`.
	     *
	     * @override
	     * @returns An `Object` containing all fields in the document.
	     */
	    data() {
	        return super.data();
	    }
	}

	/**
	 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
	 * representing the results of a query. The documents can be accessed as an
	 * array via the `docs` property or enumerated using the `forEach` method. The
	 * number of documents can be determined via the `empty` and `size`
	 * properties.
	 */ class QuerySnapshot {
	    /** @hideconstructor */
	    constructor(t, e) {
	        this._docs = e, this.query = t;
	    }
	    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
	        return [ ...this._docs ];
	    }
	    /** The number of documents in the `QuerySnapshot`. */    get size() {
	        return this.docs.length;
	    }
	    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
	        return 0 === this.docs.length;
	    }
	    /**
	     * Enumerates all of the documents in the `QuerySnapshot`.
	     *
	     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
	     * each document in the snapshot.
	     * @param thisArg - The `this` binding for the callback.
	     */    forEach(t, e) {
	        this._docs.forEach(t, e);
	    }
	}

	/**
	 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
	 */ function __PRIVATE_fieldPathFromArgument(t, e) {
	    return "string" == typeof e ? __PRIVATE_fieldPathFromDotSeparatedString(t, e) : e instanceof FieldPath ? e._internalPath : e._delegate._internalPath;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An `AppliableConstraint` is an abstraction of a constraint that can be applied
	 * to a Firestore query.
	 */
	class AppliableConstraint {}

	/**
	 * A `QueryConstraint` is used to narrow the set of documents returned by a
	 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
	 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
	 * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and
	 * can then be passed to {@link (query:1)} to create a new query instance that
	 * also contains this `QueryConstraint`.
	 */ class QueryConstraint extends AppliableConstraint {}

	function query(t, e, ...r) {
	    let n = [];
	    e instanceof AppliableConstraint && n.push(e), n = n.concat(r), function __PRIVATE_validateQueryConstraintArray(t) {
	        const e = t.filter((t => t instanceof QueryCompositeFilterConstraint)).length, r = t.filter((t => t instanceof QueryFieldFilterConstraint)).length;
	        if (e > 1 || e > 0 && r > 0) throw new FirestoreError(T, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
	    }
	    /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	    /**
	 * Converts Firestore's internal types to the JavaScript types that we expose
	 * to the user.
	 *
	 * @internal
	 */ (n);
	    for (const e of n) t = e._apply(t);
	    return t;
	}

	/**
	 * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by
	 * a Firestore query by filtering on one or more document fields.
	 * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then
	 * be passed to {@link (query:1)} to create a new query instance that also contains
	 * this `QueryFieldFilterConstraint`.
	 */ class QueryFieldFilterConstraint extends QueryConstraint {
	    /**
	     * @internal
	     */
	    constructor(t, e, r) {
	        super(), this._field = t, this._op = e, this._value = r, 
	        /** The type of this query constraint */
	        this.type = "where";
	    }
	    static _create(t, e, r) {
	        return new QueryFieldFilterConstraint(t, e, r);
	    }
	    _apply(t) {
	        const e = this._parse(t);
	        return __PRIVATE_validateNewFieldFilter(t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e));
	    }
	    _parse(t) {
	        const e = __PRIVATE_newUserDataReader(t.firestore), r = function __PRIVATE_newQueryFilter(t, e, r, n, i, s, o) {
	            let a;
	            if (i.isKeyField()) {
	                if ("array-contains" /* Operator.ARRAY_CONTAINS */ === s || "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ === s) throw new FirestoreError(T, `Invalid Query. You can't perform '${s}' queries on documentId().`);
	                if ("in" /* Operator.IN */ === s || "not-in" /* Operator.NOT_IN */ === s) {
	                    __PRIVATE_validateDisjunctiveFilterElements(o, s);
	                    const e = [];
	                    for (const r of o) e.push(__PRIVATE_parseDocumentIdValue(n, t, r));
	                    a = {
	                        arrayValue: {
	                            values: e
	                        }
	                    };
	                } else a = __PRIVATE_parseDocumentIdValue(n, t, o);
	            } else "in" /* Operator.IN */ !== s && "not-in" /* Operator.NOT_IN */ !== s && "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), 
	            a = __PRIVATE_parseQueryValue(r, e, o, 
	            /* allowArrays= */ "in" /* Operator.IN */ === s || "not-in" /* Operator.NOT_IN */ === s);
	            return FieldFilter.create(i, s, a);
	        }(t._query, "where", e, t.firestore._databaseId, this._field, this._op, this._value);
	        return r;
	    }
	}

	/**
	 * Creates a {@link QueryFieldFilterConstraint} that enforces that documents
	 * must contain the specified field and that the value should satisfy the
	 * relation constraint provided.
	 *
	 * @param fieldPath - The path to compare
	 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
	 *   "&lt;=", "!=").
	 * @param value - The value for comparison
	 * @returns The created {@link QueryFieldFilterConstraint}.
	 */ function where(t, e, r) {
	    const n = e, i = __PRIVATE_fieldPathFromArgument("where", t);
	    return QueryFieldFilterConstraint._create(i, n, r);
	}

	/**
	 * A `QueryCompositeFilterConstraint` is used to narrow the set of documents
	 * returned by a Firestore query by performing the logical OR or AND of multiple
	 * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.
	 * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or
	 * {@link and} and can then be passed to {@link (query:1)} to create a new query
	 * instance that also contains the `QueryCompositeFilterConstraint`.
	 */ class QueryCompositeFilterConstraint extends AppliableConstraint {
	    /**
	     * @internal
	     */
	    constructor(
	    /** The type of this query constraint */
	    t, e) {
	        super(), this.type = t, this._queryConstraints = e;
	    }
	    static _create(t, e) {
	        return new QueryCompositeFilterConstraint(t, e);
	    }
	    _parse(t) {
	        const e = this._queryConstraints.map((e => e._parse(t))).filter((t => t.getFilters().length > 0));
	        return 1 === e.length ? e[0] : CompositeFilter.create(e, this._getOperator());
	    }
	    _apply(t) {
	        const e = this._parse(t);
	        return 0 === e.getFilters().length ? t : (function __PRIVATE_validateNewFilter(t, e) {
	            let r = t;
	            const n = e.getFlattenedFilters();
	            for (const t of n) __PRIVATE_validateNewFieldFilter(r, t), r = __PRIVATE_queryWithAddedFilter(r, t);
	        }
	        // Checks if any of the provided filter operators are included in the given list of filters and
	        // returns the first one that is, or null if none are.
	        (t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e)));
	    }
	    _getQueryConstraints() {
	        return this._queryConstraints;
	    }
	    _getOperator() {
	        return "and" === this.type ? "and" /* CompositeOperator.AND */ : "or" /* CompositeOperator.OR */;
	    }
	}

	function __PRIVATE_parseDocumentIdValue(t, e, r) {
	    if ("string" == typeof (r = getModularInstance(r))) {
	        if ("" === r) throw new FirestoreError(T, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
	        if (!__PRIVATE_isCollectionGroupQuery(e) && -1 !== r.indexOf("/")) throw new FirestoreError(T, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${r}' contains a '/' character.`);
	        const n = e.path.child(ResourcePath.fromString(r));
	        if (!DocumentKey.isDocumentKey(n)) throw new FirestoreError(T, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${n}' is not because it has an odd number of segments (${n.length}).`);
	        return __PRIVATE_refValue(t, new DocumentKey(n));
	    }
	    if (r instanceof DocumentReference) return __PRIVATE_refValue(t, r._key);
	    throw new FirestoreError(T, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(r)}.`);
	}

	/**
	 * Validates that the value passed into a disjunctive filter satisfies all
	 * array requirements.
	 */ function __PRIVATE_validateDisjunctiveFilterElements(t, e) {
	    if (!Array.isArray(t) || 0 === t.length) throw new FirestoreError(T, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
	}

	/**
	 * Given an operator, returns the set of operators that cannot be used with it.
	 *
	 * This is not a comprehensive check, and this function should be removed in the
	 * long term. Validations should occur in the Firestore backend.
	 *
	 * Operators in a query must adhere to the following set of rules:
	 * 1. Only one inequality per query.
	 * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
	 */ function __PRIVATE_validateNewFieldFilter(t, e) {
	    const r = function __PRIVATE_findOpInsideFilters(t, e) {
	        for (const r of t) for (const t of r.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;
	        return null;
	    }(t.filters, function __PRIVATE_conflictingOps(t) {
	        switch (t) {
	          case "!=" /* Operator.NOT_EQUAL */ :
	            return [ "!=" /* Operator.NOT_EQUAL */ , "not-in" /* Operator.NOT_IN */ ];

	          case "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ :
	          case "in" /* Operator.IN */ :
	            return [ "not-in" /* Operator.NOT_IN */ ];

	          case "not-in" /* Operator.NOT_IN */ :
	            return [ "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ , "in" /* Operator.IN */ , "not-in" /* Operator.NOT_IN */ , "!=" /* Operator.NOT_EQUAL */ ];

	          default:
	            return [];
	        }
	    }(e.op));
	    if (null !== r) 
	    // Special case when it's a duplicate op to give a slightly clearer error message.
	    throw r === e.op ? new FirestoreError(T, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new FirestoreError(T, `Invalid query. You cannot use '${e.op.toString()}' filters with '${r.toString()}' filters.`);
	}

	class __PRIVATE_LiteUserDataWriter extends class AbstractUserDataWriter {
	    convertValue(t, e = "none") {
	        switch (__PRIVATE_typeOrder(t)) {
	          case 0 /* TypeOrder.NullValue */ :
	            return null;

	          case 1 /* TypeOrder.BooleanValue */ :
	            return t.booleanValue;

	          case 2 /* TypeOrder.NumberValue */ :
	            return __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue);

	          case 3 /* TypeOrder.TimestampValue */ :
	            return this.convertTimestamp(t.timestampValue);

	          case 4 /* TypeOrder.ServerTimestampValue */ :
	            return this.convertServerTimestamp(t, e);

	          case 5 /* TypeOrder.StringValue */ :
	            return t.stringValue;

	          case 6 /* TypeOrder.BlobValue */ :
	            return this.convertBytes(__PRIVATE_normalizeByteString(t.bytesValue));

	          case 7 /* TypeOrder.RefValue */ :
	            return this.convertReference(t.referenceValue);

	          case 8 /* TypeOrder.GeoPointValue */ :
	            return this.convertGeoPoint(t.geoPointValue);

	          case 9 /* TypeOrder.ArrayValue */ :
	            return this.convertArray(t.arrayValue, e);

	          case 11 /* TypeOrder.ObjectValue */ :
	            return this.convertObject(t.mapValue, e);

	          case 10 /* TypeOrder.VectorValue */ :
	            return this.convertVectorValue(t.mapValue);

	          default:
	            throw fail();
	        }
	    }
	    convertObject(t, e) {
	        return this.convertObjectMap(t.fields, e);
	    }
	    /**
	     * @internal
	     */    convertObjectMap(t, e = "none") {
	        const r = {};
	        return forEach(t, ((t, n) => {
	            r[t] = this.convertValue(n, e);
	        })), r;
	    }
	    /**
	     * @internal
	     */    convertVectorValue(t) {
	        var e, r, n;
	        const i = null === (n = null === (r = null === (e = t.fields) || void 0 === e ? void 0 : e.value.arrayValue) || void 0 === r ? void 0 : r.values) || void 0 === n ? void 0 : n.map((t => __PRIVATE_normalizeNumber(t.doubleValue)));
	        return new VectorValue(i);
	    }
	    convertGeoPoint(t) {
	        return new GeoPoint(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(t.longitude));
	    }
	    convertArray(t, e) {
	        return (t.values || []).map((t => this.convertValue(t, e)));
	    }
	    convertServerTimestamp(t, e) {
	        switch (e) {
	          case "previous":
	            const r = __PRIVATE_getPreviousValue(t);
	            return null == r ? null : this.convertValue(r, e);

	          case "estimate":
	            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(t));

	          default:
	            return null;
	        }
	    }
	    convertTimestamp(t) {
	        const e = __PRIVATE_normalizeTimestamp(t);
	        return new Timestamp(e.seconds, e.nanos);
	    }
	    convertDocumentKey(t, e) {
	        const r = ResourcePath.fromString(t);
	        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(r));
	        const n = new DatabaseId(r.get(1), r.get(3)), i = new DocumentKey(r.popFirst(5));
	        return n.isEqual(e) || 
	        // TODO(b/64130202): Somehow support foreign references.
	        __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${n.projectId}/${n.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), 
	        i;
	    }
	} {
	    constructor(t) {
	        super(), this.firestore = t;
	    }
	    convertBytes(t) {
	        return new Bytes(t);
	    }
	    convertReference(t) {
	        const e = this.convertDocumentKey(t, this.firestore._databaseId);
	        return new DocumentReference(this.firestore, /* converter= */ null, e);
	    }
	}

	/**
	 * Executes the query and returns the results as a {@link QuerySnapshot}.
	 *
	 * All queries are executed directly by the server, even if the query was
	 * previously executed. Recent modifications are only reflected in the retrieved
	 * results if they have already been applied by the backend. If the client is
	 * offline, the operation fails. To see previously cached result and local
	 * modifications, use the full Firestore SDK.
	 *
	 * @param query - The `Query` to execute.
	 * @returns A Promise that will be resolved with the results of the query.
	 */ function getDocs(t) {
	    (function __PRIVATE_validateHasExplicitOrderByForLimitToLast(t) {
	        if ("L" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new FirestoreError(v, "limitToLast() queries require specifying at least one orderBy() clause");
	    })((t = __PRIVATE_cast(t, Query))._query);
	    const e = __PRIVATE_getDatastore(t.firestore), r = new __PRIVATE_LiteUserDataWriter(t.firestore);
	    return __PRIVATE_invokeRunQueryRpc(e, t._query).then((e => {
	        const n = e.map((e => new QueryDocumentSnapshot(t.firestore, r, e.key, e, t.converter)));
	        return "L" /* LimitType.Last */ === t._query.limitType && 
	        // Limit to last queries reverse the orderBy constraint that was
	        // specified by the user. As such, we need to reverse the order of the
	        // results to return the documents in the expected order.
	        n.reverse(), new QuerySnapshot(t, n);
	    }));
	}

	/**
	 * Deletes the document referred to by the specified `DocumentReference`.
	 *
	 * The deletion will only be reflected in document reads that occur after the
	 * returned promise resolves. If the client is offline, the
	 * delete fails. If you would like to see local modifications or buffer writes
	 * until the client is online, use the full Firestore SDK.
	 *
	 * @param reference - A reference to the document to delete.
	 * @returns A `Promise` resolved once the document has been successfully
	 * deleted from the backend.
	 */ function deleteDoc(t) {
	    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), [ new __PRIVATE_DeleteMutation(t._key, Precondition.none()) ]);
	}

	/**
	 * Firestore Lite
	 *
	 * @remarks Firestore Lite is a small online-only SDK that allows read
	 * and write access to your Firestore database. All operations connect
	 * directly to the backend, and `onSnapshot()` APIs are not supported.
	 * @packageDocumentation
	 */ !function __PRIVATE_registerFirestore() {
	    !function __PRIVATE_setSDKVersion(t) {
	        d = t;
	    }(`${SDK_VERSION}_lite`), _registerComponent(new Component("firestore/lite", ((t, {instanceIdentifier: e, options: r}) => {
	        const n = t.getProvider("app").getImmediate(), i = new Firestore(new __PRIVATE_LiteAuthCredentialsProvider(t.getProvider("auth-internal")), new __PRIVATE_LiteAppCheckTokenProvider(t.getProvider("app-check-internal")), function __PRIVATE_databaseIdFromApp(t, e) {
	            if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new FirestoreError(T, '"projectId" not provided in firebase.initializeApp.');
	            return new DatabaseId(t.options.projectId, e);
	        }
	        /**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (n, e), n);
	        return r && i._setSettings(r), i;
	    }), "PUBLIC").setMultipleInstances(!0)), 
	    // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation
	    registerVersion("firestore-lite", "4.7.0", ""), registerVersion("firestore-lite", "4.7.0", "esm2017");
	}();

	const firebaseConfig = {
	  apiKey: "AIzaSyDs8wTtgLSOg-bnLpBK4K5Hege66pg9wVQ",
	  authDomain: "streamixmovie.firebaseapp.com",
	  projectId: "streamixmovie",
	  storageBucket: "streamixmovie.appspot.com",
	  messagingSenderId: "724237092696",
	  appId: "1:724237092696:web:7e2f773517853bb6b5872d"
	};


	const firebaseApp = initializeApp(firebaseConfig);
	const db = getFirestore(firebaseApp);

	async function verificarCredenciales(correo, contraseña) {
	  try {
	    console.log('Iniciando verificación de credenciales');
	    const usersRef = collection(db, 'usuarios');
	    console.log('Colección de usuarios obtenida');
	    
	    const q = query(usersRef, where('correo', '==', correo), where('contraseña', '==', contraseña));
	    console.log('Consulta construida:', q);
	    
	    const querySnapshot = await getDocs(q);
	    console.log('Resultado de la consulta obtenida:', querySnapshot);

	    if (querySnapshot.size > 0) {
	      const userDoc = querySnapshot.docs[0];
	      const userData = userDoc.data();
	      console.log('Datos del usuario obtenidos:', userData);
	      console.log("veeeeeeeeeeeeeeeeeeeeeeeeeee");

	      return { authenticated: true, userData };
	    } else {
	      console.log('Usuario no encontrado o credenciales inválidas.');
	      return { authenticated: false, reason: 'Credenciales inválidas' };
	    }
	  } catch (error) {
	    console.error('Error al verificar credenciales:', error);
	    return { authenticated: false, reason: 'Error al verificar credenciales', details: error.message };
	  }
	}

	async function verificarDispositivo(usuarioId, deviceId) {
	  try {
	    const dispositivosRef = collection(db, 'dispositivos');
	    const dispositivosQuery = query(dispositivosRef, where('usuarioId', '==', usuarioId), where('deviceId', '==', deviceId));
	    const dispositivosSnapshot = await getDocs(dispositivosQuery);
	    
	    if (dispositivosSnapshot.size > 0) {
	      console.log('Dispositivo verificado correctamente.');
	      return { verified: true };
	    } else {
	      console.log('El dispositivo no está registrado.');
	      return { verified: false, reason: 'El dispositivo no está registrado error' };
	    }
	  } catch (error) {
	    console.error('Error al verificar dispositivo:', error);
	    return { verified: false, reason: 'Error al verificar dispositivo', details: error.message };
	  }
	}

	function verificarFechaExpiracion(fechaExpiracion) {
	  try {
	    const ahora = Timestamp.now();
	    console.log('Fecha y hora actual:', ahora.toDate());
	  
	    if (fechaExpiracion.toDate() < ahora.toDate()) {
	      console.log('La cuenta del usuario ha expirado.');
	      return { expired: true };
	    } else {
	      return { expired: false };
	    }
	  } catch (error) {
	    
	  }
	 
	}


	async function cerrarSesion() {
	  try {
	    const usuario = JSON.parse(localStorage.getItem('usuario'));

	    if (!usuario || !usuario.usuarioId) {
	      console.log("No hay un usuario autenticado.");
	      return;
	    }

	    const detallesDispositivo = await obtenerDetallesDispositivo();
	    const deviceId = detallesDispositivo.deviceId;

	    // Elimina el dispositivo asociado a este usuario
	    const dispositivosRef = collection(db, 'dispositivos');
	    const dispositivoQuery = query(dispositivosRef, where('usuarioId', '==', usuario.usuarioId), where('deviceId', '==', deviceId));
	    const dispositivoSnapshot = await getDocs(dispositivoQuery);

	    if (dispositivoSnapshot.size > 0) {
	      const dispositivoDocRef = dispositivoSnapshot.docs[0].ref;
	      await deleteDoc(dispositivoDocRef);
	      console.log("Dispositivo eliminado correctamente.");
	    } else {
	      console.log("No se encontró el dispositivo en la base de datos.");
	    }

	    // Limpia el localStorage para cerrar sesión
	    localStorage.removeItem('usuario');
	    localStorage.removeItem('usuarioAutenticado');
	    console.log("Sesión cerrada correctamente.");
	  } catch (error) {
	    console.error("Error al cerrar sesión:", error);
	  }
	}

	var peliculasData = {
	  Peliculas: {
	    Extreno: [
	      {
	        id: 25,
	        nombre: "Alien: Romulus",
	        imagen: "../../Assets/Imagenespeliculas/Alien_Romulus2024.webp",
	        imagen_small: "../../Assets/Imagenespeliculas/romper_circulo_2024.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/telma_el_unicornio_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/78c7dad2-cf8c-43cf-8c86-07887c1df270",
	        Generos: ["Terror,Ciencia Ficción"],
	        Año: "2024"
	      },
	      {
	        id: 26,
	        nombre: "Romper el Circulo",
	        imagen: "../../Assets/Imagenespeliculas/romper_circulo_2024.webp",
	        imagen_small: "../../Assets/Imagenespeliculas/romper_circulo_2024.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/telma_el_unicornio_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b4c174a5-b83b-46c1-820d-b02281c0efd7",
	        Generos: ["Drama", "Romance"],
	        Año: "2024"
	      },
	      {
	        id: 27,
	        nombre: "Tornados",
	        imagen: "../../Assets/Imagenespeliculas/tornados_2024.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/telma_el_unicornio_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/telma_el_unicornio_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ab967e2e-7159-4bff-8ad7-11609cb769cb",
	        Generos: ["Acción", "Aventura", "Drama", "Suspense"],
	        Año: "2024"
	      },
	      {
	        id: 28,
	        nombre: "Telma La Unicornio",
	        imagen: "../../Assets/Imagenespeliculas/telma_el_unicornio_2024.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/telma_el_unicornio_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/telma_el_unicornio_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f12ee4c1-3660-4932-856f-e8c3779b5e91",
	        Generos: ["Animación", "Aventura"],
	        Año: "2024"
	      },
	      {
	        id: 29,
	        nombre: "Un lugar en silencio: Día uno",
	        imagen: "../../Imagenes_Pelis/unlugarensilencio2024.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/un_lugar_en_silencio_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/un_lugar_en_silencio_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c7e38666-613b-49d0-891c-fb02f99f9ff6",
	        Generos: ["Terror", "Suspense"],
	        Año: "2024"
	      },
	      {
	        id: 30,
	        nombre: "Deadpool 3",
	        imagen: "../../Imagenes_Pelis/deadpool3.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/deadpool3-small.webp",
	        imagen_tv: "../../Assets/Imagenespeliculas/tv/deadpool3-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/0f93e18c-70d6-4764-aa2c-f87cc0a2102b",
	        Generos: ["Acción", "Comedia"],
	        Año: "2024"
	      },
	      {
	        id: 31,
	        nombre: "Immaculada",
	        imagen: "../../Assets/Imagenespeliculas/inmaculada_2024.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/inmaculada_2024-small.webp",
	        imagen_tv: "../../Assets/Imagenespeliculas/tv/inmaculada_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/533a29a6-d9d1-4c3c-bb49-0bd25401829f",
	        Generos: ["Terror", "Drama"],
	        Año: "2024"
	      },
	      {
	        id: 811,
	        nombre: "Megamente contra el sindicato de la perdición",
	        imagen: "../../Assets/Imagenespeliculas/Megamente contra el sindicato de la perdición.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/inmaculada_2024-small.webp",
	        imagen_tv: "../../Assets/Imagenespeliculas/tv/inmaculada_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ca400773-34a2-42fa-b6be-536ecac13597",
	        Generos: ["Animación,Comedia,Ciencia ficción"],
	        Año: "2024"
	      },
	      {
	        id: 32,
	        nombre: "Trampa en alta mar",
	        imagen: "../../Assets/Imagenespeliculas/Trampa.en.alta.mar.2024.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/inmaculada_2024-small.webp",
	        imagen_tv: "../../Assets/Imagenespeliculas/tv/inmaculada_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e4138f77-763b-4194-b2e6-8a26ae1f42f1",
	        Generos: ["Suspense,Terror"],
	        Año: "2024"
	      },
	      {
	        id: 33,
	        nombre: "Lisa Frankenstein",
	        imagen: "../../Imagenes_Pelis/Lisa.Frankenstein.2024.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/lisa_frankentein_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/lisa_frankentein_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6fac1415-642e-486a-b55f-a0e55a0686db",
	        Generos: ["Comedia", "Terror"],
	        Año: "2024"
	      },

	      {
	        id: 887,
	        nombre: "Al rescate de Fondo de Bikini: La película de Arenita Mejillas",
	        imagen: "../../Assets/Imagenespeliculas/al_rescate_fondo_de_bikini.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/amigos_imaginarios_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/amigos_imaginarios_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5232f595-cc5e-4812-8871-aa4d2519ce1a",
	        Generos: ["Comedia", "Aventura"],
	        Año: "2024"
	      },

	      {
	        id: 34,
	        nombre: "Amigos Imaginarios",
	        imagen: "../../Imagenes_Pelis/Amigos.imaginarios.(2024).webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/amigos_imaginarios_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/amigos_imaginarios_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7b9a8340-50a7-48ba-ab5c-712325bce518",
	        Generos: ["Comedia", "Aventura"],
	        Año: "2024"
	      },
	      {
	        id: 35,
	        nombre: "Furiosa De la Saga Mad.Max (2024)",
	        imagen: "../../Imagenes_Pelis/Furiosa.De.la.Saga.Mad.Max.(2024).webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/furiosa_de_la_Saga_mad_max_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/furiosa_de_la_Saga_mad_max_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5a9f0d91-d45e-47f5-b130-18c80d54a0dc",
	        Generos: ["Acción", "Aventura"],
	        Año: "2024"
	      },
	      {
	        id: 36,
	        nombre: "Los descendientes 4",
	        imagen: "../../Imagenes_Pelis/decendientes2024.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/descendientes_4_2024-small.webp",
	        imagen_tv:
	          "../../Assets/Imagenespeliculas/tv/descendientes_4_2024-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e007c1fc-6c0c-4857-83fb-a773a5633f82",
	        Generos: ["Musical", "Animación"],
	        Año: "2024"
	      },
	      {
	        id: 37,
	        nombre: "Los descendientes 3",
	        imagen: "../../Assets/Imagenespeliculas/decendientes_3.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/decendientes_3-small.webp",
	        imagen_tv: "../../Assets/Imagenespeliculas/tv/decendientes_3-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8085d69e-0137-4602-8573-bb4bdfe3bb7d",
	        Generos: ["Musical", "Animación"],
	        Año: "2019"
	      },
	      {
	        id: 38,
	        nombre: "Los descendientes 2",
	        imagen: "../../Assets/Imagenespeliculas/descendientes_2.webp",
	        imagen_small:
	          "../../Assets/Imagenespeliculas/small/descendientes_2-small.webp",
	        imagen_tv: "../../Assets/Imagenespeliculas/tv/descendientes_2-tv.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bea964f4-32f9-4dc0-8c23-8fb9ed5be859",
	        Generos: ["Musical", "Animación"],
	        Año:"2017"
	      },
	      {
	        id: 39,
	        nombre: "Los descendientes 1",
	        imagen: "../../Assets/Imagenespeliculas/decendientes1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2c83d9e8-bfd5-46ca-a35a-466082defa3b",
	        Generos: ["Musical", "Animación"],
	        Año: "2015"
	      },
	      {
	        id: 40,
	        nombre: "Godzilla y Kong: El nuevo imperio",
	        imagen: "../../Imagenes_Pelis/godzilla2024.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/257368/54593201-b492-4b5b-8f44-85f8c39e80c0",
	        Generos: ["Acción", "Ciencia ficción"],
	        Año: "2024"
	      },
	      {
	        id: 41,
	        nombre: "Godzilla vs Kong",
	        imagen: "../../Imagenes_Pelis/Godzilla.vs.Kong.2021.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bf1c5a19-5b66-43d6-99ef-c1552075506d",
	        Generos: ["Acción", "Ciencia ficción"],
	        Año: "2021"
	      },
	      {
	        id: 42,
	        nombre: "Godzilla : El Rey de Los Monstruos",
	        imagen: "../../Assets/Imagenespeliculas/godzilla2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5b083208-249b-4b36-abaa-6e8935b3aae5",
	        Generos: ["Acción", "Ciencia ficción"],
	        Año: "2019"
	      },
	      {
	        id: 43,
	        nombre: "Godzilla",
	        imagen: "../../Imagenes_Pelis/godzilla2014.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/adbfceed-a20c-4678-8bfe-482fad5db9a6",
	        Generos: ["Acción", "Ciencia ficción"],
	        Año: "2014"
	      },
	      {
	        id: 44,
	        nombre: "Mi villano Favorito 4",
	        imagen: "../../Imagenes_Pelis/mivillanofavorito4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/05ceee44-f248-45b6-ac3d-84b53cfa057f",
	        Generos: ["Animación", "Comedia"],
	        Año: "2024"
	      },
	      {
	        id: 45,
	        nombre: "Garfield",
	        imagen: "../../Imagenes_Pelis/garfield2024.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/72498cd5-85d4-4a28-b7b0-b29f5eff59ca",
	        Generos: ["Animación", "Comedia"],
	        Año: "2024"
	      },
	      {
	        id: 576,
	        nombre: "El Reino del planeta de los Simios",
	        imagen:
	          "../../Imagenes_Pelis/El_reino_del_planeta_de_los_simios-663256597-large.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9f2e36a7-f127-42da-8c3e-4898c278902a",
	        Generos: ["Acción", "Ciencia ficción"],
	        Año: "2024"
	      },
	      {
	        id: 577,
	        nombre: "El planeta de los Simios: La guerra",
	        imagen:
	          "../../Assets/Imagenespeliculas/el_planeta_de_los_simios_2017.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d45029f2-f89c-4b62-a2f6-aee8a1fda168",
	        Generos: ["Drama", "Ciencia ficción", "Guerra"],
	        Año: "2017"
	      },
	      {
	        id: 584,
	        nombre: "El amanecer del planeta de los simios",
	        imagen:
	          "../../Assets/Imagenespeliculas/El amanecer del planeta de los simios.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b2c6d46e-af24-4bf8-b35e-d648990187e4",
	        Generos: ["Ciencia ficción,Acción,Drama,Suspense"],
	        Año: "2014"
	      },
	      {
	        id: 784,
	        nombre: "El planeta de los simios: (R)evolución",
	        imagen:
	          "../../Assets/Imagenespeliculas/El_planeta_de_los_simios_(R)evolución.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1d8d2c0a-e54f-43a6-bcd7-0fba6b1c773a",
	        Generos: ["Ciencia ficción,Acción,Drama,Suspense"],
	        Año: "2011"
	      },
	      {
	        id: 46,
	        nombre: "Bad Boys 4",
	        imagen: "../../Imagenes_Pelis/bab_boys_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bcd4abc1-cb2a-435d-99fe-1d1eda3716ad",
	        Generos: ["Acción", "Comedia"],
	        Año: "2024"
	      },
	      {
	        id: 47,
	        nombre: "John Wick 4",
	        imagen: "../../Assets/Imagenespeliculas/john_wick_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/33b1071d-75a6-486b-99e8-966b42c6a597",
	        Generos: ["Acción", "Suspenso"],
	        Año: "2023"
	      },
	      {
	        id: 1400,
	        nombre: "John Wick 3",
	        imagen: "../../Imagenes_Pelis/jhonwick3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6edcd33e-4b52-4ea1-b9c1-647347a89f79",
	        Generos: ["Acción", "Suspenso"],
	        Año:"2019"
	      },
	      {
	        id: 1401,
	        nombre: "John Wick 2",
	        imagen: "../../Imagenes_Pelis/jhonwick2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6541c5d9-9b11-472b-b902-527e7a51a08f",
	        Generos: ["Acción", "Suspenso"],
	        Año: "2017"
	      },
	      {
	        id: 1402,
	        nombre: "John Wick 1",
	        imagen: "../../Imagenes_Pelis/jhonwick1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/63af36d0-f48a-46c0-b8d3-f4e2f1b4991e",
	        Generos: ["Acción", "Suspenso"],
	        Año:"2014"
	      },

	      {
	        id: 48,
	        nombre: "Sobrevivientes después del terremoto",
	        imagen:
	          "../../Imagenes_Pelis/Sobrevivientes.después.del.terremoto.2023 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/24109fc9-c15f-4500-bfd0-431acccebd37",
	        Generos: ["Drama", "Acción"],
	        Año: "2023"
	      },
	      {
	        id: 49,
	        nombre: "La Sirenita",
	        imagen: "../../Imagenes_Pelis/lasirenitapelicula.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e56995dd-071d-4c56-be26-6d8f150f872b",
	        Generos: ["Animación", "Aventura"],
	        Año:"2023"
	      },

	      {
	        id: 50,
	        nombre: "Culpa mía 2023",
	        imagen: "../../Imagenes_Pelis/culpamía (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b99bc74a-27b1-4b8d-a20f-10c7d32fdf27",
	        Generos: ["Drama", "Romance"],
	        Año: "2023"
	      },
	      {
	        id: 430,
	        nombre: "After Para Siempre",
	        imagen: "../../Imagenes_Pelis/afterparasiempre2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d0b29c43-8b80-43f0-95ae-f32e967b04f7",
	        Generos: ["Romance", "Drama"],
	        Año: "2023"
	      },
	      {
	        id: 522,
	        nombre: "After Amor infinito",
	        imagen: "../../Assets/Imagenespeliculas/After_amor_infinito_2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e63f9cfd-f331-4e87-ae19-92bd897ec0b3",
	        Generos: ["Romance", "Drama"],
	        Año: "2022"
	      },
	      {
	        id: 622,
	        nombre: "After: Almas Perdidas",
	        imagen: "../../Assets/Imagenespeliculas/After_Almas_Perdidas.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b7744b82-766f-4655-baaa-d6a47f0be130",
	        Generos: ["Romance", "Drama"],
	        Año: "2021"
	      },
	      {
	        id: 51,
	        nombre: "Violet y Finch",
	        imagen: "../../Imagenes_Pelis/violet y finch.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/123855d7-6d89-49b6-b170-2949f422979e",
	        Generos: ["Drama", "Romance"],
	        Año:"2020"
	      },

	      {
	        id: 52,
	        nombre: "Intensamente 2",
	        imagen: "../../Imagenes_Pelis/intensamente2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1d9942dc-bdfb-44ad-b490-b64b026d82a8",
	        Generos: ["Animación", "Aventura", "Comedia"],
	        Año: "2024"
	      },

	      {
	        id: 53,
	        nombre: "Intensa-Mente",
	        imagen: "../../Imagenes_Pelis/intensamente1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8184b6a8-176e-4fed-8338-df7d2c136762",
	        Generos: ["Animación", "Aventura", "Comedia"],
	        Año: "2015"
	      },
	      {
	        id: 521,
	        nombre: "Peter Pan y Wendy",
	        imagen: "../../Assets/Imagenespeliculas/peter_pan_y_wendy_2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8dc9d36e-3a98-4231-9624-42d06fe962c2",
	        Generos: ["Animación", "Aventura", "Comedia"],
	        Año: "2023"
	      },
	      {
	        id: 525,
	        nombre: "Wish: El poder de los deseos 2023",
	        imagen:
	          "../../Assets/Imagenespeliculas/wish_el_poder_de_los_deseos_2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/0f02169d-cc25-41c6-8ef1-d05c33dbb0ef",
	        Generos: ["Animación", "Aventura", "Fantasía", "Musical"],
	        Año: "2023"
	      },

	      {
	        id: 54,
	        nombre: "Kung Fu Panda 4",
	        imagen: "../../Imagenes_Pelis/kunfupanda4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d70e03ea-9e04-4cea-817c-b40da14218eb",
	        Generos: ["Animación", "Aventura", "Acción", "Comedia"],
	        Año: "2024"
	      },
	      {
	        id: 55,
	        nombre: "Kung Fu Panda 3",
	        imagen: "../../Imagenes_Pelis/kunfupanda3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d25d1dec-52bb-46bf-9930-2e39d5d65102",
	        Generos: ["Animación", "Aventura", "Acción", "Comedia"],
	        Año: "2016"
	      },
	      {
	        id: 56,
	        nombre: "Kung Fu Panda 2",
	        imagen: "../../Imagenes_Pelis/kunfupanda2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c0561561-e978-4037-82ba-c3be48ed152d",
	        Generos: ["Animación", "Aventura", "Acción", "Comedia"],
	        Año: "2011"
	      },
	      {
	        id: 57,
	        nombre: "Kung Fu Panda",
	        imagen: "../../Imagenes_Pelis/kunfupanda1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ef59b4d8-2ca2-40a6-a7ac-29c2f6dbbe04",
	        Generos: ["Animación", "Aventura", "Acción", "Comedia"],
	        Año: "2008"
	      },
	      {
	        id: 58,
	        nombre: "Elementos",
	        imagen: "../../Imagenes_Pelis/elementos2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4d600fa1-6686-4fa1-a6f4-71f327614277",
	        Generos: ["Animación", "Aventura", "Comedia"],
	        Año: "2023"
	      },
	      {
	        id: 523,
	        nombre: "Miraculous: - La Película",
	        imagen:
	          "../../Assets/Imagenespeliculas/Las_aventuras_de_Ladybug_(2023).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b99edd5b-a5c7-4f57-974c-e84a72e13b31",
	        Generos: ["Animación", "Aventura", "Fantasía"],
	        Año: "2023"
	      },

	      {
	        id: 59,
	        nombre: "Evil Dead: El despertar",
	        imagen: "../../Assets/Imagenespeliculas/evildead_2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4eee20db-87c6-4e9f-b09f-a627e5207ede",
	        Generos: ["Terror", "Suspense"],
	        Año: "2023"
	      },
	      {
	        id: 60,
	        nombre: "Gato con Botas: El último deseo",
	        imagen: "../../Imagenes_Pelis/gatoconbotas2022 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a2854722-465e-4ae1-93e7-a48567e6e351",
	        Generos: ["Animación", "Aventura", "Comedia"],
	        Año: "2022"
	      },
	      {
	        id: 682,
	        nombre: "Gato con botas",
	        imagen: "../../Assets/Imagenespeliculas/Gato_con_botas.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4528301a-2f1f-4fb1-b14c-61399ae94ba7",
	        Generos: ["Animación,Familia,Fantasía,Aventura,Comedia"],
	        Año: "2011"
	      },
	      {
	        id: 61,
	        nombre: "WifeLike",
	        imagen: "../../Assets/Imagenespeliculas/Wifelike_2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c7d4eeb0-7bfb-4f5c-aa58-a28e85f05012",
	        Generos: ["Ciencia Ficción", "Thriller"],
	        Año: "2022"
	      },

	      {
	        id: 62,
	        nombre: "Your Name",
	        imagen: "../../Imagenes_Pelis/Your_Name-753183494-large.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9d135a79-a9e8-488d-9c33-8e247c302dd0",
	        Generos: ["Animación", "Drama", "Romance"],
	        Año: "2016"
	      },
	      {
	        id: 63,
	        nombre: "El último conjuro",
	        imagen: "../../Imagenes_Pelis/ELULTIMOCONJURO.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f101512d-4cff-460a-a8cc-82e4b9aadff1",
	        Generos: ["Terror", "Suspense"],
	        Año: "2023"
	      },
	      {
	        id: 64,
	        nombre: "El Conjuro 3: El diablo me obligó a hacerlo",
	        imagen: "../../Assets/Imagenespeliculas/el_conjuro_3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7bdcab42-23aa-459b-bfdc-fb63277ac412",
	        Generos: ["Terror", "Suspense"],
	        Año: "2021"
	      },

	      {
	        id: 65,
	        nombre: "Depredador: La presa",
	        imagen: "../../Imagenes_Pelis/depredadorlapresa2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/3e9fccb5-3d9a-42a3-ada3-fe6628c4b280",
	        Generos: ["Ciencia Ficción", "Acción", "Suspense"],
	        Año: "2022"
	      },
	      {
	        id: 66,
	        nombre: "El Depredador 2018",
	        imagen: "../../Assets/Imagenespeliculas/depredador_2018.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/742f37f0-8473-42fe-885f-fa3f11faeeac",
	        Generos: ["Ciencia Ficción", "Acción", "Suspense"],
	        Año: "2018"
	      },
	      {
	        id: 67,
	        nombre: "La Noche del Demonio: La puerta Roja",
	        imagen: "../../Imagenes_Pelis/Insidious_La_puerta_roja.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b35ac330-4eb4-40aa-86fe-c700535f0501",
	        Generos: ["Terror", "Suspense"],
	        Año: "2023"
	      },
	      {
	        id: 68,
	        nombre: "Aquaman y el reino perdido",
	        imagen: "../../Imagenes_Pelis/aquaman2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e4403f77-c5ef-4e67-9638-87fa2bcf6a45",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	        Año: "2023"
	      },
	      {
	        id: 69,
	        nombre: "Aquaman 1",
	        imagen: "../../Imagenes_Pelis/aquaman1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b12ab136-94cc-47cc-8fc1-dc5be027a729",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	        Año: "2018"
	      },
	      {
	        id: 70,
	        nombre: "La monja II",
	        imagen: "../../Imagenes_Pelis/cartel la monja 2.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/14610fed-2221-4058-ab24-72815a8473ee",
	        Generos: ["Terror", "Suspense"],
	        Año: "2023"
	      },
	      {
	        id: 71,
	        nombre: "Guardianes de la Galaxia volumen 3",
	        imagen: "../../Imagenes_Pelis/Guardians.Of.The.Galaxy.Vol.3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/37b70bc0-c1d0-4a35-af0d-ee55a445f0f2",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción", "Comedia"],
	        Año: "2023"
	      },
	      {
	        id: 72,
	        nombre: "Guardianes de la Galaxia 2 (Guardians of the Galaxy Vol. 2)",
	        imagen: "../../Assets/Imagenespeliculas/guardines_de_la_galaxia_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b1ff9255-cf9b-4fd0-a775-facf48bb30d5",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción", "Comedia"],
	         Año: "2017"
	      },
	      {
	        id: 73,
	        nombre: "Guardianes de la galaxia",
	        imagen: "../../Assets/Imagenespeliculas/guardines_de_la_galaxia_1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a9981311-1a62-4b33-8f03-49671f8d8aca",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción", "Comedia"],
	        Año: "2014"
	      },
	      {
	        id: 74,
	        nombre: "Ant-Man and the Wasp: Quantumania",
	        imagen: "../../Imagenes_Pelis/atman3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e331dc46-cf09-47e8-809b-692eab8bf55f",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	        Año: "2023"
	      },
	      {
	        id: 75,
	        nombre: "Ant-Man 2: La Avispa",
	        imagen: "../../Imagenes_Pelis/atman2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/efc70612-3bba-47fc-a7be-4e7d3f824d10",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	        Año: "2018"
	      },
	      {
	        id: 76,
	        nombre: "Ant-Man: El hombre Hormiga",
	        imagen: "../../Imagenes_Pelis/atman.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/379422c9-3ae0-417e-8fb3-14ad18ba3b07",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	        Año: "2015"
	      },
	      {
	        id: 77,
	        nombre: "Super Mario Bros. La película",
	        imagen: "../../Imagenes_Pelis/supermariobros2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5f063302-fed1-4df1-96f0-9b06bfe1a600",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	        Año: "2023"
	      },
	      {
	        id: 78,
	        nombre: "Oppenheimer",
	        imagen: "../../Imagenes_Pelis/Oppenheimer.2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b140ec67-a922-433a-8b3e-aac14e5008b7",
	        Generos: ["Biografía", "Drama", "Histórico"],
	        Año:"2023"
	      },
	      {
	        id: 79,
	        nombre: "Finch",
	        imagen: "../../Imagenes_Pelis/Finch (2021) (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f5e6fa06-534c-4d58-a654-0204d3d89b80",
	        Generos: ["Drama", "Ciencia Ficción", "Aventura"],
	        Año: "2021"
	      },

	      {
	        id: 80,
	        nombre: "Barbie",
	        imagen: "../../Imagenes_Pelis/barbie.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ddea9f5d-cb23-417b-9586-56ad8dcbc8b2",
	        Generos: ["Comedia", "Fantasía", "Familia"],
	        Año: "2023"
	      },
	      {
	        id: 81,
	        nombre: "Wonka",
	        imagen: "../../Imagenes_Pelis/wonka.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6f497905-c7ca-4edf-b937-471e29e8c737",
	        Generos: ["Aventura", "Familia", "Fantástico"],
	        Año: "2023"
	      },
	      {
	        id: 82,
	        nombre: "Dora y La Ciudad Perdida",
	        imagen: "../../Imagenes_Pelis/doralaciudadperdida (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2e3c3da2-f719-45c6-9747-18f06812bb8d",
	        Generos: ["Aventura", "Comedia", "Familiar"],
	        Año: "2019"
	      },

	      {
	        id: 83,
	        nombre: "Encanto(2021)",
	        imagen: "../../Imagenes_Pelis/encanto2021.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d5ee03f4-2d95-4fba-a58d-19467c773432",
	        Generos: ["Animación", "Fantasía", "Familia"],
	      },
	      {
	        id: 84,
	        nombre: "Cenicienta (2015)",
	        imagen: "../../Imagenes_Pelis/cenicienta.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e769eda7-c89a-4c58-a825-6f87e901d443",
	        Generos: ["Fantasía", "Aventura", "Familia"],
	      },
	      {
	        id: 85,
	        nombre: "Red 2022",
	        imagen: "../../Assets/Imagenespeliculas/red2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/df0dc4ed-04c7-41c0-b668-92b4fe22fcb0",
	        Generos: ["Animación", "Comedia", "Familiar"],
	      },
	      {
	        id: 450,
	        nombre: "El viaje de Chihiro",
	        imagen: "../../Imagenes_Pelis/elviajedechiiro (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e4a625d4-6ac6-47c8-8af4-8e253ab017b5",
	        Generos: ["Animación", "Fantasía", "Aventura"],
	      },
	      {
	        id: 470,
	        nombre: "KiKi Entregas a Domicilio",
	        imagen: "../../Imagenes_Pelis/KIKI_entregas_a_domicilio.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1b8e8c89-4a65-4dcb-8e0c-736a71781ae3",
	        Generos: ["Animación", "Fantasía", "Familia"],
	      },
	      {
	        id: 86,
	        nombre: "Raya El Ultimo Dragon",
	        imagen: "../../Assets/Imagenespeliculas/raya_el_ultimo_dragon.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4a1f74e2-fb96-421a-b781-b7832c6b0f04",
	        Generos: ["Animación", "Aventura", "Fantasía"],
	      },
	      {
	        id: 1410,
	        nombre: "Ferdinand 2017",
	        imagen: "../../Imagenes_Pelis/Ferdinand2017.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a9784aca-1ce7-4891-9451-741282c8d17a",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 1411,
	        nombre: "Pinocho 2022",
	        imagen: "../../Imagenes_Pelis/Pinocho-2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d225fa66-6a60-4456-8c4f-e12aaa7016fa",
	        Generos: ["Animación", "Aventura", "Fantasía"],
	      },
	      {
	        id: 1412,
	        nombre: "Wifi Ralph 2018",
	        imagen: "../../Imagenes_Pelis/Wifi.Ralph.2018.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6ce8bf00-5ed9-450a-b6e6-699382ed88a3",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 1413,
	        nombre: "Alicia en el país de las maravillas",
	        imagen:
	          "../../Imagenes_Pelis/Alicia.en.el.país.de.las.maravillas.2010 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2d473b25-f35e-4982-8f8b-878a27f487fc",
	        Generos: ["Aventura", "Fantasía", "Familiar"],
	      },
	      {
	        id: 1414,
	        nombre: "Hotel Transilvania 2",
	        imagen: "../../Imagenes_Pelis/Hotel.Transilvania.2.2015.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1ed28543-c796-4d56-9788-c07ff6389bc5",
	        Generos: ["Animación", "Comedia", "Familiar"],
	      },
	      {
	        id: 528,
	        nombre: "Hotel Transilvania 1",
	        imagen: "../../Assets/Imagenespeliculas/hoter_transilvania_1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a3042f1a-5cca-4533-b2de-ab93608eabf9",
	        Generos: ["Animación", "Comedia", "Familiar"],
	      },
	      {
	        id: 1415,
	        nombre: "Que viaje con papa 2022",
	        imagen: "../../Imagenes_Pelis/Que.viaje.con.papa.2022.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/903acd5b-cfc7-4659-9ac2-54f9d1200994",
	        Generos: ["Comedia", "Aventura", "Familiar"],
	      },

	      {
	        id: 87,
	        nombre: "La Bella y la Bestia (2017)",
	        imagen: "../../Imagenes_Pelis/labellaylabestia2017.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/274b6942-eae4-4a30-9f5b-22dbc39b48e3",
	        Generos: ["Aventura", "Fantasía", "Romance"],
	      },
	      {
	        id: 88,
	        nombre: "El Rey Leon (2019)",
	        imagen: "../../Imagenes_Pelis/elreyleon2019.jpeg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d9986397-88ce-4600-9cd1-348828e00901",
	        Generos: ["Animación", "Aventura", "Drama"],
	      },
	      {
	        id: 89,
	        nombre: "Los Increibles 2",
	        imagen: "../../Imagenes_Pelis/losincreibles2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ab797c23-913d-40e8-9c06-5b524e51a57d",
	        Generos: ["Animación", "Acción", "Aventura"],
	      },
	      {
	        id: 90,
	        nombre: "Los Increibles 1",
	        imagen: "../../Imagenes_Pelis/losincreibles1 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a0548cfe-6e2e-40a8-9a4f-39a3afbef432",
	        Generos: ["Animación", "Acción", "Aventura"],
	      },
	      {
	        id: 91,
	        nombre: "Avatar 2",
	        imagen: "../../Imagenes_Pelis/avatar2-poste2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5191d7a8-5aaf-4421-996e-df37bf8070b5",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción", "Fantasía"],
	      },
	      {
	        id: 92,
	        nombre: "Avatar 1",
	        imagen: "../../Imagenes_Pelis/avatar1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/26592292-6e2e-4091-8e63-710fb845c8ce",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción", "Fantasía"],
	      },
	      {
	        id: 93,
	        nombre: "Eternals",
	        imagen: "../../Assets/Imagenespeliculas/eternals-img2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/aa9b5a8f-8ec1-4ff2-896f-4050d5892ff2",
	        Generos: ["Acción", "Aventura", "Drama", "Fantasía", "Ciencia Ficción"],
	      },
	      {
	        id: 94,
	        nombre: "Shazam 2",
	        imagen: "../../Imagenes_Pelis/aShazam2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2919fead-ff5a-43ec-9373-6f817f7691c8",
	        Generos: ["Acción", "Aventura", "Fantasía", "Comedia"],
	      },
	      {
	        id: 95,
	        nombre: "Shazam 1",
	        imagen: "../../Imagenes_Pelis/shazan1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a452b612-c55f-4e3e-a5f4-30e8c551bb14",
	        Generos: ["Acción", "Aventura", "Fantasía", "Comedia"],
	      },
	      {
	        id: 96,
	        nombre: "Black Adam",
	        imagen: "../../Imagenes_Pelis/blackadam2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ed8c2e41-a4b3-4487-90c7-1bf11ef71490",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 97,
	        nombre: "El Hobbit Un Viaje Inesperado (2012)",
	        imagen: "../../Assets/Imagenespeliculas/hobbit_viaje_inesperado.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6372f8c1-06d4-45db-9aa2-4c184a3aa442",
	        Generos: ["Aventura", "Fantasía", "Acción"],
	      },
	      {
	        id: 98,
	        nombre: "El Hobbit La desolación de Smaug (2013)",
	        imagen: "../../Assets/Imagenespeliculas/hobbit_desolacion.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/374c6ec2-aa0a-43f2-969e-3959d9c6b49d",
	        Generos: ["Aventura", "Fantasía", "Acción"],
	      },
	      {
	        id: 99,
	        nombre: "El hobbit: La batalla de los cinco ejércitos (2014)",
	        imagen: "../../Imagenes_Pelis/elhobbit3 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1f6c6bdd-962d-453b-92c0-1ae6049e0a67",
	        Generos: ["Aventura", "Fantasía", "Acción"],
	      },
	      {
	        id: 100,
	        nombre: "El señor de los anillos",
	        imagen:
	          "../../Imagenes_Pelis/El_seanor_de_los_anillos_La_comunidad_del_anillo.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/374c6ec2-aa0a-43f2-969e-3959d9c6b49d",
	        Generos: ["Aventura", "Fantasía", "Acción"],
	      },
	      {
	        id: 101,
	        nombre: "El señor de los anillos 2",
	        imagen:
	          "../../Imagenes_Pelis/el señor de los anillos 2 las dos torres.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/606f3bbe-2d4e-4286-89e9-64dd3020e06e",
	        Generos: ["Aventura", "Fantasía", "Acción"],
	      },
	      {
	        id: 102,
	        nombre: "El señor de los anillos 3",
	        imagen:
	          "../../Assets/Imagenespeliculas/el_señor_de_los_Anillos_retorno_del_rey.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dd9d3ab1-8cef-4111-a902-45a5a26b2b0f",
	        Generos: ["Aventura", "Fantasía", "Acción"],
	      },
	      {
	        id: 103,
	        nombre: "Ponyo",
	        imagen: "../../Imagenes_Pelis/ponyo.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/303a8128-668d-4fff-9ad1-7e33b56bd7ef",
	        Generos: ["Animación", "Aventura", "Fantasía"],
	      },
	      {
	        id: 104,
	        nombre: "Free Guy 2021",
	        imagen: "../../Assets/Imagenespeliculas/free_guy_2021.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/062367c8-3720-44a9-b69e-a48c3a0ad960",
	        Generos: ["Acción", "Comedia", "Ciencia ficción"],
	      },
	      {
	        id: 105,
	        nombre: "Animales Fantasticos 2016",
	        imagen: "../../Imagenes_Pelis/animalesfantasticos1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/735e17de-cb14-4b8a-b997-7ff31e5a3c09",
	        Generos: ["Aventura", "Fantasía"],
	      },
	      {
	        id: 106,
	        nombre: "Harry potter 1",
	        imagen: "../../Imagenes_Pelis/harrypoter1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/3d6462c2-ea4a-4213-8942-ee465332ea12",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },
	      {
	        id: 107,
	        nombre: "Harry potter 2",
	        imagen: "../../Imagenes_Pelis/harrypotter2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d37b2219-95db-4309-b91f-f91c00b88a65",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },
	      {
	        id: 108,
	        nombre: "Harry potter 3",
	        imagen: "../../Imagenes_Pelis/harrypoter3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f2521270-b920-4395-92df-aad4c94ec84d",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },
	      {
	        id: 109,
	        nombre: "Harry potter 4",
	        imagen: "../../Imagenes_Pelis/harrypoter4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/465ec713-18a7-4093-8a8d-f1e886286227",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },
	      {
	        id: 110,
	        nombre: "Harry potter 5",
	        imagen: "../../Assets/Imagenespeliculas/harry_potter_5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dd5978ac-8973-45da-ae49-7af3c1532ec1",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },
	      {
	        id: 111,
	        nombre: "Harry potter 6",
	        imagen: "../../Imagenes_Pelis/harrypotter6.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dee102f2-041e-4d47-8f70-86220c8a6771",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },
	      {
	        id: 112,
	        nombre: "Harry potter 7",
	        imagen: "../../Imagenes_Pelis/harrypotter7.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/00800159-1dfa-40f5-919b-2649efc36399",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },
	      {
	        id: 113,
	        nombre: "Harry potter 8",
	        imagen: "../../Imagenes_Pelis/harrypotter8.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6cbcce39-23aa-42e1-870e-ca45b99041d2",
	        Generos: ["Aventura", "Fantasía", "Familia"],
	      },

	      {
	        id: 114,
	        nombre: "Un lugar en Silencio (2018)",
	        imagen: "../../Assets/Imagenespeliculas/un_lugar_en_silencio_2018.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/0a4592ee-1409-4a6c-898c-3fe37e181f59",
	        Generos: ["Suspense", "Terror"],
	      },
	      {
	        id: 115,
	        nombre: "Un lugar en silencio 2",
	        imagen: "../../Imagenes_Pelis/lugarsilencio2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/951256b5-a352-4708-9f8e-6587a4c87a3f",
	        Generos: ["Suspense", "Terror"],
	      },
	      {
	        id: 116,
	        nombre: "Rapidos y Furiosos 10",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos10.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/29b72ab8-59ff-4f11-a20b-1f9930d57419",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 117,
	        nombre: "Rapidos y Furiosos 9",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos9 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a4c8912c-ac28-4455-91c7-45481c09940d",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 118,
	        nombre: "Rapidos y Furiosos 8",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos8.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9ea87955-4643-402f-953e-543628f6eb78",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 119,
	        nombre: "Rapidos y Furiosos 7",
	        imagen: "../../Imagenes_Pelis/rapidosyfuroisos7.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c2cb6886-74e3-401c-b7c7-370d8cfb73d0",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 120,
	        nombre: "Rapidos y Furiosos 6",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos6.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2b4fac3c-05ce-4b76-a97b-a9ab1e2d745e",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 121,
	        nombre: "Rapidos y Furiosos 5",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/57e44ebe-ed30-4845-9a89-ea9f14363a57",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 122,
	        nombre: "Rapidos y Furiosos 4",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b8406af0-b45f-468f-8fcb-e6c8c3b572c0",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 123,
	        nombre: "Rapidos y Furiosos 3",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos3.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fc427100-74a3-4605-954f-d8225091d140",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 124,
	        nombre: "Rapidos y Furiosos 2",
	        imagen: "../../Assets/Imagenespeliculas/rapidos_y_furiosos2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8f30f955-d0a2-465e-9d45-0fb09db271be",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 125,
	        nombre: "Rapidos y Furiosos 1",
	        imagen: "../../Imagenes_Pelis/rapidosyfuriosos1.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bc51948d-a3f1-4ae5-8395-87f7f03a13dc",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 126,
	        nombre: "Jurassic world :Dominion 2022",
	        imagen: "../../Imagenes_Pelis/jurassiwork2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4777dbe2-2fc8-43fb-aafc-b75c17fcbba6",
	        Generos: ["Ciencia ficción", "Aventura"],
	      },
	      {
	        id: 127,
	        nombre: "Jurassic world :El Reino Caido 2018",
	        imagen: "../../Imagenes_Pelis/jurasiwork2018.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/27773619-c226-416f-9608-75bd32eed3a9",
	        Generos: ["Ciencia ficción", "Aventura"],
	      },
	      {
	        id: 128,
	        nombre: "Jurassic world 2015",
	        imagen: "../../Imagenes_Pelis/jurasiwork2015.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/90b020dd-bbd3-4ad4-b816-4f2b6b5c3eec",
	        Generos: ["Ciencia ficción", "Aventura"],
	      },
	      {
	        id: 129,
	        nombre: "Parque Jurasico 3",
	        imagen: "../../Imagenes_Pelis/jurasic3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/82459a5c-32f2-45a2-ade4-27152d005cec",
	        Generos: ["Ciencia ficción", "Aventura"],
	      },
	      {
	        id: 130,
	        nombre: "Parque Jurasico 2",
	        imagen: "../../Imagenes_Pelis/jurasic2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/937dfbe9-57a3-45c3-8066-56788cb3616a",
	        Generos: ["Ciencia ficción", "Aventura"],
	      },
	      {
	        id: 131,
	        nombre: "Parque Jurasico 1",
	        imagen: "../../Assets/Imagenespeliculas/jurassic1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8a215a08-529b-4016-9131-2759fc613b07",
	        Generos: ["Ciencia ficción", "Aventura"],
	      },
	      {
	        id: 132,
	        nombre: "Shreck 2010",
	        imagen: "../../Imagenes_Pelis/shreck2010.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/92c597fa-8375-405c-86cf-e89592f1bad4",
	        Generos: ["Animación", "Comedia"],
	      },
	      {
	        id: 133,
	        nombre: "Shreck 3 2007",
	        imagen: "../../Imagenes_Pelis/shreck2007.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a5cb492f-4f5a-4940-a92e-d29768a19540",
	        Generos: ["Animación", "Comedia"],
	      },
	      {
	        id: 134,
	        nombre: "Shreck 2 2004",
	        imagen: "../../Imagenes_Pelis/shreck2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9cc14bcd-8df3-4541-aeb5-c951364a9286",
	        Generos: ["Animación", "Comedia"],
	      },
	      {
	        id: 135,
	        nombre: "Shreck 1 (2001)",
	        imagen: "../../Imagenes_Pelis/shreck1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/3f09f079-a9db-4a94-ade8-a40a1b3759ff",
	        Generos: ["Animación", "Comedia"],
	      },
	      {
	        id: 136,
	        nombre: "Doctor Strange en el multiverso de la locura",
	        imagen: "../../Imagenes_Pelis/doctorstrange2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2926db3a-1474-4fcb-bfb5-334223c79484",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 137,
	        nombre: "Doctor Strange 1",
	        imagen: "../../Imagenes_Pelis/doctorstrange1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1c3bd264-b1c7-4bbb-9b21-cd27d7377722",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 138,
	        nombre: "Sonic 2",
	        imagen: "../../Imagenes_Pelis/sonic2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/90b9498d-16da-47af-a68c-fec569eb6cf7",
	        Generos: ["Acción", "Aventura", "Comedia"],
	      },
	      {
	        id: 139,
	        nombre: "Sonic 1",
	        imagen: "../../Imagenes_Pelis/sonic1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c78437a7-be3e-4621-88e3-17c5b57d640e",
	        Generos: ["Acción", "Aventura", "Comedia"],
	      },
	      {
	        id: 140,
	        nombre: "Drepredador 1",
	        imagen: "../../Imagenes_Pelis/depredador1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/0014b830-146e-47ba-9e29-969aa5b10342",
	        Generos: ["Acción", "Ciencia Ficción", "Suspense"],
	      },

	      {
	        id: 141,
	        nombre: "Drepredador 2",
	        imagen: "../../Imagenes_Pelis/depredador2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4ba25763-4036-4258-b6b6-33895880bbe7",
	        Generos: ["Acción", "Ciencia Ficción", "Suspense"],
	      },
	      {
	        id: 142,
	        nombre: "Depredadores",
	        imagen: "../../Imagenes_Pelis/depredadores.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/223d9e16-6d3b-4767-88d4-28f5f864233d",
	        Generos: ["Acción", "Ciencia Ficción", "Suspense"],
	      },
	      {
	        id: 143,
	        nombre: "Alien vs Depredador 1",
	        imagen: "../../Imagenes_Pelis/alien_vs_depredador1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e7bd0db3-a4dd-46f6-b4b6-e1904aa533ae",
	        Generos: ["Acción", "Ciencia Ficción", "Horror"],
	      },
	      {
	        id: 144,
	        nombre: "Alien vs Depredador 2",
	        imagen: "../../Imagenes_Pelis/Aliens_vs_Predator_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/37c66b5f-6682-4bc4-a274-772327d7b35c",
	        Generos: ["Acción", "Ciencia Ficción", "Horror"],
	      },
	      {
	        id: 145,
	        nombre: "Destino Final 1",
	        imagen: "../../Imagenes_Pelis/destinofinal1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/23939ba9-2802-41ad-bf2e-ae9440c82cbd",
	        Generos: ["Horror", "Suspense"],
	      },
	      {
	        id: 146,
	        nombre: "Destino Final 2",
	        imagen: "../../Imagenes_Pelis/destinofinal2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c6df3b83-a02c-4c72-bad5-14912ed06c08",
	        Generos: ["Horror", "Suspense"],
	      },
	      {
	        id: 147,
	        nombre: "Destino Final 3",
	        imagen: "../../Imagenes_Pelis/destinofinal3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7d046ca7-485f-4bc4-a5b6-b7f235e56a42",
	        Generos: ["Horror", "Suspense"],
	      },
	      {
	        id: 148,
	        nombre: "Destino Final 4",
	        imagen: "../../Imagenes_Pelis/destinofinal4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1c66e803-05f5-4d84-916e-8f3d9b806031",
	        Generos: ["Horror", "Suspense"],
	      },
	      {
	        id: 149,
	        nombre: "Destino Final 5",
	        imagen: "../../Imagenes_Pelis/destinofinal5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7d8c9db3-b08d-4541-9c1e-8e8cd40eb093",
	        Generos: ["Horror", "Suspense"],
	      },
	      {
	        id: 150,
	        nombre: "Transformers: El despertar de las bestias",
	        imagen: "../../Assets/Imagenespeliculas/transformers2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/39598aa1-350c-4093-af11-9f2c158cc3ee",
	        Generos: ["Acción", "Ciencia Ficción"],
	      },
	      {
	        id: 151,
	        nombre: "Transformers: El último caballero",
	        imagen: "../../Imagenes_Pelis/transformers5 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bdc603e2-ea1e-442c-a2ba-dca5cc35cb8f",
	        Generos: ["Acción", "Ciencia Ficción"],
	      },
	      {
	        id: 152,
	        nombre: "Transformers: La era de la extinción",
	        imagen: "../../Imagenes_Pelis/transformers4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9942b7e8-4c28-4491-b1be-093ae732b3c2",
	        Generos: ["Acción", "Ciencia Ficción"],
	      },
	      {
	        id: 153,
	        nombre: "Transformers: El lado oscuro de la luna",
	        imagen: "../../Assets/Imagenespeliculas/transformers3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9fed87d3-a628-4634-98c9-c9c5f0bb0a43",
	        Generos: ["Acción", "Ciencia Ficción"],
	      },
	      {
	        id: 154,
	        nombre: "Transformers: La venganza de los caídos",
	        imagen: "../../Imagenes_Pelis/transformers2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/0f89c699-0bbd-40f7-9d4e-92c95991752d",
	        Generos: ["Acción", "Ciencia Ficción"],
	      },
	      {
	        id: 155,
	        nombre: "Transformers 1",
	        imagen: "../../Imagenes_Pelis/transformers1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/082e27c6-6860-4a68-82a0-79793cffc946",
	        Generos: ["Acción", "Ciencia Ficción"],
	      },

	      {
	        id: 156,
	        nombre: "Piratas del Caribe 1",
	        imagen:
	          "../../Imagenes_Pelis/Piratas_del_Caribe_La_maldiciaon_de_la_Perla_Negra.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8c3d763f-fe88-4680-a983-7918d1f762aa",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 157,
	        nombre: "Piratas del Caribe 2",
	        imagen: "../../Imagenes_Pelis/piratasdelcaribe2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1b92ce84-86d2-4d17-a76a-8819c2aa7349",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 158,
	        nombre: "Piratas del Caribe 3",
	        imagen: "../../Imagenes_Pelis/piratasdelcaribe3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f0372cc7-ebbf-473a-bc2a-eb3b6c3bc79f",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 159,
	        nombre: "Piratas del Caribe 4",
	        imagen: "../../Imagenes_Pelis/piratasdelcaribe4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7648582a-8a50-4a35-81b2-8bc0070f044d",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 160,
	        nombre: "Piratas del Caribe 5",
	        imagen: "../../Imagenes_Pelis/piratasdelcaribe5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/168c5490-f98a-4e10-9ebe-4edbc6f639b2",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 161,
	        nombre: "La era del hielo 5",
	        imagen: "../../Imagenes_Pelis/la_era_De_hielo_5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/00d44ec6-e6f2-466a-b910-d11accabc256",
	        Generos: ["Animación", "Aventura"],
	      },
	      {
	        id: 162,
	        nombre: "La era del hielo 4",
	        imagen: "../../Imagenes_Pelis/la_era_de_hielo_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9ab13122-d674-456f-9e93-9859c6f99c96",
	        Generos: ["Animación", "Aventura"],
	      },

	      {
	        id: 163,
	        nombre: "La era del hielo 3",
	        imagen: "../../Imagenes_Pelis/La_era_de_hielo_3_cartel.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/752effd9-ffc4-4ba7-85b0-c21dc5d15b57",
	        Generos: ["Animación", "Aventura"],
	      },
	      {
	        id: 164,
	        nombre: "La era del hielo 2",
	        imagen: "../../Imagenes_Pelis/la_era_de_hielo_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a946df68-187d-432e-97a7-69ed7270dca3",
	        Generos: ["Animación", "Aventura"],
	      },
	      {
	        id: 165,
	        nombre: "La era del hielo 1",
	        imagen: "../../Imagenes_Pelis/IceAge1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/102b825e-ab2c-41fc-ba32-6bb7cf6c4298",
	        Generos: ["Animación", "Aventura"],
	      },
	      {
	        id: 166,
	        nombre: "Frozen 1",
	        imagen: "../../Imagenes_Pelis/frozen1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4bc6ad89-1722-4e79-9d2a-209dbac45562",
	        Generos: ["Animación", "Aventura", "Fantástico"],
	      },
	      {
	        id: 167,
	        nombre: "Frozen 2",
	        imagen: "../../Imagenes_Pelis/frozen2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e30184c6-8917-48e6-90e8-7ec6aa5f4817",
	        Generos: ["Animación", "Aventura", "Fantástico"],
	      },
	      {
	        id: 168,
	        nombre: "Dioses de Egipto",
	        imagen: "../../Assets/Imagenespeliculas/dioses_de_egipto_2016.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2d09cb37-dc53-44fb-8a7f-8561ecc88929",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 169,
	        nombre: "Narnia 1",
	        imagen: "../../Imagenes_Pelis/narnia1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/22aba6c0-56bd-4b5f-b1fc-bc90b1d0ed6a",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 170,
	        nombre: "Narnia 2",
	        imagen: "../../Imagenes_Pelis/narnia2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cd775857-f897-4feb-b463-7a0225ca9e27",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 527,
	        nombre: "Narnia 3",
	        imagen: "../../Assets/Imagenespeliculas/narnia_3_2010.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d30d336f-23ee-4079-a2bf-285cedbc724a",
	        Generos: ["Aventura", "Fantástico"],
	      },
	      {
	        id: 171,
	        nombre: "Coco",
	        imagen: "../../Assets/Imagenespeliculas/coco.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/34a4b9fd-daa7-4144-b276-b13ef7bbe69c",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 172,
	        nombre: "La mujer maravilla",
	        imagen: "../../Imagenes_Pelis/mujermaravilla2.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8ff04188-3e8c-4850-95cb-37b6f83925e1",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 173,
	        nombre: "Capitán América Civil War 2016",
	        imagen: "../../Imagenes_Pelis/capitanamerica3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cd31ce7d-5414-46c7-acad-ca0a4e00633a",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 174,
	        nombre: "Capitán América Y El Soldado Del Invierno 2014",
	        imagen: "../../Imagenes_Pelis/capitanamerica2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fc44caad-52f2-4f33-aefa-67c8e3ad8722",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 175,
	        nombre: "Capitán América El Primer Vengador 2011",
	        imagen: "../../Imagenes_Pelis/capitanamerica1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/43c147f3-dab9-4751-9120-b960d730d348",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 176,
	        nombre: "Venom 2",
	        imagen: "../../Imagenes_Pelis/venom2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dc84ccdd-3d3b-4ba9-9a10-7d705ebc593e",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 177,
	        nombre: "Venom 1",
	        imagen: "../../Imagenes_Pelis/venom1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8b11ac22-b05e-43f1-be94-c8798c308d34",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 178,
	        nombre: "Avengers: La hera de Ultron",
	        imagen: "../../Imagenes_Pelis/avengerslaeradeultron2015.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f1a52a28-535a-4941-bbd6-9666c1f59846",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 179,
	        nombre: "Avengers: Infinity Wars",
	        imagen: "../../Imagenes_Pelis/avengersinfinitywars.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e36bd997-241c-4d08-822f-caacbc3c8cb3",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 180,
	        nombre: "Avengers: End Game",
	        imagen: "../../Imagenes_Pelis/avengersendgame.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/0a5c11b4-2668-41ab-b96e-8c5db625a66c",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },

	      {
	        id: 181,
	        nombre: "The Marvel",
	        imagen: "../../Imagenes_Pelis/capitanaamarvel2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d8ab1f50-d037-4332-aaa5-9b13fd5a3104",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 182,
	        nombre: "Kong: La Isla Calavera",
	        imagen: "../../Imagenes_Pelis/konglaislacalavera.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d0b28bc6-846c-4016-a5a0-96ab7a5be4cf",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 183,
	        nombre: "Capitana Marvel",
	        imagen: "../../Imagenes_Pelis/capitanaamarvel1 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/25c8b7e4-deca-42be-8533-28797e54ef7c",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },
	      {
	        id: 184,
	        nombre: "Nanatsu no Taizai Movie: Prisioneros del cielo",
	        imagen:
	          "../../Imagenes_Pelis/Los_siete_pecados_capitales_-_Los_prisioneros_del_cielo_-_Poster (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a0626e45-38d1-457a-afbb-6ee28a20f6ad",
	        Generos: ["Animación", "Aventura", "Fantasía", "Anime"],
	      },
	      {
	        id: 185,
	        nombre: "Mulan",
	        imagen: "../../Imagenes_Pelis/mulanlapelicula.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/052e1fb9-7af6-4ec0-8ee3-809d47acc1dd",
	        Generos: ["Aventura", "Acción", "Drama"],
	      },
	      {
	        id: 186,
	        nombre: "La gran Muralla",
	        imagen: "../../Imagenes_Pelis/lagranmuralla.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5b9dd701-21d5-4a9f-b3d6-35459511e84a",
	        Generos: ["Acción", "Aventura", "Historia"],
	      },
	      {
	        id: 187,
	        nombre: "Thor Amor y Trueno",
	        imagen: "../../Imagenes_Pelis/thor2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d9f52c19-1195-4d39-b391-f46b4d76bc0e",
	        Generos: ["Acción", "Aventura", "Comedia"],
	      },
	      {
	        id: 188,
	        nombre: "Thor Ragnarok",
	        imagen: "../../Imagenes_Pelis/thorragnarok.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9aac63d0-82a9-4320-990f-39f338315bb0",
	        Generos: ["Acción", "Aventura", "Comedia"],
	      },
	      {
	        id: 189,
	        nombre: "Thor un mundo oscuro 2013",
	        imagen: "../../Imagenes_Pelis/thor2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5dfbc725-f532-42e2-bbcb-6a50b5437a10",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 190,
	        nombre: "Thor 2011",
	        imagen: "../../Imagenes_Pelis/thor1.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/24e51db4-3a27-4286-8bab-5c13a64aa516",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 191,
	        nombre: "Black Panther  2",
	        imagen: "../../Imagenes_Pelis/blackpanter2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dcf24f18-a15e-4ec0-a2f4-c93c1f853d2f",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 192,
	        nombre: "Black Panther  1",
	        imagen: "../../Imagenes_Pelis/blackpanter1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a27eeec5-7175-46d1-987f-d1b2b2ce0f1e",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 193,
	        nombre: "Black Widow",
	        imagen: "../../Imagenes_Pelis/blackwidow.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/415e360d-d7eb-4f2f-a660-086755c9c634",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 194,
	        nombre: "HULK 1",
	        imagen: "../../Imagenes_Pelis/hulk2003.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/210598dd-ead4-4ba8-a8cf-65b919c174e2",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 195,
	        nombre: "HULK 2",
	        imagen: "../../Imagenes_Pelis/hulk2008.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b1859828-7235-4338-8d3d-7dacd91a1eae",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 196,
	        nombre: "FLASH 2023",
	        imagen: "../../Imagenes_Pelis/flash2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bd68b67a-250b-4bea-b499-13f31849307d",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 197,
	        nombre: "Spider-Man: No Way Home",
	        imagen:
	          "../../Imagenes_Pelis/Spider_Man_No_Way_Home-642739124-large.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/23e240d1-95c4-48dc-a93d-c64937f442ec",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 198,
	        nombre: "The Amazing Spider-Man 2",
	        imagen: "../../Imagenes_Pelis/The Amazing Spider-Man 2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/687f44a9-6968-4dea-bd8a-49d9a7203aae",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 199,
	        nombre: "Spiderman 3",
	        imagen: "../../Imagenes_Pelis/spiderman3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bd68b67a-250b-4bea-b499-13f31849307d",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 200,
	        nombre: "Los 4 Fantásticos (2015)",
	        imagen: "../../Imagenes_Pelis/los4fantasticos3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8983b829-1de7-4399-9d71-4677de5b8617",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 201,
	        nombre: "Los 4 fantásticos y Silver Surfer (2007)",
	        imagen: "../../Imagenes_Pelis/los4fantasticos2 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/93ecceec-44ee-46da-a71d-17c577dfc97a",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 202,
	        nombre: "Los 4 fantásticos(2005)",
	        imagen: "../../Imagenes_Pelis/los4fantasticos1.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b9ee1e9a-fe5e-438a-b3c8-85181384e3e3",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 203,
	        nombre: "Iro man 1",
	        imagen: "../../Imagenes_Pelis/iroman1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d195f598-0357-4c9f-b3f8-dde68bb3af2c",
	        Generos: ["Acción", "Ciencia ficción"],
	      },
	      {
	        id: 204,
	        nombre: "Iro man 2",
	        imagen: "../../Imagenes_Pelis/iroman2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1a4b6966-1c32-43c3-b44d-9a342f076d5e",
	        Generos: ["Acción", "Ciencia ficción"],
	      },
	      {
	        id: 205,
	        nombre: "Iro man 3",
	        imagen: "../../Imagenes_Pelis/Iron_Man_3_Portada (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/865aacd2-befa-4fc1-8d88-0e9b0c7e4aa7",
	        Generos: ["Acción", "Ciencia ficción"],
	      },
	      {
	        id: 206,
	        nombre: "deapool 1",
	        imagen: "../../Imagenes_Pelis/deapool1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b7bee605-0662-49aa-9ced-38747a039d92",
	        Generos: ["Acción", "Comedia", "Ciencia ficción"],
	      },
	      {
	        id: 207,
	        nombre: "deapool 2",
	        imagen: "../../Imagenes_Pelis/Deadpool 2 (2018) (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c1971947-07dc-40bd-b9d5-17fb217d57b3",
	        Generos: ["Acción", "Comedia", "Ciencia ficción"],
	      },
	      {
	        id: 208,
	        nombre: "Batman El caballero de la noche (2008)",
	        imagen: "../../Imagenes_Pelis/elcaballerodelanoche2012.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f8ec86d1-422e-4c77-9c55-9d43c1339a40",
	        Generos: ["Acción", "Crimen", "Drama"],
	      },
	      {
	        id: 209,
	        nombre: "Batman El caballero de la noche (2012)",
	        imagen: "../../Imagenes_Pelis/elcaballerodelanoche2008.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6adeb728-ee2d-44a1-a48b-2182f5a93b42",
	        Generos: ["Acción", "Crimen", "Drama"],
	      },
	      {
	        id: 210,
	        nombre: "Batman vs Superman",
	        imagen: "../../Imagenes_Pelis/batmanvssuperman (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/95ed937b-358b-448b-9091-7a929abcc78d",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 610,
	        nombre: "El Hombre de Acero",
	        imagen: "../../Assets/Imagenespeliculas/El_Hombre_de_Acero.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e795d77e-f281-4ade-9728-97d1ae9cf288",
	        Generos: ["Acción,Aventura,Ciencia ficción"],
	        Año:"2013"
	      },
	      {
	        id: 211,
	        nombre: "Dragon Ball Gran aventura mística (1988)",
	        imagen: "../../Imagenes_Pelis/dragonballunaaventuramistica1988.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6997ee0c-90bc-4f6c-b5e1-d1ee0892eea9",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 212,
	        nombre: "Dragon Ball Z Los mejores rivales (1991)",
	        imagen: "../../Imagenes_Pelis/dragonballlosmejoresrivales.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1aea5910-dc70-4c9f-90e4-dd4612e661b2",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 213,
	        nombre: "Dragon Ball Super Super Hero 2022",
	        imagen:
	          "../../Imagenes_Pelis/Dragon_Ball_Super_Super_Hero2022 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/218e0a98-2bdc-45df-aa71-4f0041d7cb47",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 214,
	        nombre: "Dragon Ball Super Broly",
	        imagen: "../../Imagenes_Pelis/dragonballsuperbroly.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/eae8c0cb-8adb-40f8-9caa-a90a2d41080d",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },

	      {
	        id: 215,
	        nombre: "Dragon Ball Z La resurrección de Freezer (2015)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z La resurrección de Freezer (2015).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6c70e043-94ff-452e-a80e-2186e62cbb00",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 216,
	        nombre: "Dragon Ball Z La Batalla de los Dioses",
	        imagen:
	          "../../Imagenes_Pelis/Dragon.Ball.Z.La.Batalla.de.los.Dioses.2013 (2) (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5afb9a74-23f9-45b9-8099-1bf2b25c7f2a",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 217,
	        nombre: "Dragon Ball Z El Combate Final 1994",
	        imagen:
	          "../../Imagenes_Pelis/Dragon.Ball.Z.El.Combate.Final1994 (2) (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/87b37c55-abd4-4098-bcb5-ee2d3bb54d72",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 218,
	        nombre: "Dragon Ball Z Freezer vs el Padre de Goku",
	        imagen:
	          "../../Imagenes_Pelis/Dragon.Ball.Z.La.Batalla.de.Freezer.contra.el.Padre.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ccf1655b-b7b8-420f-8607-5e715b5dd005",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 219,
	        nombre: "Dragon Ball Z La super batalla (1990)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball ZLa super batalla (película 1990).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a820e4e0-e782-44da-aba8-273336296b92",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },

	      {
	        id: 220,
	        nombre: "Dragon Ball Z Los guerreros de plata (1993)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z Los guerreros de plata (1993).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cef37b8c-6e4e-41a0-9eab-291f952048ed",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 221,
	        nombre: "Dragon Ball Z Devuélvanme a mi Gohan",
	        imagen: "../../Imagenes_Pelis/Dragon Ball ZDevuélvanme a mi Gohan.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d8f7a148-baf4-409c-99ae-7c1d41be8bbd",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },

	      {
	        id: 222,
	        nombre: "Dragon BallEl camino hacia el más fuerte (1996)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon BallEl camino hacia el más fuerte (1996).jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/19981496-8ad3-42d6-aa0c-e36bde661bad",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 223,
	        nombre: "Dragon Ball Z La Fusión de Goku y Vegeta",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z La Fusión de Goku y Vegeta (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a0f19435-2443-4ca9-b52b-e693c833c38c",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 224,
	        nombre: "Dragon Ball La leyenda del dragón Shenron (1986)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball La leyenda del dragón Shenron (1986).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6a27be2a-4ad1-4a5c-952e-fe8779dafb6b",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 225,
	        nombre: "Dragon Ball Z El más fuerte del mundo (1990)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z El más fuerte del mundo (1990).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/97b5140e-fe2d-427a-9395-1bc13a8bbe02",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 555,
	        nombre: "Dragon Ball Z: Los dos Guerreros del Futuro Gohan y Trunks",
	        imagen:
	          "../../Assets/Imagenespeliculas/dragon_ball_z_gohan_futuro.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/3a28d8b9-3e9d-48aa-a35d-190973e573d0",
	        Generos: ["Aventura", "Animación", "Anime"],
	        Año:"1993"
	      },
	      {
	        id: 226,
	        nombre: "Dragon Ball Z Goku es un Super Saiyajin",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z Goku es un Super Saiyajin (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/40ac62e8-db8c-44c6-8f9d-060f55b93951",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 227,
	        nombre: "Dragon Ball La princesa durmiente del castillo",
	        imagen:
	          "../../Assets/Imagenespeliculas/Dragon_Ball_La_princesa_durmiente_del_castillo.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a37bf829-2f74-40a1-9263-14ab8c83849c",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 228,
	        nombre: "Dragon Ball Z La Pelea de los Tres Saiyajin",
	        imagen:
	          "../../Imagenes_Pelis/Dragon_Ball_z_la_pelea_de_los_3_sayayins.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/616647e4-5706-4f0b-8c0c-b02ce4a7b8a2",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 229,
	        nombre: "Dragon Ball Z Los Guerreros más Poderosos",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z Los Guerreros más Poderosos.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/aab8fa46-3ee9-4637-9a8a-6d1ba1765622",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 230,
	        nombre: "Dragon Ball Z El Regreso del Guerrero Legendario",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z El Regreso del Guerrero Legendario.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7aa2b287-44d6-4ebf-997b-c3ddfe1e0dde",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },

	      {
	        id: 231,
	        nombre: "Dragon Ball Z El ataque del dragón (1995)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z El ataque del dragón (1995).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f2031b0f-f98c-44af-b794-d4557fa856e5",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 232,
	        nombre: "Dragon Ball Z La Galaxia Corre Peligro",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z La Galaxia Corre Peligro (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f285f135-ca2c-4b19-8e71-e025eef7f00b",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 233,
	        nombre: "Dragon Ball Z Estalla el duelo (1993)",
	        imagen:
	          "../../Imagenes_Pelis/Dragon Ball Z Estalla el duelo (1993).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d0a710a7-2007-48fd-b5a5-00d11546e184",
	        Generos: ["Acción", "Aventura", "Animación", "Anime"],
	      },
	      {
	        id: 234,
	        nombre: "Terminator Destino oscuro (2019)",
	        imagen:
	          "../../Imagenes_Pelis/Terminator Destino oscuro (2019) (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5a2726ae-5599-41ce-ad9e-2dc36a35d29c",
	        Generos: ["Ciencia Ficción", "Acción"],
	      },
	      {
	        id: 235,
	        nombre: "Terminator Genesis (2015)",
	        imagen: "../../Imagenes_Pelis/terminatorgenesis2015 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/592f1e35-d08c-4117-9ed9-18262932b3ee",
	        Generos: ["Ciencia Ficción", "Acción"],
	      },
	      {
	        id: 236,
	        nombre: "Terminator Salvacion (2009)",
	        imagen: "../../Imagenes_Pelis/terminatorsalvation20009.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6cc84e3d-64da-492b-ba7f-2bfece2b96a2",
	        Generos: ["Ciencia Ficción", "Acción"],
	      },
	      {
	        id: 237,
	        nombre: "Terminator 3: La rebelión de las máquinas",
	        imagen: "../../Imagenes_Pelis/terminator3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fbfc9762-c1b8-46c1-972a-43dfcf96f32b",
	        Generos: ["Ciencia Ficción", "Acción"],
	      },
	      {
	        id: 238,
	        nombre: "Terminator 2: el juicio final",
	        imagen: "../../Imagenes_Pelis/terminator2 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/145d83b2-545a-4b23-bae4-e27659171cf0",
	        Generos: ["Ciencia Ficción", "Acción"],
	      },
	      {
	        id: 239,
	        nombre: "Terminator 1",
	        imagen: "../../Imagenes_Pelis/terminator1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fb6c90d5-ccc8-4acf-91f9-d4dd77d62a4d",
	        Generos: ["Ciencia Ficción", "Acción"],
	      },
	      {
	        id: 240,
	        nombre: "Río 1",
	        imagen: "../../Imagenes_Pelis/Río.2011.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/520f5c86-569f-4088-a36e-6824665c02e2",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 241,
	        nombre: "Río 2",
	        imagen: "../../Imagenes_Pelis/rio2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d4d60653-b0c4-42e4-a897-498c202756f4",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 242,
	        nombre: "La Fiesta de las Salchichas ",
	        imagen: "../../Imagenes_Pelis/fiestadesalchichas.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/093a5502-0417-4fa9-8295-fc26c7eec147",
	        Generos: ["Animación", "Comedia"],
	      },
	      {
	        id: 243,
	        nombre: "One piece Film Red",
	        imagen: "../../Assets/Imagenespeliculas/one_piece_film_red.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/78437cf0-4df1-4418-b80f-3bfc2773bb73",
	        Generos: ["Animación", "Aventura", "Anime"],
	      },
	      {
	        id: 244,
	        nombre: "Asu Mare 3",
	        imagen: "../../Assets/Imagenespeliculas/asu_mare3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/48dbc61b-686f-46e9-8fdc-2f101e39d445",
	        Generos: ["Comedia"],
	      },
	      {
	        id: 245,
	        nombre: "Asu Mare 2",
	        imagen: "../../Imagenes_Pelis/asu_mare_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9dbc3a31-7a0c-4cca-bf85-a43343437693",
	        Generos: ["Comedia"],
	      },
	      {
	        id: 246,
	        nombre: "Asu Mare 1",
	        imagen: "../../Imagenes_Pelis/asu_mare1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7064a824-4006-4221-bdbe-4a352618d1c3",
	        Generos: ["Comedia"],
	      },
	      {
	        id: 247,
	        nombre: "Scary Movie 5",
	        imagen: "../../Assets/Imagenespeliculas/scaryMovie5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2c309bfa-72b6-44e3-9240-5967f254dca9",
	        Generos: ["Comedia", "Parodia"],
	      },
	      {
	        id: 248,
	        nombre: "Scary Movie 4",
	        imagen: "../../Assets/Imagenespeliculas/scaryMovie4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/547ed7b4-8ace-485e-8809-407c52f19a68",
	        Generos: ["Comedia", "Parodia"],
	      },
	      {
	        id: 249,
	        nombre: "Scary Movie 3",
	        imagen: "../../Assets/Imagenespeliculas/scaryMovie3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/189dc069-aa05-4351-ae60-11ceba03abcc",
	        Generos: ["Comedia", "Parodia"],
	      },
	      {
	        id: 250,
	        nombre: "Scary Movie 2",
	        imagen: "../../Assets/Imagenespeliculas/scaryMovie2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4d72e63c-72d1-4a19-bf82-7222edd3e794",
	        Generos: ["Comedia", "Parodia"],
	      },
	      {
	        id: 251,
	        nombre: "Scary Movie 1",
	        imagen: "../../Assets/Imagenespeliculas/scaryMovie1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/258a295a-ac34-4e24-a268-ec8fb31f3c51",
	        Generos: ["Comedia", "Parodia"],
	      },
	      {
	        id: 252,
	        nombre: "Cómo Entrenar A Tu Dragón 3",
	        imagen: "../../Imagenes_Pelis/como_entrenar_a_tu_dragon3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/38a22b5d-d7e8-49f4-81bc-2234d6364a23",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 253,
	        nombre: "Cómo Entrenar A Tu Dragón 2",
	        imagen: "../../Imagenes_Pelis/como_entrenar_a_tu_dragon2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d496ff68-9307-4f58-a3fc-adc230df5551",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 254,
	        nombre: "Cómo Entrenar A Tu Dragón 1",
	        imagen: "../../Imagenes_Pelis/como_entrenar_a_tu_dragon.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/79dfb1df-eca6-470b-8fc3-8aeb5c676554",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 255,
	        nombre: "Interstellar 2014",
	        imagen: "../../Assets/Imagenespeliculas/interstellar1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/34b54458-b0eb-44de-b77b-7402d40ab211",
	        Generos: ["Ciencia Ficción", "Drama", "Aventura"],
	      },
	      {
	        id: 256,
	        nombre: "Angry Birds 2",
	        imagen: "../../Imagenes_Pelis/angrybirds2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6bed7979-3caf-4388-a7d4-d569469e96b1",
	        Generos: ["Animación", "Comedia"],
	      },
	      {
	        id: 257,
	        nombre: "Angry Birds 1",
	        imagen: "../../Assets/Imagenespeliculas/angry_birds1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/560dc09f-3a97-481d-bd26-8ea55c2d8584",
	        Generos: ["Animación", "Comedia"],
	      },
	      {
	        id: 258,
	        nombre: "Tren Bala",
	        imagen: "../../Imagenes_Pelis/trenbala.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/967790df-966c-4ecb-9f56-8ce5ea0e255d",
	        Generos: ["Acción", "Suspense"],
	      },
	      {
	        id: 259,
	        nombre: "Furia de Titanes 2",
	        imagen: "../../Assets/Imagenespeliculas/furia_de_titanes2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9779470b-c978-4b32-b965-74795b1f33ca",
	        Generos: ["Acción", "Aventura", "Fantástico"],
	      },
	      {
	        id: 260,
	        nombre: "Furia de Titanes 1",
	        imagen: "../../Imagenes_Pelis/furiadetitanes1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e8f73b21-1682-4784-91c0-5159fd01f602",
	        Generos: ["Acción", "Aventura", "Fantástico"],
	      },
	      {
	        id: 261,
	        nombre: "El abuelo sinvergüenza",
	        imagen: "../../Imagenes_Pelis/elabuelosinverguenza.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a6421839-9020-4b74-beaf-3f20a2a52159",
	        Generos: ["Comedia"],
	      },

	      {
	        id: 262,
	        nombre: "La Sirenita 1",
	        imagen: "../../Imagenes_Pelis/lasirenita1 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/66945366-5d05-4919-84fc-19bfab87e3b6",
	        Generos: ["Animación", "Familia", "Fantasía"],
	      },
	      {
	        id: 263,
	        nombre: "La Sirenita 2",
	        imagen: "../../Imagenes_Pelis/lasirenita2 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/78cd77fb-9404-476f-b1ce-6773bbfe8344",
	        Generos: ["Animación", "Familia", "Fantasía"],
	      },
	      {
	        id: 264,
	        nombre: "La Sirenita 3",
	        imagen: "../../Imagenes_Pelis/lasirenita3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/eaf65b4e-d94e-4644-bebb-737c3214d071",
	        Generos: ["Animación", "Familia", "Fantasía"],
	      },
	      {
	        id: 265,
	        nombre: "Inframundo 1",
	        imagen: "../../Imagenes_Pelis/inframundo1 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/76292a56-f1e8-4751-a0dd-bd066723b723",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },

	      {
	        id: 266,
	        nombre: "Inframundo 2",
	        imagen: "../../Imagenes_Pelis/inframundo2 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7d98c8e9-8f80-415a-94e9-f8ab94b58e5a",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },

	      {
	        id: 267,
	        nombre: "Inframundo 3",
	        imagen: "../../Imagenes_Pelis/inframundo3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/85f59a22-19d6-4f70-a08b-478a85273cc8",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },

	      {
	        id: 268,
	        nombre: "Inframundo 4",
	        imagen: "../../Imagenes_Pelis/inframundo4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/88cce4aa-c3bb-4e48-9759-f990da0a693d",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 269,
	        nombre: "Inframundo 5",
	        imagen: "../../Imagenes_Pelis/inframundo5 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/97bde54d-57fa-4222-a74f-79f245b965a9",
	        Generos: ["Acción", "Aventura", "Fantasía"],
	      },
	      {
	        id: 270,
	        nombre: "Jhon Carter",
	        imagen: "../../Imagenes_Pelis/johnCARTER.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/694a5f48-4692-4364-ab68-f5d5967f7f36",
	        Generos: ["Acción", "Aventura", "Ciencia ficción"],
	      },
	      {
	        id: 271,
	        nombre: "Ted 2",
	        imagen: "../../Imagenes_Pelis/ted2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/80df0ddd-90e4-41a5-8ac1-174fb1fbb09f",
	        Generos: ["Comedia"],
	      },
	      {
	        id: 272,
	        nombre: "Ted 1",
	        imagen: "../../Imagenes_Pelis/ted1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7fa95c2b-1600-4c94-964a-19818f64d79f",
	        Generos: ["Comedia"],
	      },
	      {
	        id: 273,
	        nombre: "Boruto",
	        imagen: "../../Imagenes_Pelis/borutopelicula.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f7e3bc90-a48c-4b35-85d5-8f6af88c6a6a",
	        Generos: ["Comedia"],
	      },

	      {
	        id: 274,
	        nombre: "Crepúsculo Luna nueva 2009",
	        imagen: "../../Imagenes_Pelis/crepusculosagaluna (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1c95f49a-f4da-4f24-a25c-a413b8b05dfb",
	        Generos: ["Romance", "Drama", "Fantasía"],
	      },

	      {
	        id: 275,
	        nombre: "Crepúsculo Eclipse 2010",
	        imagen: "../../Assets/Imagenespeliculas/crepusculo_eclipse.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9fc9e526-840d-44ba-a07f-e86c6f8b0d0c",
	        Generos: ["Romance", "Drama", "Fantasía"],
	      },
	      {
	        id: 276,
	        nombre: "Crepúsculo  Amanecer - Parte 1",
	        imagen: "../../Imagenes_Pelis/crepusculoelamanecer1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/61c1a931-1689-4155-aba6-e25b417d92d7",
	        Generos: ["Romance", "Drama", "Fantasía"],
	      },
	      {
	        id: 277,
	        nombre: "La saga Crepúsculo  Amanecer - Parte 2",
	        imagen: "../../Imagenes_Pelis/crepusculoelamanecer2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b8fce20e-4a8a-47e9-95d1-80abb37b5913",
	        Generos: ["Romance", "Drama", "Fantasía"],
	      },
	      {
	        id: 278,
	        nombre: "Rampage Devastación 2018",
	        imagen: "../../Imagenes_Pelis/rampage.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6ae66e58-04c4-4c01-9f05-ab70690bed74",
	        Generos: ["Acción", "Aventura"],
	      },
	      {
	        id: 279,
	        nombre: "Y dónde están las rubias 2004",
	        imagen: "../../Assets/Imagenespeliculas/y_donde_estan_las_rubias.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/432f781e-93e9-4396-a18a-02ace20158f6",
	        Generos: ["Comedia"],
	      },
	      {
	        id: 280,
	        nombre: "Happy feet El pingüino 2006",
	        imagen: "../../Imagenes_Pelis/happyfeet1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1bb434fb-8a66-4455-bb14-974a7306ee71",
	        Generos: ["Animación", "Comedia", "Familia"],
	      },
	      {
	        id: 281,
	        nombre: "Happy feet El pingüino 2",
	        imagen: "../../Assets/Imagenespeliculas/happy_feet2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/59f76ec1-a6fd-4cdc-b866-4b614a479158",
	        Generos: ["Animación", "Comedia", "Familia"],
	      },
	      {
	        id: 282,
	        nombre: "Los Pingüinos de Madagascar 2014",
	        imagen: "../../Imagenes_Pelis/lospinguinosdemadagascar (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9c884af7-e6e9-4ee2-a7ce-33ad57077bfa",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 283,
	        nombre: "Madagascar 3 Los Fugitivos",
	        imagen: "../../Imagenes_Pelis/MadagascarPoster (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dd8634e6-37c2-43d9-b7e2-33bb09e2e66c",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 284,
	        nombre: "Madagascar 2",
	        imagen: "../../Imagenes_Pelis/Madagascar2poster.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c23f1420-d2ed-435b-b507-6c3c0863cfda",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 285,
	        nombre: "Madagascar 1",
	        imagen: "../../Imagenes_Pelis/madagascar1 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6d850bf7-06c6-47e3-8700-b4b97a19f9c7",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 286,
	        nombre: "El libro de la vida",
	        imagen: "../../Imagenes_Pelis/ellibrodelavida (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/13f3c04b-2d03-4bfa-ad66-9588f2d690f6",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 287,
	        nombre: "Náufrago 2000",
	        imagen: "../../Imagenes_Pelis/naufrago (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f2bd8bbe-ac04-4229-aa60-6cb9572259bf",
	        Generos: ["Drama", "Aventura"],
	      },
	      {
	        id: 288,
	        nombre: "Mulán 1998",
	        imagen: "../../Imagenes_Pelis/mulan1 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8016c426-7c67-4574-b954-d5ba1b15e1fe",
	        Generos: ["Animación", "Aventura", "Drama"],
	      },
	      {
	        id: 289,
	        nombre: "Mulan II.2004",
	        imagen: "../../Imagenes_Pelis/mulan2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8add53c8-1b03-4dea-accd-acf13b2d00f2",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 290,
	        nombre: "Barbie Equipo de espías (2016)",
	        imagen: "../../Assets/Imagenespeliculas/barbie_equipo_de_Espias.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fab4d706-f35a-46d0-ad69-8afff008c321",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 291,
	        nombre: "Barbie y sus hermanas En busca de los perritos",
	        imagen:
	          "../../Imagenes_Pelis/barbieysushermanadasenbuscadelosperritos.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/406ddff4-e8d4-467a-913b-53d6ba0d2319",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 292,
	        nombre: "Barbie Superheroína del videojuego (2017)",
	        imagen: "../../Imagenes_Pelis/baribieequipodeespias (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7945a1e3-fd87-4c39-9b6c-c91880dc47ab",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 293,
	        nombre: "Barbie Una aventura de princesas (2020)",
	        imagen: "../../Imagenes_Pelis/barbieunaaventuradeprincesas (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1ef7e8e8-67b5-4de8-bd75-45e812904e5b",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 294,
	        nombre: "Barbie Skipper y su gran aventura como canguro",
	        imagen:
	          "../../Imagenes_Pelis/barbieskipperysugranaventuracomocanguro.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c1f6ec4f-dd43-4c0c-b2a8-1663bd2aa93e",
	        Generos: ["Animación", "Aventura", "Familia"],
	      },
	      {
	        id: 295,
	        nombre: "Alvin y las ardillas Fiesta sobre ruedas (2015)",
	        imagen:
	          "../../Imagenes_Pelis/Alvin_y_las_ardillas_Fiesta_sobre_ruedas.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a078be1f-d330-4dd4-ba92-7d6512d302cc",
	        Generos: ["Animación", "Comedia", "Familia"],
	      },
	      {
	        id: 296,
	        nombre: "Hachiko 2",
	        imagen: "../../Imagenes_Pelis/hachiko2.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cbcb2929-4b8e-43ae-ade4-599452412b84",
	        Generos: ["Drama", "Familia"],
	      },
	      {
	        id: 297,
	        nombre: "Camino hacia el terror 1 (2003)",
	        imagen: "../../Imagenes_Pelis/caminohaciaelterror1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/335a452d-ade6-454f-8893-96dcd7b83d30",
	        Generos: ["Terror", "Suspense"],
	      },

	      {
	        id: 298,
	        nombre: "Camino hacia el terror 2",
	        imagen: "../../Imagenes_Pelis/caminohaciaelterror2 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5c7d0a91-5e1b-44ae-9ef7-c0d3ea4695eb",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 298,
	        nombre: "Camino hacia el terror 3",
	        imagen: "../../Imagenes_Pelis/Camino_hacia_el_terror_3 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/69e82ad9-f88f-42eb-a2b5-a12e3e1f0c53",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 668,
	        nombre: "Camino hacia el terror 4",
	        imagen: "../../Assets/Imagenespeliculas/camino_hacia_El_terror_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/240bfc54-84bd-4387-ade8-e394072bff02",
	        Generos: ["Terror", "Suspense"],
	        Año: "2011"
	      },
	    
	    {
	      id: 669,
	      nombre: "Camino hacia el terror 5",
	      imagen: "../../Assets/Imagenespeliculas/camino_hacia_el_terror_5.webp",
	      imagenX: "/imagenes/ilustrator.webp",

	      Video:
	        "https://iframe.mediadelivery.net/embed/261653/2fc6dbbf-c8cb-42e8-bb68-28db71bbe1a5",
	      Generos: ["Terror", "Suspense"],
	         Año: "2012"
	    },
	    {
	      id: 670,
	      nombre: "Camino Hacia el Terror 6: La Herencia",
	      imagen: "../../Assets/Imagenespeliculas/camino_hacia_el_terror_6.webp",
	      imagenX: "/imagenes/ilustrator.webp",
	      Video:
	        "https://iframe.mediadelivery.net/embed/261653/577e647a-0ec5-4feb-8a57-0ae60d274791",
	      Generos: ["Terror", "Suspense"],
	      Año: "2014"
	    },

	      {
	        id: 299,
	        nombre: "Rango",
	        imagen: "../../Assets/Imagenespeliculas/rango.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5ba17c71-4c19-493c-b314-aaf3e68d45c9",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 300,
	        nombre: "Ratatouille (2007)",
	        imagen: "../../Imagenes_Pelis/ratatouille.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/31760284-8237-4e36-8676-bb082173ccc1",
	        Generos: ["Animación", "Aventura", "Comedia"],
	      },
	      {
	        id: 301,
	        nombre: "Cars 1",
	        imagen: "../../Imagenes_Pelis/cars1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a65083f4-c7d2-4a8b-a4cc-fca9e22b8b48",
	        Generos: ["Animación", "Aventura", "Comedia"],
	        Año:"2006"
	      },
	      {
	        id: 1300,
	        nombre: "Cars 2",
	        imagen: "../../Assets/Imagenespeliculas/Cars 2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/75cd4271-4b45-4f40-9f04-32f1c57fb3de",
	        Generos: ["Familia,Animación,Aventura,Comedia"],
	        Año:"2011"
	      },
	      {
	        id: 1301,
	        nombre: "Cars 3",
	        imagen: "../../Assets/Imagenespeliculas/Cars 3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/397bfbc2-5664-4ad8-b4ce-1e9a9a30974d",
	        Generos: ["Familia,Animación,Aventura,Comedia"],
	        Año:"2017"
	      },
	      
	      {
	        id: 302,
	        nombre: "Blanca Nieves y los siete enanos.1937",
	        imagen: "../../Imagenes_Pelis/blancanievesylos7enenos (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bb40880e-3f50-437d-bf39-3fd3415f16d0",
	        Generos: ["Animación", "Fantasía", "Musical"],
	      },
	      {
	        id: 303,
	        nombre: "Tierra de Osos 2003",
	        imagen: "../../Imagenes_Pelis/Tierra_de_osos_2003 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f5ccf14b-bacf-4ec9-919a-b6a07751430d",
	        Generos: ["Animación", "Aventura", "Drama"],
	      },
	      {
	        id: 304,
	        nombre: "Regreso del todopoderoso 2007",
	        imagen: "../../Imagenes_Pelis/Regreso.del.todopoderoso.2007.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e9c85b26-5ca6-48af-a190-c91413a94a45",
	        Generos: ["Comedia", "Fantasía"],
	      },
	      {
	        id: 305,
	        nombre: "El libro mágico 2008",
	        imagen: "../../Imagenes_Pelis/El.libro.mágico.2008.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dad4197a-5571-4638-9a52-7c7a86273f2e",
	        Generos: ["Aventura", "Fantasía", "Familiar"],
	      },
	      {
	        id: 306,
	        nombre: "Monster House La Casa",
	        imagen: "../../Imagenes_Pelis/Monster_House.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/33ff61db-b30e-409f-a81b-98d5c804e846",
	        Generos: ["Animación", "Aventura", "Comedia", "Terror"],
	      },
	      {
	        id: 307,
	        nombre: "Mavka Guardiana del bosque.2023",
	        imagen: "../../Imagenes_Pelis/mavka_guardina_del_bosque.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/dd26500d-a234-4f73-919e-348c5b1e3d59",
	        Generos: ["Animación", "Aventura", "Fantasía"],
	      },
	      {
	        id: 308,
	        nombre: "Moana Un mar de aventuras",
	        imagen: "../../Assets/Imagenespeliculas/moana.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6122dfe7-271e-4885-8e31-137e75978a0b",
	        Generos: ["Animación", "Aventura", "Fantasía"],
	      },
	      {
	        id: 309,
	        nombre: "Actividad Paranormal 1",
	        imagen: "../../Imagenes_Pelis/actividad_paranormal1 (2).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/651a1fe7-40a2-463c-8249-731bf3bffc5a",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 310,
	        nombre: "Actividad.Paranormal 2",
	        imagen: "../../Imagenes_Pelis/actividad_paranormal2.jpg",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fa7d0ad7-bce5-4e94-ae72-c8ddfe92e519",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 311,
	        nombre: "Actividad.Paranormal 3",
	        imagen: "../../Assets/Imagenespeliculas/actividad_para_normal3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5e645efe-422d-4a7c-ad57-80a95d930e96",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 312,
	        nombre: "Actividad.Paranormal 4",
	        imagen: "../../Imagenes_Pelis/actividad_paranormal4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4e9e2e01-0a19-4ae3-8ce3-e5798e09ab6f",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 313,
	        nombre: "Actividad.Paranormal 5",
	        imagen: "../../Imagenes_Pelis/actividad_paranormal5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9abb3797-ff8b-4f89-b9b4-ed78a274757a",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 314,
	        nombre: "Actividad.Paranormal 6",
	        imagen: "../../Imagenes_Pelis/actividad_paranormal6.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d317ed3b-ef98-4da8-a14f-5bc13a353202",
	        Generos: ["Terror", "Suspense"],
	      },
	      {
	        id: 315,
	        nombre: "El Mayor Payne 1995",
	        imagen: "../../Assets/Imagenespeliculas/el_mayor_payne_1995.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/18e73ec6-0e9b-4814-9e85-0ab804ba3aaa",
	        Generos: ["Acción, Comedia"],
	      },
	      {
	        id: 316,
	        nombre: "12 Horas para el Fin del Mundo 2022",
	        imagen:
	          "../../Assets/Imagenespeliculas/12_horas_para_el_fin_del_mundo.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/35f007ac-c56d-4650-9feb-8317295f6d02",
	        Generos: ["Acción", "Suspenso", "Ciencia Ficción"],
	      },
	      {
	        id: 317,
	        nombre: "Escuadron Suicida 2016",
	        imagen: "../../Assets/Imagenespeliculas/escuadron_suicida_2016.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cca1d74b-b22c-4fd3-af51-a9e470877cd2",
	        Generos: ["Acción", "Aventura", "Ciencia Ficción"],
	      },

	      {
	        id: 318,
	        nombre: "Doctor Dolitlle 2020",
	        imagen: "../../Assets/Imagenespeliculas/doctor_dolitlle_2020.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c75942dd-afbb-4546-84f7-d190e2632d02",
	        Generos: ["Aventura", "Comedia", "Familia", "Fantasía"],
	      },
	      {
	        id: 319,
	        nombre: "Ip Man 4",
	        imagen: "../../Assets/Imagenespeliculas/ip_man_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/849df0e9-8859-4e3c-aeca-6042a3ee1ecd",
	        Generos: ["Acción", "Biografía"],
	      },
	      {
	        id: 549,
	        nombre: "Ip Man",
	        imagen: "../../Assets/Imagenespeliculas/ipman_1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f0d506a7-690c-406c-913f-a1081c084ddc",
	        Generos: ["Acción", "Biografía"],
	      },
	    
	      {
	        id: 320,
	        nombre: "Freddy vs Jason 2003",
	        imagen: "../../Assets/Imagenespeliculas/freddy_vs_jason_2003.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c961387c-7ae8-46f2-b6a0-769eea1cc9a1",
	        Generos: ["Terror", "Suspenso", "Acción"],
	      },
	      {
	        id: 321,
	        nombre: "Pokémon La Pelicula 2000",
	        imagen: "../../Assets/Imagenespeliculas/pokemon_la_pelicula_2000.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/24e72112-3c23-4ded-bed5-545f94d5c102",
	        Generos: ["Animación", "Aventura", "Anime", "Fantasía", "Familia"],
	      },
	      {
	        id: 322,
	        nombre: "WallE 2019",
	        imagen: "../../Assets/Imagenespeliculas/WALL.E_2019.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/ca8e5c30-e546-40fd-9542-990ba7256c55",
	        Generos: ["Animación", "Aventura", "Ciencia Ficción", "Familia"],
	      },
	      {
	        id: 323,
	        nombre: "Pokémon Detective Pikachu",
	        imagen:
	          "../../Assets/Imagenespeliculas/pokemon_detective_pikachu_2019.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/33a1a14c-358e-451c-81b6-312f5ac4b6c0",
	        Generos: ["Aventura", "Comedia", "Familia", "Fantasia"],
	      },
	      {
	        id: 324,
	        nombre: "Los Caballeros del Zodiaco: La batalla de los dioses",
	        imagen:
	          "../../Assets/Imagenespeliculas/Los_Caballeros_del_Zodiaco_La_batalla_de_los_dioses_(1988).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6e919e8d-d4e3-471d-a5dd-d159d3daef55",
	        Generos: ["Animación", "Acción", "Aventura", "Fantasia", "Anime"],
	      },
	      {
	        id: 325,
	        nombre: "Los Caballeros del Zodiaco: Overture",
	        imagen:
	          "../../Assets/Imagenespeliculas/Los_Caballeros_del_Zodiaco_Capítulo_del_cielo_Overture_(2004).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7dcf16cf-460f-4987-aed9-e36b045b0444",
	        Generos: ["Animación", "Acción", "Aventura", "Fantasia", "Anime"],
	      },
	      {
	        id: 326,
	        nombre: "Los Caballeros del Zodiaco: La diosa malvada Eris",
	        imagen:
	          "../../Assets/Imagenespeliculas/Los_Caballeros_del_Zodiaco_La_diosa_malvada_Eris_(1987).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8a6d22df-fcb6-4b0c-a485-4b06c5b86066",
	        Generos: ["Animación", "Acción", "Aventura", "Fantasia", "Anime"],
	      },
	      {
	        id: 327,
	        nombre: "Los Caballeros del Zodiaco: Contra Lucifer",
	        imagen:
	          "../../Assets/Imagenespeliculas/Los_Caballeros_del_Zodiaco_Los_guerreros_de_la_última_guerra_santa_(1989).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b3292e88-19c2-41d1-b825-9ef6b45fd98b",
	        Generos: ["Animación", "Acción", "Aventura", "Fantasia", "Anime"],
	      },

	      {
	        id: 328,
	        nombre: "Pokémon Las crónicas de Arceus 2022",
	        imagen:
	          "../../Assets/Imagenespeliculas/Pokémon_Las_crónicas_de_Arceus_2022.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/436e1bb2-058f-43dd-ae97-fb5f74c6f88d",
	        Generos: ["Animación", "Aventura", "Anime", "Fantasía", "Familia"],
	      },
	      {
	        id: 329,
	        nombre: "La Momia 4",
	        imagen: "../../Assets/Imagenespeliculas/La_momia_4_(2017).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cc96c335-921d-4580-b299-1a486e51af1f",
	        Generos: ["Acción", "Aventura", "Fantasía", "Terror"],
	      },
	      {
	        id: 330,
	        nombre: "La Momia 3",
	        imagen:
	          "../../Assets/Imagenespeliculas/la_momia_3_el_regreso_del_emperador.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6796837f-b2ad-4bd8-9573-27d62ffe2060",
	        Generos: ["Acción", "Aventura", "Fantasía", "Terror"],
	      },
	      {
	        id: 331,
	        nombre: "La Momia 2",
	        imagen:
	          "../../Assets/Imagenespeliculas/momia2_El regreso de la momia_(2001).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e1146fcb-8632-4e07-9d32-418da7b62fd9",
	        Generos: ["Acción", "Aventura", "Fantasía", "Terror"],
	      },
	      {
	        id: 332,
	        nombre: "La Momia 1",
	        imagen: "../../Assets/Imagenespeliculas/la_momia_1_1999.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7bbf0aa3-d060-4f51-95e8-599fdc0df22c",
	        Generos: ["Acción", "Aventura", "Fantasía", "Terror"],
	      },
	      {
	        id: 333,
	        nombre: "Toy Story 4",
	        imagen: "../../Assets/Imagenespeliculas/toy_Story_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1ca88462-9b8a-4c55-bc3a-6f92b3d635ab",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	      },
	      {
	        id: 334,
	        nombre: "Toy Story 3",
	        imagen: "../../Assets/Imagenespeliculas/toy_story_3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/98712ec7-25c3-4cc8-9b90-b41700d98f8e",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	      },
	      {
	        id: 335,
	        nombre: "Toy Story 2",
	        imagen: "../../Assets/Imagenespeliculas/toy_story_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8d731a44-bdcf-4024-b2ed-a106dafb68cb",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	      },
	      {
	        id: 336,
	        nombre: "Toy Story 1",
	        imagen: "../../Assets/Imagenespeliculas/Toy_Story_1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/44c22959-837e-4712-9752-1f0e0cd73b55",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	      },
	      {
	        id: 337,
	        nombre: "Tadeo Jones 3",
	        imagen:
	          "../../Assets/Imagenespeliculas/tadeo_3_La_Tabla_Esmeralda_(2022).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1c7c9a6a-e49a-4960-981d-7fc86d43f86c",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	      },
	      {
	        id: 338,
	        nombre: "Tadeo Jones 2",
	        imagen:
	          "../../Assets/Imagenespeliculas/tadeo2_El secreto_del_rey_Midas_(2017).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7eeff968-c084-44f0-9dd6-1f61fe71960d",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	      },
	      {
	        id: 339,
	        nombre: "Tadeo Jones 2",
	        imagen: "../../Assets/Imagenespeliculas/tadeo_1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/778507bd-71ce-4b28-b0ec-e05409ebf20e",
	        Generos: ["Animación", "Aventura", "Comedia", "Familia"],
	      },
	      {
	        id: 340,
	        nombre: "El libro de la Selva 2016",
	        imagen:
	          "../../Assets/Imagenespeliculas/El _libro_de_la_selva_2016.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/144ff678-15c1-4f63-807d-82825e8d42e8",
	        Generos: ["Aventura", "Acción", "Fantasía", "Familia"],
	      },
	      {
	        id: 341,
	        nombre: "Lucy 2014",
	        imagen: "../../Assets/Imagenespeliculas/lucy_2014.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b13319bd-fead-45e8-8844-932e899dbc74",
	        Generos: ["Acción", "Ciencia Ficción", "Thriller"],
	      },
	      {
	        id: 342,
	        nombre: "Gigantes de Acero 2011",
	        imagen: "../../Assets/Imagenespeliculas/gigantes de acero2011.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7901e6f7-6d84-44f7-8f8b-46be26e6ccaf",
	        Generos: ["Acción", "Ciencia ficción", "Drama"],
	      },
	      {
	        id: 343,
	        nombre: "Hansel y Grettel",
	        imagen: "../../Assets/Imagenespeliculas/hansel y gretel 2013.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6890d372-dd52-49e8-9f97-3125f79c0082",
	        Generos: ["Fantasía", "Terror", "Acción"],
	      },
	      {
	        id: 344,
	        nombre: "El Origen 2010",
	        imagen: "../../Assets/Imagenespeliculas/el_origen_2010.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b2b699c0-e863-4d61-b3a8-35f902258602",
	        Generos: ["Acción", "Ciencia ficción", "Aventura"],
	      },
	      {
	        id: 345,
	        nombre: "Resident Evil: Bienvenidos a Raccoon City",
	        imagen: "../../Assets/Imagenespeliculas/Resident_Evil_Bienvenidos_a_Raccoon_City_(2021).webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/53d4b883-43ed-406a-94f5-54bf40bbd174",
	        Generos: ["Terror,Ciencia ficción,Acción"],
	      },
	      {
	        id: 346,
	        nombre: "Wolverine Inmortal 2013",
	        imagen: "../../Assets/Imagenespeliculas/Wolverine_Inmortal..webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8272bbb0-dba7-4df6-92e2-1aca3c2f4c32",
	        Generos: ["Acción,Ciencia ficción,Aventura"],
	      },
	      {
	        id: 347,
	        nombre: "X-Men Dark Phoenix",
	        imagen: "../../Assets/Imagenespeliculas/X-Men.Dark.Phoenix.2019.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7ce9d0db-d1eb-484f-a8f0-087a4a1b35d7",
	        Generos: ["Acción,Ciencia ficción,Aventura"],
	      },
	      {
	        id: 348,
	        nombre: "Resident Evil 5: La venganza",
	        imagen: "../../Assets/Imagenespeliculas/Resident.Evil.5.La.venganza.2012.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/977ee353-c1e6-4201-97e4-02fad13c3d6e",
	          Generos: ["Terror,Ciencia ficción,Acción"],
	      },
	      {
	        id: 349,
	        nombre: "Thi Yot Susurros Mortales",
	        imagen: "../../Assets/Imagenespeliculas/Thi.Yot.Susurros.Mortales.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/91ec097d-eaae-468b-a58b-8e39d7fbc82c",
	          Generos: ["Terror,Suspense"],
	      },
	      {
	        id: 350,
	        nombre: "Mi.Pobre.Angelito 5",
	        imagen: "../../Assets/Imagenespeliculas/Mi.pobre.angelito5.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7da21962-ba13-4d53-8e31-ac58e2750ca1",
	          Generos: ["Comedia,Familia"],
	      },
	      {
	        id: 351,
	        nombre: "Mi.Pobre.Angelito 4",
	        imagen: "../../Assets/Imagenespeliculas/Mi.Pobre.Angelito.4.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/136e38f3-398f-4b4f-ba14-b5e629ebbf02",
	          Generos: ["Comedia,Familia"],
	      },
	      {
	        id: 352,
	        nombre: "Mi.Pobre.Angelito 3",
	        imagen: "../../Assets/Imagenespeliculas/Mi.Pobre.Angelito.3.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5f772a18-b98d-4118-909f-b7db7e5339d3",
	          Generos: ["Comedia,Familia"],
	      },
	      {
	        id: 353,
	        nombre: "Mi.Pobre.Angelito 2",
	        imagen: "../../Assets/Imagenespeliculas/Mi.pobre.angelito.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/72b1e7b7-26d3-42c6-b76b-125da467ad6f",
	          Generos: ["Comedia,Familia"],
	      },
	     
	      {
	        id: 354,
	        nombre: "Mi.Pobre.Angelito 1",
	        imagen: "../../Assets/Imagenespeliculas/Mi.pobre.angelito1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/423ee4b5-9e2d-4bab-989f-4b896e6c2072",
	          Generos: ["Comedia,Familia"],
	      },
	      
	      {
	        id: 355,
	        nombre: "Titanes del Pacífico 1",
	        imagen: "../../Assets/Imagenespeliculas/titanes_del_pacifico1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cf720f44-ee04-4d77-a6d9-66bbc22dc751",
	          Generos: ["Acción,Fantasía,Ciencia ficción,Aventura"],
	      },
	      {
	        id: 356,
	        nombre: "Titanes del Pacífico 2",
	        imagen: "../../Assets/Imagenespeliculas/titanes_del_pacifico2.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a063320a-6f22-41dd-9ef9-4ec3b292a042",
	          Generos: ["Acción,Fantasía,Ciencia ficción,Aventura"],
	      },
	      {
	        id: 357,
	        nombre: "No Game No Life: Zero",
	        imagen: "../../Assets/Imagenespeliculas/No_Game_N_Life_Zero.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fd12201e-0fcb-48ea-82b3-8589a7c57b17",
	          Generos: ["Anime"],
	      },
	      {
	        id: 358,
	        nombre: "Van Helsing Cazador de monstruos",
	        imagen: "../../Assets/Imagenespeliculas/Van.Helsing.Cazador.de.monstruos.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/913b60e5-f589-4d0d-bb2c-5cce57ad6068",
	          Generos: ["Terror,Aventura,Acción"],
	      },
	      {
	        id: 359,
	        nombre: "El exorcista del papa",
	        imagen: "../../Assets/Imagenespeliculas/El.exorcista.del.papa.2023.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4d78ee04-381a-4405-82a1-38a341a59d0e",
	          Generos: ["Terror,Suspense"],
	      },
	      {
	        id: 360,
	        nombre: "X-Men",
	        imagen: "../../Assets/Imagenespeliculas/X-Men1.webp",
	        imagenX: "/imagenes/ilustrator.webp",

	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/62382734-d75d-471b-82d6-4a09957657f6",
	          Generos: ["Aventura,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 361,
	        nombre: "X-Men 2",
	        imagen: "../../Assets/Imagenespeliculas/X-men2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/13d25251-fa4f-43e5-a3d0-aafd1770e692",
	          Generos: ["Aventura,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 362,
	        nombre: "X-Men 3",
	        imagen: "../../Assets/Imagenespeliculas/X-Men_La_última_batalla_(2006).webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/018e3fa8-0019-4a10-9167-b66cee8e9983",
	          Generos: ["Aventura,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 363,
	        nombre: "X-Men Primera generacion 2011",
	        imagen: "../../Assets/Imagenespeliculas/X-Men_primera_generacion.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/1cdab89d-a8ca-4d7d-bf6a-39dd9df4645f",
	          Generos: ["Aventura,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 364,
	        nombre: "X-Men Días del futuro pasado 2014",
	        imagen: "../../Assets/Imagenespeliculas/X-Men_dias_en_el_futuro.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/11818840-c421-48ec-a4e9-f5c05a7a945b",
	          Generos: ["Aventura,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 365,
	        nombre: "X-Men Apocalipsis 2016",
	        imagen: "../../Assets/Imagenespeliculas/X-Men_apocalicsis.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/11818840-c421-48ec-a4e9-f5c05a7a945b",
	          Generos: ["Aventura,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 366,
	        nombre: "Alien Covenant 2017",
	        imagen: "../../Assets/Imagenespeliculas/Alien.Covenant2017.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/35d80d1a-2249-41bb-9ce8-6bf4af876b4e",
	          Generos: ["Ciencia ficción,Terror,Thriller"],
	      },
	      {
	        id: 367,
	        nombre: "Ghost Rider el vengador fantasma",
	        imagen: "../../Assets/Imagenespeliculas/Ghost Rider1.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f632ac60-0363-4c85-be26-2f5744a3ea1e",
	          Generos: ["Thriller,Acción,Fantasía"],
	          Año:"2007"
	      },
	      {
	        id: 556,
	        nombre: "Ghost Rider 2: Espíritu de Venganza",
	        imagen: "../../Assets/Imagenespeliculas/ghost_rider_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7d1556e8-5567-409c-8af6-48899936385f",
	          Generos: ["Thriller,Acción,Fantasía"],
	           Año:"2011"
	      },
	      {
	        id: 368,
	        nombre: "As the Gods Will",
	        imagen: "../../Assets/Imagenespeliculas/As the Gods Will.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5a091038-cadb-472f-a27a-6e0de005bbe0",
	          Generos: ["Terror,Ciencia ficción"],
	      },
	      {
	        id: 369,
	        nombre: "Resident Evil 1",
	        imagen: "../../Assets/Imagenespeliculas/resident_evil_1.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/10f58e9a-68e8-454c-b402-1465c6f6541f",
	          Generos: ["Terror,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 370,
	        nombre: "Resident Evil 2",
	        imagen: "../../Assets/Imagenespeliculas/resident_evil_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9580e28b-310c-4df0-971b-ca33e4c58cc8",
	          Generos: ["Terror,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 371,
	        nombre: "Resident Evil 3",
	        imagen: "../../Assets/Imagenespeliculas/resident_evil_3.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bf7be5c4-04b6-43f7-b7d4-1ed409bab56e",
	          Generos: ["Terror,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 372,
	        nombre: "Resident Evil 4",
	        imagen: "../../Assets/Imagenespeliculas/resident_Evil_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2f1712a7-bd64-4ff3-bdbb-4a1aa6f9993f",
	          Generos: ["Terror,Acción,Ciencia Ficción"],
	      },
	      {
	        id: 373,
	        nombre: "Jeepers Creepers ",
	        imagen: "../../Assets/Imagenespeliculas/Jeepers_Creepers_1.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/217d68f1-9247-4ea3-b49e-90d007106874",
	          Generos: ["Terror,Thriller,Misterio"],
	      },
	      {
	        id: 374,
	        nombre: "Jeepers Creepers 2 ",
	        imagen: "../../Assets/Imagenespeliculas/Jeepers_Creepers_2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/16284639-03ab-4839-9792-07e584d891ea",
	          Generos: ["Terror,Thriller,Misterio"],
	      },
	      {
	        id: 375,
	        nombre: "Jeepers Creepers 3 ",
	        imagen: "../../Assets/Imagenespeliculas/Jeepers_Creepers _3.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/edc63705-9713-47a2-aa54-423d3449792b",
	          Generos: ["Terror,Thriller,Misterio"],
	      },
	      {
	        id: 376,
	        nombre: "Jeepers Creepers 4 ",
	        imagen: "../../Assets/Imagenespeliculas/Jeepers_Creepers_4.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/33b70689-119c-41e0-b666-90ab7a83f1e7",
	          Generos: ["Terror,Thriller,Misterio"],
	      },
	      {
	        id: 377,
	        nombre: "Junto con los dioses Los dos mundos ",
	        imagen: "../../Assets/Imagenespeliculas/Junto_con_los_dioses_Los_dos_mundos.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f0e8ad96-d85f-49db-b3c4-f4ec7a140c23",
	          Generos: ["Acción,Aventura,Drama,Fantasía,Thriller,Misterio"],
	      },
	      {
	        id: 378,
	        nombre: "Life",
	        imagen: "../../Assets/Imagenespeliculas/Life.vida.inteligente.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/30103aa4-270f-4572-a261-0c4566538688",
	          Generos: ["Acción,Aventura,Drama,Fantasía,Thriller,Misterio"],
	      },
	      {
	        id: 379,
	        nombre: "Diaro de una pasión",
	        imagen: "../../Assets/Imagenespeliculas/Diario de una pasión.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bf505297-a5f7-4ba7-983b-5c6cb409f493",
	          Generos: ["Romance,Drama"],
	      },
	      {
	        id: 380,
	        nombre: "¿Conoces a Joe Black?",
	        imagen: "../../Assets/Imagenespeliculas/Conoces.a.Joe.Black.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fa16efc6-2fb0-4c83-aa85-f0a4d7f59ac2",
	          Generos: ["Fantasía,Drama,Romance"],
	      },
	      {
	        id: 381,
	        nombre: "Maze Runner 1",
	        imagen: "../../Assets/Imagenespeliculas/maz_runner1.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f6655687-5347-415a-89cb-31a750198ef8",
	          Generos: ["Acción,Misterio,Ciencia ficción,Suspense"],
	      },
	      {
	        id: 382,
	        nombre: "Maze Runner 2",
	        imagen: "../../Assets/Imagenespeliculas/maze_runner2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/5100a613-d993-4dc5-ba3f-d02d637f993f",
	          Generos: ["Acción,Misterio,Ciencia ficción,Suspense"],
	      },
	      {
	        id: 383,
	        nombre: "Maze Runner 3",
	        imagen: "../../Assets/Imagenespeliculas/maze_runner3.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/47edeeb9-1a9d-4439-91be-91ce4a57b59e",
	          Generos: ["Acción,Misterio,Ciencia ficción,Suspense"],
	      },
	      {
	        id: 384,
	        nombre: "300  2007",
	        imagen: "../../Assets/Imagenespeliculas/300.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/bc50778e-dd07-420b-9379-2a8f07383b00",
	          Generos: ["Acción,Aventura,Bélica"],
	      },
	      {
	        id: 385,
	        nombre: "Corazones Malheridos",
	        imagen: "../../Assets/Imagenespeliculas/corazones_malheridos.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/64b60aa2-0843-4c80-8e82-cd4f888cd637",
	          Generos: ["Acción,Aventura,Bélica"],
	      },
	      {
	        id: 386,
	        nombre: "El oso Paddington 1",
	        imagen: "../../Assets/Imagenespeliculas/el_oso_Paddington1.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f9a525b6-026f-49c6-acd1-931d4d323552",
	          Generos: ["Comedia,Aventura,Familia"],
	      },
	      {
	        id: 387,
	        nombre: "El oso Paddington 2",
	        imagen: "../../Assets/Imagenespeliculas/el_oso_paddington2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/34b521a3-3011-4afa-9221-8eabfc1327f6",
	          Generos: ["Comedia,Aventura,Familia"],
	      },
	      {
	        id: 388,
	        nombre: "La princesa Mononoke",
	        imagen: "../../Assets/Imagenespeliculas/La princesa Mononoke.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/219dd3ef-04a3-42b3-835e-053d189ff188",
	          Generos: ["Aventura,Fantasía,Animación"],
	      },
	      {
	        id: 389,
	        nombre: "KIMETSU NO YAIBA: Tren Infinito",
	        imagen: "../../Assets/Imagenespeliculas/Guardianes de la Noche Tren infinito.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/8b4bde12-b9e9-4699-a412-46608ce9b4db",
	          Generos: ["Anime"],
	      },
	      {
	        id: 390,
	        nombre: "Annabelle 1",
	        imagen: "../../Assets/Imagenespeliculas/annabelle1.jpg",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/cd25fc9c-1290-4cd6-8b8c-3b3ce72703ec",
	          Generos: ["Terror"],
	      },
	      {
	        id: 391,
	        nombre: "Annabelle 2: La Creación",
	        imagen: "../../Assets/Imagenespeliculas/Annabelle2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/72691aa0-92ae-4ab8-9666-ce07fe952def",
	          Generos: ["Terror"],
	          Año:"2017"
	      },
	      {
	        id: 392,
	        nombre: "Golpe Bajo: El Juego Final",
	        imagen: "../../Assets/Imagenespeliculas/Golpe Bajo El Juego Final.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/30e89c5d-0817-4382-a8ef-07102a514c95",
	          Generos: ["Drama,Comedia"],
	          Año:"2005"
	      },
	    
	      {
	        id: 393,
	        nombre: "Warcraft: El primer encuentro de dos mundos",
	        imagen: "../../Assets/Imagenespeliculas/warcraft.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/075cfbad-c076-460c-bd56-4c35785b4662",
	          Generos: ["Acción, Aventura,Fantasía"],
	          Año:"2016"
	      },
	      {
	        id: 394,
	        nombre: "365 días más",
	        imagen: "../../Assets/Imagenespeliculas/365 días más.jpg",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/74f704e1-597e-4215-b8df-cf8936deaf79",
	          Generos: ["Romance,Drama"],
	          Año:"2022"
	      },
	      {
	        id: 395,
	        nombre: "Los Diez Mandamientos",
	        imagen: "../../Assets/Imagenespeliculas/Los Diez Mandamientos.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f1be1ba0-5a52-40bd-9046-b137b410a1e4",
	          Generos: ["Drama,Historia"],
	          Año:"1956"
	      },
	      {
	        id: 396,
	        nombre: "It (Eso)",
	        imagen: "../../Assets/Imagenespeliculas/it_2017.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a9f9dfff-58cb-4e70-b615-0d4b08a9d277",
	          Generos: ["Terror"],
	          Año:"2017"
	      },
	      {
	        id: 397,
	        nombre: "Como si fuera la primera vez",
	        imagen: "../../Assets/Imagenespeliculas/Como_si_fuera_la_primera_vez.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d9592164-78a1-4f85-994a-bc1e806bf628",
	          Generos: ["Comedia,Romance"],
	          Año:"2004"
	      },
	      {
	        id: 398,
	        nombre: "Tom y Jerry: El cascanueces",
	        imagen: "../../Assets/Imagenespeliculas/Tom_y_Jerry_El_cascanueces.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/fa9db6bc-db7f-4447-bf86-4aceeecc4092",
	          Generos: ["Animación,Comedia,Familia"],
	          Año:"2007"
	      },
	      {
	        id: 399,
	        nombre: "La vida secreta de tus mascotas",
	        imagen: "../../Assets/Imagenespeliculas/La vida secreta de tus mascotas.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/f8c70d90-abf1-480f-baa1-3367f2ab3235",
	          Generos: ["Aventura,Comedia,Animación,Familia"],
	          Año:"2016"
	      },
	      {
	        id: 400,
	        nombre: "La Vida Secreta De Tus Mascotas 2",
	        imagen: "../../Assets/Imagenespeliculas/La Vida Secreta De Tus Mascotas 2.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/711ba774-a150-487c-bcb9-b8ae89dd76af",
	          Generos: ["Aventura,Comedia,Animación,Familia"],
	          Año:"2019"
	      },
	      {
	        id: 401,
	        nombre: "Jack: El Cazagigantes",
	        imagen: "../../Assets/Imagenespeliculas/Jack.El.Cazagigantes..webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/87f66553-bc03-47ed-b330-5b26ab434605",
	          Generos: ["Fantasía,Acción,Aventura,Drama"],
	          Año:"2013"
	      },
	      {
	        id: 402,
	        nombre: "Spirit: El Corcel Indomable",
	        imagen: "../../Assets/Imagenespeliculas/Spirit_El Corcel Indomable.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/9a86dbe2-c6ca-45dc-aa19-6a959464497c",
	          Generos: ["Animación,Aventura,Comedia,Familia,Drama,Western,Romance"],
	          Año:"2002"
	      },
	      {
	        id: 403,
	        nombre: "Spirit: El Indomable",
	        imagen: "../../Assets/Imagenespeliculas/Spirit_El Indomable.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/604dd69d-f77c-48fa-81c0-576263d72a58",
	          Generos: ["Animación,Aventura,Familia,Western"],
	          Año:"2021"
	      },
	      {
	        id: 404,
	        nombre: "Viaje al centro de la Tierra",
	        imagen: "../../Assets/Imagenespeliculas/Viaje al centro de la Tierra.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/d7f0c136-e566-4641-b1fd-f295aa08d361",
	          Generos: ["Acción,Ciencia ficción,Aventura,Comedia,Familia"],
	          Año:"2008"
	      },
	      {
	        id: 405,
	        nombre: "Un Jefe en Pañales",
	        imagen: "../../Assets/Imagenespeliculas/Un Jefe en Pañales.jpg",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/156b3e63-89d9-4f4f-959f-aeea20e1d2fb",
	          Generos: ["Animación,Comedia,Familia"],
	          Año:"2017"
	      },
	      {
	        id: 406,
	        nombre: "Buscando a Nemo",
	        imagen: "../../Assets/Imagenespeliculas/Buscando a Nemo.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/469eb9d8-0218-497b-86cc-cb5f91252cc8",
	          Generos: ["Animación,Familia"],
	          Año:"2003"
	      },
	      {
	        id: 407,
	        nombre: "Canguro Jack",
	        imagen: "../../Assets/Imagenespeliculas/Canguro Jack.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/7331e28f-2b1b-4a45-a6ca-64c008465c22",
	          Generos: ["Acción,Aventura,Comedia,Familia,Crimen"],
	          Año:"2003"
	      },
	      {
	        id: 408,
	        nombre: "Las travesuras de Peter Rabbit",
	        imagen: "../../Assets/Imagenespeliculas/Las travesuras de Peter Rabbit.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/23b6bdeb-1221-45c1-9eb1-d68683265afd",
	          Generos: ["Animación,Aventura,Familia"],
	          Año:"2018"
	      },
	      {
	        id: 409,
	        nombre: "Mi Amigo El Gigante",
	        imagen: "../../Assets/Imagenespeliculas/Mi Amigo El Gigante.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/6ebfb484-a58a-45fc-a33a-baad875a1065",
	          Generos: ["Aventura,Familia,Fantasía"],
	          Año:"2016"
	      },
	      {
	        id: 410,
	        nombre: "La telaraña de Charlotte",
	        imagen: "../../Assets/Imagenespeliculas/La telaraña de Charlotte.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/98851c6e-6c0d-4f85-9e19-f0fd9cafcff3",
	          Generos: ["Comedia,Familia,Fantasía"],
	          Año:"2006"
	      },
	      {
	        id: 411,
	        nombre: "Doraemon: Nobita y la leyenda de las sirenas",
	        imagen: "../../Assets/Imagenespeliculas/Doraemon Nobita y la leyenda de las sirenas.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/4e6df7fc-adab-4cb3-98ec-2dae31cb53cb",
	          Generos: ["Aventura,Familia,Animación,Fantasía"],
	          Año:"2010"
	      },
	      {
	        id: 412,
	        nombre: "Doraemon: Nobita y la isla de los milagros",
	        imagen: "../../Assets/Imagenespeliculas/Doraemon Nobita y la isla de los milagros.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/23d3bf42-9501-4359-8eba-3c90a91d0d3e",
	          Generos: ["Aventura,Familia,Animación,Fantasía"],
	          Año:"2012"
	      },
	      {
	        id: 413,
	        nombre: "Un Gallo con muchos huevos",
	        imagen: "../../Assets/Imagenespeliculas/Un Gallo con muchos huevos.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/2a0e9c74-e6e9-4377-80c9-f7a70f773f94",
	          Generos: ["Animación,Aventura,Comedia,Familia"],
	          Año:"2015"
	      },
	      {
	        id: 414,
	        nombre: "Los Croods 2: Una Nueva Era",
	        imagen: "../../Assets/Imagenespeliculas/Los Croods 2 Una Nueva Era.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/e368484d-da5d-47fb-8131-89d0966e2d24",
	          Generos: ["Animación,Familia,Aventura,Fantasía,Comedia"],
	          Año:"2020"
	      },
	      {
	        id: 415,
	        nombre: "Los Croods",
	        imagen: "../../Assets/Imagenespeliculas/Los Croods.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/80c4d65a-1754-4fe0-bb3a-fc089c75816b",
	          Generos: ["Animación,Familia,Aventura,Fantasía,Comedia"],
	          Año:"2013"
	      },
	      {
	        id: 416,
	        nombre: "Monsters, Inc.",
	        imagen: "../../Assets/Imagenespeliculas/Monsters, Inc..webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/a371e08d-b0cb-41ec-98d9-86b8be8bf4c7",
	          Generos: ["Animación,Comedia,Familia"],
	          Año:"2001"
	      },
	   
	      {
	        id: 417,
	        nombre: "Monsters University",
	        imagen: "../../Assets/Imagenespeliculas/Monsters University.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/c3d3852e-d189-40d4-a16b-71893495391e",
	          Generos: ["Animación,Comedia,Familia"],
	          Año:"2013"
	      },
	      {
	        id: 418,
	        nombre: "La La Land: Una Historia de Amor",
	        imagen: "../../Assets/Imagenespeliculas/La La Land Una Historia de Amor.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/301ef7bd-1f49-4449-b02d-3cdac13968d7",
	          Generos: ["Comedia,Drama,Romance,Música"],
	          Año:"2016"
	      },
	      {
	        id: 419,
	        nombre: "Annabelle 3: Viene a casa",
	        imagen: "../../Assets/Imagenespeliculas/Annabelle 3 Viene a casa.webp",
	        imagenX: "/imagenes/ilustrator.webp",
	        Video:
	          "https://iframe.mediadelivery.net/embed/261653/b3630a1f-d771-4dbf-8f32-8677f851f099",
	          Generos: ["Terror"],
	          Año:"2019"
	      },
	    ],
	  },
	};

	const peliculas = peliculasData.Peliculas.Extreno;

	function generarPlantillaPelicula(pelicula) {
	    return `
    <div class="Peliculas__card" data-id="${pelicula.id}">
            <figure class="Peliculas__figure">
                <img class="Peliculas__img" src="${pelicula.imagen}" alt="">
            </figure>
            <div class="Peliculas__infor">
            <span class="Peliculas__nombre">${pelicula.nombre}</span>
              <span class="Peliculas__Año">${pelicula.Año}</span>
            </div>
            
        </div>
    `;
	}

	function generarPlantillaPelicula2(pelicula) {
	    return `
   <div class="Pelis-Recientes__slider swiper-slide">
    <div class="Pelis-Recientes__card" data-id="${pelicula.id}">
            <figure class="Pelis-Recientes__figure">
                <img class="Pelis-Recientes__img" src="${pelicula.imagen}" alt="">
            </figure>
            <p class="Pelis-Recientes__nombre">${pelicula.nombre}</p>
        </div>
   </div>

   
    `;
	}


	// export function generarPlantillaPelicula(pelicula) {
	 
	//         return `
	//         <div class="Peliculas__card" data-id="${pelicula.id}">
	//             <figure class="Peliculas__figure">
	//                 <picture>
	//                     <!-- Imagen para pantallas grandes (TV, desktop) -->
	//                     <source media="(min-width: 1919px)" srcset="${pelicula.imagen_tv}">
	//                     <!-- Imagen para pantallas medianas (tablet, desktop) -->
	//                     <source media="(min-width: 768px)" srcset="${pelicula.imagen}">
	//                     <!-- Imagen para pantallas pequeñas (móvil) -->
	//                     <source media="(min-width: 365px)" srcset="${pelicula.imagen_small}">
	//                     <!-- Fallback en caso de que ninguna de las condiciones anteriores sea verdadera -->
	//                         <img class="Peliculas__img" src="${pelicula.imagen}" alt="${pelicula.nombre}">
	//                 </picture>
	//             </figure>
	//             <p class="Peliculas__nombre">${pelicula.nombre}</p>
	//         </div>
	//         `;
	   
	   
	// }

	function calcularProgramasPorPaginaActual() {
	    try {
	        const anchoVentana = window.innerWidth;

	        if (anchoVentana > 350 && anchoVentana < 455) {
	            return { inicial: 21, incremento: 15, limite: 75 };
	        } else if (anchoVentana > 455 && anchoVentana < 572) {
	            return { inicial: 201, incremento: 15, limite: 88 };
	        } else if (anchoVentana > 571 && anchoVentana < 599) {
	            return { inicial: 29, incremento: 16, limite: 89 };
	        } else if (anchoVentana > 598 && anchoVentana < 714) {
	            return { inicial: 27, incremento: 12, limite: 75 };
	        } else if (anchoVentana > 715 && anchoVentana < 767) {
	            return { inicial: 28, incremento: 16, limite: 88 };
	        } else if (anchoVentana > 767 && anchoVentana < 900) {
	            return { inicial: 27, incremento: 12, limite: 75 };
	        } else if (anchoVentana > 900 && anchoVentana < 1024) {
	            return { inicial: 48,incremento: 0, limite: 48 };  
	        } else if (anchoVentana > 1024 && anchoVentana < 1300) {
	            return { inicial: 56 ,incremento: 0, limite: 28}; // Sin incremento ni límite
	        } else if (anchoVentana > 1300 && anchoVentana < 1584) {
	            return { inicial: 55 , incremento: 0, limite: 55}; // Sin incremento ni límite
	        } else if (anchoVentana > 1584 && anchoVentana < 1853) {
	            return { inicial: 60 ,incremento: 0, limite: 60}; // Sin incremento ni límite
	        } else if (anchoVentana > 1853) {
	            return { inicial: 63,incremento: 0, limite: 63 }; // Sin incremento ni límite
	        } else {
	            return { inicial: 21, incremento: 0, limite: 75 }; // Valor predeterminado
	        }
	    } catch (error) {
	        console.error("Error en calcularProgramasPorPaginaActual:", error);
	        return { inicial: 28, incremento: 12, limite: 99 }; // Valor predeterminado en caso de error
	    }
	}

	function cargarDatosUsuario() {
	    try {
	        const usuarioGuardado = localStorage.getItem('usuario');
	        if (usuarioGuardado) {
	            return JSON.parse(usuarioGuardado);
	        } else {
	            console.log('No se encontraron datos guardados en localStorage.');
	            return null;
	        }
	    } catch (error) {
	        console.error('Error al cargar datos de usuario desde localStorage:', error);
	        return null;
	    }
	  }

	const iconobusqueda = document.querySelector('.busqueda-label');
	const buscarPelicula = document.querySelector('.buscar-pelicula');
	const buscarPeliculaInput = document.querySelector('.buscar__input');
	const btnBuscarPelicula = document.querySelector('.buscar__btn');
	const seccionPeliculas = document.querySelector('.Peliculas');

	const {limite}=calcularProgramasPorPaginaActual;

	try {
	    
	  const busquedaclose=document.querySelector('.busqueda__close');
	busquedaclose.addEventListener('click',()=>
	  {
	    buscarPelicula.classList.toggle('buscar-pelicula--active');
	    buscarPeliculaInput.value='';
	    inicializarBusqueda(iconobusqueda, buscarPelicula, buscarPeliculaInput);
	    

	   
	  });

	} catch (error) {
	  
	}

	// Función para filtrar las películas por nombre
	function filtrarPeliculasPorNombre(nombre, peliculas) {
	    if (!peliculas || !Array.isArray(peliculas)) {
	        console.log("La variable 'peliculas' no está definida o no es un array.");
	        return [];
	    }

	    return peliculas.filter(pelicula => {
	        if (pelicula && pelicula.nombre) {
	            return pelicula.nombre.toLowerCase().includes(nombre.toLowerCase());
	        } else {
	            console.warn("Un objeto en 'peliculas' no tiene la propiedad 'nombre'.", pelicula);
	            return false;
	        }
	    });
	}

	function actualizarPeliculas(buscarPeliculaInput, peliculas, generarPeliculas, generarPaginacion, setPage,seccionPeliculas, paginaActual) {
	    const nombre = buscarPeliculaInput.value.trim(); // Eliminamos espacios en blanco
	    console.log('Valor de búsqueda:', nombre);

	    if (nombre === '') {
	        generarPeliculas(peliculas); // Actualizar el grid con todas las películas
	        
	        // Verificar el ancho de la pantalla y generar paginación solo si es mayor a 900px
	        if (window.innerWidth > 900) {
	            generarPaginacion(peliculas); // Actualizar la paginación
	            console.log(window.innerWidth ,"holaaaaa");
	        }
	    } else {
	        const peliculasFiltradas = filtrarPeliculasPorNombre(nombre, peliculas);
	        console.log('Películas filtradas:', peliculasFiltradas);
	       
	        generarPeliculas(peliculasFiltradas,limite); // Actualizar el grid con las películas filtradas
	        
	        // Verificar el ancho de la pantalla y generar paginación solo si es mayor a 900px
	        if (window.innerWidth > 900) {
	        setPage(1);
	       
	        generarPeliculas(peliculasFiltradas,limite); // Actualizar el grid con las películas filtradas
	            generarPaginacion(peliculasFiltradas); // Actualizar la paginación según las películas filtradas
	        }
	    }
	    
	    // Desplazar al inicio de la sección de películas
	    seccionPeliculas.scrollIntoView({ behavior: 'smooth' });
	}

	function inicializarBusqueda(iconobusqueda, buscarPelicula, buscarPeliculaInput) {
	    iconobusqueda.addEventListener('click', () => {
	        buscarPelicula.classList.add('buscar-pelicula--active');
	        buscarPeliculaInput.focus(); // Asegúrate de enfocar el input cuando se hace clic en el icono
	        console.log('Icono de búsqueda clicado, input activado.');
	    });
	}

	function desactivarMenuContextual() {
	    document.addEventListener('contextmenu', function(e) {
	        e.preventDefault();
	    });
	}

	// Desactivar la tecla F12 y otras teclas de desarrollo
	function desactivarTeclasDesarrollo() {
	    document.addEventListener('keydown', function(e) {
	        // Desactivar la tecla F12
	        if (e.key === 'F12' || e.keyCode === 123) {
	            e.preventDefault();
	            return false;
	        }

	        // Desactivar otras teclas de desarrollo como Ctrl+Shift+I y Ctrl+U
	        if (e.ctrlKey && (e.shiftKey || e.key === 'I' || e.key === 'U')) {
	            e.preventDefault();
	            return false;
	        }
	    });
	}


	// function herramientasDesarrolladorAbiertas() {
	//     try {
	//         const widthThreshold = 300; // Umbral de ancho para considerar las herramientas de desarrollador
	//         const heightThreshold = 200; // Umbral de alto para considerar las herramientas de desarrollador
	    
	//         // Diferencia entre el tamaño exterior e interior de la ventana del navegador
	//         const widthDiff = window.outerWidth - window.innerWidth;
	//         const heightDiff = window.outerHeight - window.innerHeight;
	    
	//         // Verificar si alguna de las diferencias supera los umbrales establecidos
	//         return widthDiff > widthThreshold || heightDiff > heightThreshold;
	//     } catch (error) {
	        
	//     }
	  
	// }

	// function herramientasDev(){
	//     try {
	//         let herramientasAbiertas = herramientasDesarrolladorAbiertas();
	  
	//         const modal = document.getElementById('modalDesarrollador');
	       
	    
	//         // Mostrar el modal si las herramientas de desarrollador están abiertas
	//         if (herramientasAbiertas && view!=view2) {
	//             modal.classList.add('modal'); // Agregar clase para mostrar el modal
	//             setTimeout(() => {
	//                 location.reload();
	//             }, 3500);
	            
	//         } else {
	            
	           
	//             // modal.classList.remove('modal');
	//         }  
	//     } catch (error) {
	        
	//     }

	   
	// }

	function enableFullscreen() {
	    document.getElementById('fullscreenBtn').addEventListener('click', function() {
	        var iframe = document.getElementById('myIframe');
	        if (iframe.requestFullscreen) {
	            iframe.requestFullscreen();
	        } else if (iframe.mozRequestFullScreen) { // Firefox
	            iframe.mozRequestFullScreen();
	        } else if (iframe.webkitRequestFullscreen) { // Chrome, Safari, Opera
	            iframe.webkitRequestFullscreen();
	        } else if (iframe.msRequestFullscreen) { // IE/Edge
	            iframe.msRequestFullscreen();
	        }
	    });
	}

	// import platform from 'platform';
	// import '@justinribeiro/lite-youtube';

	// Llama a las funciones para activar la desactivación de menú y teclas de desarrollo
	desactivarMenuContextual();
	desactivarTeclasDesarrollo();
	let programasPorPagina = calcularProgramasPorPaginaActual();
	let paginaActual = 1;
	let MOVIE_NAME = 'Tadeo ';
	let usuarioAutenticado = cargarDatosUsuario();
	const gridd = document.querySelector(".Peliculas__grid");

	function generarPeliculas(peliculas, cantidadMostrar = 0) {
	  const grid = document.querySelector(".Peliculas__grid");
	  if (!grid) {
	    throw new Error("No se encontró el contenedor Peliculas__grid.");
	  }
	  grid.innerHTML = ""; // Limpiar contenido anterior

	  if (!peliculas || !Array.isArray(peliculas)) {
	    console.log("La variable 'peliculas' no está definida o no es un array.");
	    return;
	  }

	  const { inicial, incremento, limite } = programasPorPagina;
	  const cantidad = cantidadMostrar || inicial;

	  // Si el ancho de la ventana es menor a 900 píxeles, omite el límite
	  const esPantallaPequena = window.innerWidth < 901;
	  const limiteReal = esPantallaPequena ? peliculas.length : limite;

	  // Calcular inicio y fin según la página actual y cantidad de películas a mostrar
	  const inicio = (paginaActual - 1) * cantidad;
	  const fin = Math.min(inicio + cantidad, peliculas.length);

	  // Obtener las películas de la página actual
	  const programasPagina = peliculas.slice(inicio, fin);

	  programasPagina.forEach((pelicula) => {
	    const peliculaHTML = generarPlantillaPelicula(pelicula);
	    grid.innerHTML += peliculaHTML;
	  });

	  const botonVerMas = document.querySelector(".boton-vermas");
	  if (cantidad >= limiteReal || fin >= peliculas.length) {
	    botonVerMas.style.display = "none";
	  } else {
	    botonVerMas.style.display = "block";
	  }
	}
	function agregarPeliculasAlGrid(peliculas) {
	  generarPeliculas(peliculas);

	  try {
	    const grid = document.querySelector(".Peliculas__grid");

	    // Remover cualquier evento existente antes de agregar uno nuevo
	    grid.removeEventListener("click", handlePeliculaClick);
	    grid.addEventListener("click", handlePeliculaClick);
	  } catch (error) {
	    console.log("Error al manejar el evento click en la tarjeta:", error);
	  }
	}


	async function handlePeliculaClick(event) {
	  event.preventDefault();

	  const tarjeta = event.target.closest(".Peliculas__card");

	  if (!tarjeta) return;

	  buscarPeliculaInput.value = "";

	  // generarPaginacion(peliculas);

	  usuarioAutenticado = cargarDatosUsuario(); // Recargar datos del usuario desde localStorag

	  if (usuarioAutenticado) {
	    const idPelicula = tarjeta.getAttribute("data-id");
	    const peliculaSeleccionada = peliculas.find(
	      (pelicula) => pelicula.id == idPelicula
	    );
	    if (peliculaSeleccionada) {
	      const { correo, contraseña, usuarioId } = usuarioAutenticado;

	      let detallesDispositivo = await obtenerDetallesDispositivo(); // Declarar aquí

	      const credencialesResultado = await verificarCredenciales(
	        correo,
	        contraseña
	      );
	      if (!credencialesResultado.authenticated) {
	        alert(credencialesResultado.reason);
	        localStorage.removeItem("usuarioAutenticado");
	        localStorage.removeItem("usuario");
	        localStorage.removeItem("deviceId");
	        window.location.href = "login.html";
	        return;
	      }

	      const fechaExpiracionResultado = verificarFechaExpiracion(
	        credencialesResultado.userData.fechaExpiracion
	      );
	      if (fechaExpiracionResultado.expired) {
	        alert(
	          "Tu cuenta ha expirado. Por favor, comunícate con el administrador del servicio."
	        );
	        return;
	      }

	      const dispositivoResultado = await verificarDispositivo(
	        usuarioId,
	        detallesDispositivo.deviceId
	      );
	      if (!dispositivoResultado.verified) {
	        alert(dispositivoResultado.reason);
	        localStorage.removeItem("usuarioAutenticado");
	        localStorage.removeItem("usuario");
	        localStorage.removeItem("deviceId");
	        window.location.href = "login.html";
	        return;
	      }
	      // const infopeli=document.querySelector(".Detalle-Pelicula")
	      // infopeli.classList.toggle.add('active')
	      MOVIE_NAME =  peliculaSeleccionada.nombre;
	      getMovieIdByName(MOVIE_NAME);
	      await cargarVideoPelicula(peliculaSeleccionada.Video);
	      const irVideo = document.querySelector("#fullscreenBtn");
	      irVideo.scrollIntoView({ behavior: "smooth" });
	      // Agregar un retraso de 200ms antes de ejecutar la función generarPeliculas
	     
	    }
	  } else {
	    alert(
	      "No se encontraron datos de usuario guardados o el usuario no está autenticado."
	    );
	    window.location.href = "login.html";
	  }
	}
	inicializarBusqueda(iconobusqueda, buscarPelicula, buscarPeliculaInput);

	btnBuscarPelicula.addEventListener("click", () => {
	 
	  actualizarPeliculas(
	    buscarPeliculaInput,
	    peliculas,
	    generarPeliculas,
	    generarPaginacion,
	    seccionPeliculas,
	    paginaActual
	  );
	});

	const iconobus=document.querySelector(".icono-busqueda");

	iconobus.addEventListener("click", () => {

	  actualizarPeliculas(
	    buscarPeliculaInput,
	    peliculas,
	    generarPeliculas,
	    generarPaginacion,
	    seccionPeliculas,
	    paginaActual
	  );
	});


	buscarPeliculaInput.addEventListener("keydown", (event) => {
	    
	  if (event.key === "Enter") {
	    event.preventDefault(); // Evitar que se realice el comportamiento predeterminado
	   

	    actualizarPeliculas(
	      buscarPeliculaInput,
	      peliculas,
	      generarPeliculas,
	      generarPaginacion,
	      setPage,
	      seccionPeliculas);
	  }
	});

	function agregarBotonVerMas(peliculas) {
	  const botonVerMas = document.querySelector(".boton-vermas");
	  if (!botonVerMas) return;

	  botonVerMas.style.display = "block"; // Asegurarse de que el botón esté visible

	  // Remove any existing event listeners to prevent multiple increments
	  const newButton = botonVerMas.cloneNode(true);
	  botonVerMas.parentNode.replaceChild(newButton, botonVerMas);

	  newButton.addEventListener("click", () => {
	    const grid = document.querySelector(".Peliculas__grid");
	    const peliculasMostradas = grid.querySelectorAll(".Peliculas__card").length;
	    const { incremento, limite } = programasPorPagina;
	    const nuevasPeliculas = peliculasMostradas + incremento;

	    if (nuevasPeliculas >= limite) {
	      newButton.style.display = "none";
	    }

	    generarPeliculas(peliculas, nuevasPeliculas);
	  });
	}
	// function crearIntersectionObserver(callback, rootMargin = '0px', threshold = 0) {
	//     return new IntersectionObserver((entries) => {
	//         entries.forEach(entry => {
	//             if (entry.isIntersecting) {
	//                 callback(entry);
	//             }
	//         });
	//     }, {
	//         rootMargin: rootMargin,
	//         threshold: threshold
	//     });
	// }

	// function inicializarObservador(peliculas) {
	//   const grid = document.querySelector(".Peliculas__grid");
	//   if (!grid) {
	//       throw new Error("No se encontró el contenedor Peliculas__grid.");
	//   }

	//   let peliculasMostradas = grid.querySelectorAll(".Peliculas__card").length;

	//   // Crear una instancia de IntersectionObserver
	//   const observer = new IntersectionObserver((entries) => {
	//       const lastEntry = entries[0];

	//       if (lastEntry.isIntersecting) {
	//           observer.unobserve(lastEntry.target); // Deja de observar el elemento actual

	//           // Llamar a la función para cargar más películas
	//           cargarMasPeliculas(peliculas);
	//       }
	//   }, {
	//       rootMargin: '0px 0px 200px 0px' // Empieza a cargar más películas cuando el último elemento esté a 200px del viewport
	//   });

	//   // Función para observar el último elemento de la grid
	//   function observarUltimoElemento() {
	//       const lastCard = document.querySelector(".Peliculas__card:last-child");
	//       if (lastCard) {
	//           observer.observe(lastCard);
	//       }
	//   }

	//   // Generar las primeras películas
	//   generarPeliculas(peliculas, programasPorPagina.inicial);

	//   // Observar el último elemento de la grid cuando se generan las primeras películas
	//   observarUltimoElemento();
	// }
	// function cargarMasPeliculas(peliculas) {
	//   const grid = document.querySelector(".Peliculas__grid");
	//   if (!grid) {
	//       throw new Error("No se encontró el contenedor Peliculas__grid.");
	//   }

	//   // Obtener la cantidad actual de películas mostradas
	//   const peliculasMostradas = grid.querySelectorAll(".Peliculas__card").length;
	//   const { incremento, limite } = programasPorPagina;
	//   const nuevasPeliculas = peliculasMostradas + incremento;

	//   // Generar más películas basadas en la cantidad de nuevas películas
	//   generarPeliculas(peliculas, nuevasPeliculas);

	//   // Volver a observar el nuevo último elemento después de la carga
	//   const observer = new IntersectionObserver((entries) => {
	//       const lastEntry = entries[0];

	//       if (lastEntry.isIntersecting) {
	//           observer.unobserve(lastEntry.target); // Deja de observar el elemento actual

	//           // Llamar nuevamente a la función para cargar más películas
	//           cargarMasPeliculas(peliculas);
	//       }
	//   }, {
	//       rootMargin: '0px 0px 200px 0px'
	//   });

	//   const lastCard = document.querySelector(".Peliculas__card:last-child");
	//   if (lastCard) {
	//       observer.observe(lastCard);
	//   }

	//   // Ocultar el botón "Ver más" si se alcanza el límite
	//   const botonVerMas = document.querySelector(".boton-vermas");
	//   if (nuevasPeliculas >= programasPorPagina.limite) {
	//       if (botonVerMas) {
	//           botonVerMas.style.display = "none";
	//       }
	//   } else {
	//       if (botonVerMas) {
	//           botonVerMas.style.display = "block";
	//       }
	//   }
	// }
	// function observarUltimaCard() {
	//   const lastCard = document.querySelector(".Peliculas__card:last-child");
	//   if (!lastCard) {
	//       console.log("No se encontró el último .Peliculas__card.");
	//       return;
	//   }

	//   console.log("Último card encontrado:", lastCard);

	//   const observer = new IntersectionObserver((entries) => {
	//       entries.forEach(entry => {
	//           if (entry.isIntersecting) {
	//               console.log("¡La última card está a punto de mostrarse!");
	//           }
	//       });
	//   }, {
	//       root: null, // Observa en relación al viewport
	//       rootMargin: '0px 0px -100px 0px', // Ajusta el margen inferior para que se active antes de llegar al viewport
	//       threshold: 0 // Activar cuando el elemento esté parcialmente visible
	//   });

	//   observer.observe(lastCard);
	// }

	function generarPaginacion(peliculas) {
	  if (!peliculas || !Array.isArray(peliculas)) {
	    console.log("La variable 'peliculas' no está definida o no es un array.");
	    return;
	  }

	  try {
	    const totalPaginas = Math.ceil(
	      peliculas.length / programasPorPagina.limite
	    );
	    const contenedorPaginacion = document.querySelector(".paginas");
	    contenedorPaginacion.innerHTML = ""; // Limpiar contenido anterior
	    const currentPage = getCurrentPage();

	    for (let index = 1; index <= totalPaginas; index++) {
	      const btnpaginacion = document.createElement("button");
	      btnpaginacion.classList.add("paginas__btn");
	      btnpaginacion.textContent = index;

	      if (index === currentPage) {
	        btnpaginacion.classList.add("active");
	      }

	      btnpaginacion.addEventListener("click", () => {
	        setPage(index);
	        paginaActual = index;
	        generarPeliculas(peliculas);
	  
	     
	        contenedorPaginacion
	          .querySelectorAll(".paginas__btn")
	          .forEach((btn) => {
	            btn.classList.remove("active");
	          });

	        btnpaginacion.classList.add("active");
	        setTimeout(() => {
	          // Selecciona todos los elementos con la clase '.Peliculas__card'
	          const cards = document.querySelectorAll(".Peliculas__card");
	        
	          // Verifica si hay al menos una tarjeta en la lista
	          if (cards.length > 0) {
	            // Selecciona la última tarjeta
	            const ultimaCard = cards[cards.length - 8];
	        
	      
	        
	            // Desplaza suavemente a la última tarjeta
	            ultimaCard.scrollIntoView({
	              behavior: "smooth", // Activa el desplazamiento suave
	              block: "start", // Desplaza el contenedor al principio del área visible
	            });
	          } else {
	            console.log("No se encontraron tarjetas con la clase '.Peliculas__card'");
	          }
	        }, 200); // Ajusta el tiempo si es necesario
	        
	      });

	      contenedorPaginacion.appendChild(btnpaginacion);
	    }
	  } catch (error) {
	    console.error("Error al generar la paginación:", error);
	  }
	}

	// agregarPeliculasAlGrid(peliculas)
	window.addEventListener("DOMContentLoaded", async ()=> {
	  try {

	    // inicializarObservador(peliculas);
	    await verificarYConfigurar2();
	    // programasPorPagina = programasPorPagina;
	    // Asegúrate de que la variable 'peliculas' esté definida y no sea nula
	    if (peliculas && peliculas.length > 0) {
	      agregarPeliculasAlGrid(peliculas);

	      // Verificar el ancho de la pantalla antes de generar la paginación
	      if (window.innerWidth > 920) {
	        // Volver a generar la paginación solo si el ancho de la pantalla es mayor a 900 píxeles
	        generarPaginacion(peliculas);
	        verificarYConfigurar2();
	        // observarUltimaCard()
	      }else {
	        // observarUltimaCard()
	        agregarBotonVerMas(peliculas);
	      }
	    }
	  } catch (error) {
	    console.error("Error al manejar el evento DOMContentLoaded:", error);
	  }
	});
	let viewp=window.innerWidth;
	window.addEventListener("resize", async() => {
	  viewp=window.innerWidth;
	  programasPorPagina = calcularProgramasPorPaginaActual();
	  if(viewp > 920){
	    console.log(viewp);
	    agregarPeliculasAlGrid(peliculas);
	    generarPaginacion(peliculas);
	    console.log(programasPorPagina);
	    verificarYConfigurar2();
	  
	}else if(viewp<920){
	  agregarPeliculasAlGrid(peliculas);
	agregarBotonVerMas(peliculas);
	}
	await verificarYConfigurar2();
	});
	// async function verificarYConfigurar2() {
	//   // Verificar si hay datos de usuario en localStorage
	//   const usuario = localStorage.getItem('usuarioAutenticado');
	//   const btnperfil = document.querySelector(".navegacion__boton");
	//   const btnlogueoperfil=document.querySelector(".navegacion__perfil")
	  
	//   if (usuario) {
	//     // El usuario está autenticado, configurar la interfaz
	  

	   
	//     if (btnperfil) {
	//       btnperfil.textContent = "";
	//       btnperfil.style.display = "none";
	    
	//       if (window.innerWidth > 924) {
	        
	//         btnlogueoperfil.style.display="block"
	//         btnlogueoperfil.addEventListener('click',()=>{
	//           window.location.href="perfiles.html"
	//         })

	//       }else{
	    
	//          btnlogueoperfil.style.display="none"
	//       }
	//       // console.log(busquedainputt)
	//       //   busquedainputt.style.right = "19%"
	//     } else {
	//       console.log("Botón de perfil no encontrado.");
	      
	//     }
	//   } else {
	 
	//     console.log("No hay usuario autenticado en localStorage.");
	//   }
	// }

	async function verificarYConfigurar2() {
	  // Verificar si hay datos de usuario en localStorage
	  const usuario = localStorage.getItem('usuarioAutenticado');
	  const btnperfil = document.querySelector(".navegacion__boton");
	  const btnlogueoperfil = document.querySelector(".navegacion__perfil");

	  if (usuario) {
	    // El usuario está autenticado, configurar la interfaz

	    if (btnperfil) {
	      btnperfil.style.display = "none";
	    }

	    if (btnlogueoperfil) {
	      if (window.innerWidth > 924) {
	        btnlogueoperfil.style.display = "block";
	        btnlogueoperfil.addEventListener('click', () => {
	          
	        });
	      } else {
	        btnlogueoperfil.style.display = "none";
	      }
	    }
	  } else {
	    // Usuario no autenticado, ajustar visibilidad de botones
	    // if (btnperfil) {
	    //   btnperfil.style.display = "block";
	    // }

	    if (btnlogueoperfil) {
	      btnlogueoperfil.style.display = "none";
	    }
	  }
	}

	function getCurrentPage() {
	  const params = new URLSearchParams(window.location.search);
	  let hash = window.location.hash; // Obtener el hash actual

	  // Si el hash está vacío o no es '#peliculas', establecerlo en '#peliculas'
	  if (!hash || hash !== "#peliculas") {
	    hash = "#peliculas";
	    window.history.replaceState(
	      {},
	      "",
	      `${window.location.pathname}?peliculas&page=${params.get("page")}`
	    );
	  }

	  return parseInt(params.get("page")) || 1;
	}

	function setPage(page) {
	  const params = new URLSearchParams(window.location.search);
	  params.set("page", page);
	  window.history.pushState(
	    {},
	    "",
	    `${window.location.pathname}?${params.toString()}`
	  );
	  paginaActual = page;
	  generarPeliculas(peliculas);
	  // agregarBotonVerMas(peliculas); // Volver a agregar el botón "Ver más"
	  // generarPaginacion(peliculas);
	}

	function cargarVideoPelicula(pelicula) {
	  try {
	    buscarPelicula.classList.remove("buscar-pelicula--active");
	    const videoPelicula = document.querySelector(".DetallePrograma__ConVideo");
	    if (!videoPelicula) {
	      throw new Error(
	        "No se encontró el contenedor .DetallePrograma__ConVideo."
	      );
	    }

	    const plantilla = `
      <iframe id="myIframe" src=${pelicula}?autoplay=true&loop=false&muted=false&preload=true&responsive=true" loading="lazy" style="border:0;height:100%;width:100%;" allow="accelerometer;gyroscope;autoplay;encrypted-media;picture-in-picture;" allowfullscreen="true"></iframe>
    `;
	    videoPelicula.innerHTML = plantilla;
	  } catch (error) {}
	}
	window.addEventListener("popstate", () => {
	  paginaActual = getCurrentPage(); // Actualizar la página actual según la URL
	  setPage(paginaActual);
	  agregarPeliculasAlGrid(peliculas); // Cargar los programas de la página actual
	  generarPaginacion(); // Regenerar la paginación para marcar el botón de la página actual
	});

	window.addEventListener("load", () => {
	  const currentPage = getCurrentPage(); // Obtener la página actual desde la URL
	  setPage(currentPage); // Establecer la página actual y cargar los programas
	});
	// Activa el modo fullscreen al hacer clic en el botón
	enableFullscreen();
	function configurarEventosGeneros() {
	  const categorias = document.querySelectorAll(".Genero-categorias__figura");
	  // Mostrar en la consola el número de elementos encontrados
	  // console.log(`Número de categorías encontradas: ${categorias.length}`);

	  categorias.forEach((categoria, index) => {
	    

	    categoria.addEventListener("click", manejarClickGenero);
	  });
	}
	configurarEventosGeneros();

	// Filtrar películas por género (como en tu función manejarClickGenero)
	function manejarClickGenero(event) {
	  const generoSeleccionado = event.currentTarget.getAttribute("data-genre");

	  if (generoSeleccionado) {
	    if (generoSeleccionado.trim() === "") {
	      // Si el valor de data-genre está vacío, mostrar todas las películas
	      console.log(
	        "No se seleccionó ningún género. Mostrando todas las películas."
	      );
	      agregarPeliculasAlGrid(peliculas);
	      agregarBotonVerMas(peliculas);

	      // Solo genera la paginación si el ancho de la pantalla es mayor a 900 píxeles
	      if (window.innerWidth > 920) {
	        generarPaginacion(peliculas);
	      }

	      // Restablecer la página actual a 1
	      paginaActual = 1;

	      // Esperar a que el DOM se actualice antes de aplicar el desplazamiento
	      setTimeout(() => {
	     

	        if (gridd) {
	          gridd.scrollIntoView({
	            behavior: "smooth", // Activa el desplazamiento suave
	            block: "start", // Desplaza el contenedor al principio del área visible
	          });
	        }
	      }, 100); // Ajusta el tiempo si es necesario
	    } else {
	      // Dividir el género seleccionado en un array de géneros
	      const generosSeleccionados = generoSeleccionado
	        .split(",")
	        .map((g) => g.trim());
	  
	      // Filtrar las películas por el género seleccionado
	      const peliculasFiltrada = peliculas.filter((pelicula) => {
	        // Asegúrate de que 'Generos' existe y es un array
	        if (Array.isArray(pelicula.Generos)) {
	          // Verifica si alguno de los géneros de la película coincide con los géneros seleccionados
	          return pelicula.Generos.some((genero) =>
	            generosSeleccionados.includes(genero)
	          );
	        } else {
	          console.warn(
	            "La propiedad 'Generos' no está definida o no es un array:",
	            pelicula
	          );
	          return false; // Excluye esta película del filtrado
	        }
	      });
	      setPage(1);
	      // Aquí puedes llamar a la función que actualiza la vista con las películas filtradas
	      agregarPeliculasAlGrid(peliculasFiltrada);
	    
	      if(peliculasFiltrada.length>24){
	        agregarBotonVerMas(peliculasFiltrada);
	      }
	      // Solo genera la paginación si el ancho de la pantalla es mayor a 900 píxeles
	      if (window.innerWidth > 920) {
	        generarPaginacion(peliculasFiltrada);   
	      }else {
	        const paginasss=document.getElementById("sectionpaginas");
	        const generadopaginas=document.getElementById("paginastotales");
	        paginasss.style.margin="0";
	        generadopaginas.innerHTML="";
	      
	      }
	     
	      setTimeout(() => {
	  

	        if (gridd) {
	          gridd.scrollIntoView({
	            behavior: "smooth", // Activa el desplazamiento suave
	            block: "start", // Desplaza el contenedor al principio del área visible
	          });
	        }
	      }, 100);
	    }
	  } else {
	    console.log(
	      "No se encontró el atributo 'data-genre' en el elemento clickeado."
	    );
	  }
	}

	let botones = document.querySelectorAll(
	  "#Movile_Home, #Movile_Peliculas, #Movile_Series, #Movile_Favoritos, #Movile_Settings"
	);

	botones.forEach((boton) => {
	  boton.addEventListener("click", () => {
	    remov_Activ();
	    boton.classList.add("activ");
	  });
	});

	function remov_Activ() {
	  botones.forEach((boton) => boton.classList.remove("activ"));
	}



	async function verificarYConfigurar() {

	  if (usuarioAutenticado) {
	    const { correo, contraseña } = usuarioAutenticado;

	    // Verificar las credenciales del usuario
	    const credencialesResultado = await verificarCredenciales(correo, contraseña);

	    if (credencialesResultado.authenticated) {
	     
	      // Usuario autenticado, configurar el botón de ajustes
	      const settings = document.getElementById("Movile_Settings");
	      settings.addEventListener('click', () => {
	        window.location.href = "perfiles.html";
	      });
	    } else {
	      console.log("Nose encontraron credenciales  aaaa");
	      
	    }
	  }
	}

	// Llamar a la nueva función en el contexto adecuado
	verificarYConfigurar();


	  // Nombre en español

	// //api themviedb
	// async function getMovieIdByName(movieName) {
	//   try {
	//       const response = await fetch(`https://api.themoviedb.org/3/search/movie?query=${encodeURIComponent(movieName)}&language=es-ES`, {
	//           headers: {
	//               Authorization: `Bearer ${API_KEY}`,
	//               'Content-Type': 'application/json;charset=utf-8'
	//           }
	//       });

	//       if (!response.ok) {
	//           throw new Error('Failed to search movie by name');
	//       }

	//       const searchResults = await response.json();
	      
	//       if (searchResults.results && searchResults.results.length > 0) {
	//           const firstResult = searchResults.results[0];
	//           const movieId = firstResult.id;
	          
	//           fetchMovieDetailsById(movieId);
	//       } else {
	//           console.log('No se encontraron resultados.');
	//       }
	//   } catch (error) {
	//       console.error('Error:', error);
	//   }
	// }

	// async function fetchMovieDetailsById(movieId) {
	//   try {
	//       const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?language=es-ES`, {
	//           headers: {
	//               Authorization: `Bearer ${API_KEY}`,
	//               'Content-Type': 'application/json;charset=utf-8'
	//           }
	//       });

	//       if (!response.ok) {
	//           throw new Error('Failed to fetch movie details');
	//       }

	//       const movieDetails = await response.json();
	      
	//       // Usar w780 para el fondo (backdrop) y w342 para el póster
	//       document.querySelector('.Detalle-Pelicula__back').src = `https://image.tmdb.org/t/p/w1280${movieDetails.backdrop_path}`;
	//       // document.querySelector('.Detalle-Pelicula__img').src = `https://image.tmdb.org/t/p/w780${movieDetails.poster_path}`;
	//       document.querySelector('.Detalle-Pelicula__titulo').textContent = movieDetails.title;
	//       let descr  = movieDetails.overview;
	//       const durate= `${movieDetails.runtime}`;
	  
	//    // Duración
	//        document.querySelector('.Detalle-Pelicula__duracion').textContent =formatDuration(durate)

	//        document.querySelector('.Detalle-Pelicula__descripcion').textContent=cortarDescripcion(descr)
	//       document.getElementById('movie-year').textContent = `${movieDetails.release_date.split('-')[0]}`;
	//     //calificacion
	//      // Calificación
	//      const rating = movieDetails.vote_average; // Calificación en escala de 0 a 10
	//      document.querySelector('.Detalle-Pelicula__calif').textContent = `${rating}`;

	//       //clasificacion
	//       const releaseDatesResponse = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/release_dates`, {
	//         headers: {
	//             Authorization: `Bearer ${API_KEY}`,
	//             'Content-Type': 'application/json;charset=utf-8'
	//         }
	//     });
	    
	//     if (!releaseDatesResponse.ok) {
	//         throw new Error('Failed to fetch release dates');
	//     }

	//     const releaseDates = await releaseDatesResponse.json();
	//     // Encuentra la clasificación en Estados Unidos
	//     const releaseInfo = releaseDates.results.find(result => result.iso_3166_1 === 'US'); 
	//     const certification = releaseInfo ? releaseInfo.release_dates[0].certification : 'No disponible';
	    
	//     // Interpretar la clasificación
	//     const interpretation = interpretCertification(certification);
	//     document.querySelector('.Detalle-Pelicula__clasification').textContent = `  ${interpretation}`;


	//   } catch (error) {
	//       console.log('Error:', error);
	//   }
	// }


	const botonsession=document.querySelector(".navegacion__boton");

	botonsession.addEventListener("click", () => {
	  window.location.href = "login.html";
	});



	const PelisRecientes = peliculasData.Peliculas.Extreno;

	function agregarPeliculasRecientes(PelisRecientes) {
	  

	  // Obtener el contenedor
	  const gridRecientes = document.querySelector(".Pelis-Recientes__grid");
	  if (!gridRecientes) {
	    throw new Error("No se encontró el contenedor Pelis-Recientes__grid.");
	  }
	  


	  // Limpiar el contenedor anterior
	  gridRecientes.innerHTML = "";


	  // Tomar las últimas 10 películas
	  const ultimasPeliculas = PelisRecientes.slice(-15);
	// Invertir el arreglo para que el más reciente sea el primero
	const ultimasPeliculasInvertidas = ultimasPeliculas.reverse();

	// Generar y agregar las películas al contenedor
	ultimasPeliculasInvertidas.forEach((pelicula) => {
	  const peliculaHTML = generarPlantillaPelicula2(pelicula);
	  gridRecientes.innerHTML += peliculaHTML;
	});

	}

	// Ejecución de la función con el conjunto de datos de películas
	agregarPeliculasRecientes(PelisRecientes);
	// Función para manejar el clic en una tarjeta de película

	async function handlePeliculaClickR(event) {
	  event.preventDefault();

	  // Ajusta el selector para la nueva estructura de las tarjetas
	  const tarjeta = event.target.closest(".Pelis-Recientes__card");

	  if (!tarjeta) {
	    console.log("No se hizo clic en una tarjeta válida.");
	    return;
	  }

	  // Limpia el campo de búsqueda
	  buscarPeliculaInput.value = "";

	  // Cargar datos del usuario desde localStorage
	  usuarioAutenticado = cargarDatosUsuario();
	  console.log("Datos del usuario cargados:", usuarioAutenticado);

	  if (usuarioAutenticado) {
	    const idPelicula = tarjeta.getAttribute("data-id");
	    const peliculaSeleccionada = PelisRecientes.find(
	      (pelicula) => pelicula.id == idPelicula
	    );
	    console.log("Película seleccionada:", peliculaSeleccionada);

	    if (peliculaSeleccionada) {
	      const { correo, contraseña, usuarioId } = usuarioAutenticado;

	      // Obtener detalles del dispositivo
	      let detallesDispositivo = await obtenerDetallesDispositivo();
	      console.log("Detalles del dispositivo:", detallesDispositivo);

	      // Verificar credenciales del usuario
	      const credencialesResultado = await verificarCredenciales(correo, contraseña);
	      if (!credencialesResultado.authenticated) {
	        alert(credencialesResultado.reason);
	        localStorage.removeItem("usuarioAutenticado");
	        localStorage.removeItem("usuario");
	        localStorage.removeItem("deviceId");
	        window.location.href = "login.html";
	        return;
	      }

	      // Verificar fecha de expiración
	      const fechaExpiracionResultado = verificarFechaExpiracion(credencialesResultado.userData.fechaExpiracion);
	      if (fechaExpiracionResultado.expired) {
	        alert("Tu cuenta ha expirado. Por favor, comunícate con el administrador del servicio.");
	        return;
	      }

	      // Verificar dispositivo
	      const dispositivoResultado = await verificarDispositivo(usuarioId, detallesDispositivo.deviceId);
	      if (!dispositivoResultado.verified) {
	        alert(dispositivoResultado.reason);
	        localStorage.removeItem("usuarioAutenticado");
	        localStorage.removeItem("usuario");
	        localStorage.removeItem("deviceId");
	        window.location.href = "login.html";
	        return;
	      }

	      // Procesar la película seleccionada
	      // MOVIE_NAME = peliculaSeleccionada.nombre;
	      // getMovieIdByName(MOVIE_NAME);
	      await cargarVideoPelicula(peliculaSeleccionada.Video);
	      const irVideo = document.querySelector("#fullscreenBtn");
	      if (irVideo) {
	        irVideo.scrollIntoView({ behavior: "smooth" });
	      }
	    } else {
	      console.log("No se encontró la película con el ID:", idPelicula);
	    }
	  } else {
	    alert("No se encontraron datos de usuario guardados o el usuario no está autenticado.");
	    window.location.href = "login.html";
	  }
	}

	// Ejecuta la función para agregar las películas recientes
	agregarPeliculasRecientes(PelisRecientes);

	// Configura el manejador de eventos para el contenedor de tarjetas
	document.querySelector(".Pelis-Recientes__grid").addEventListener("click", (event) => {
	  handlePeliculaClickR(event);
	});

	const cerrarSession = document.querySelector("#cerrarsession");
	cerrarSession.addEventListener("click", async () => {
	  

	  // Llamada a la función cerrarSesion()
	  await cerrarSesion();

	  // Cambiar la visibilidad de los elementos después de cerrar sesión
	  if(viewp>920){

	    const navegacionPerfil = document.querySelector('.navegacion__perfil');
	    const navegacionBoton = document.querySelector('.navegacion__boton');
	   navegacionPerfil.style.display = 'none';
	   navegacionBoton.style.display = 'block';
	   
	    console.log("Sesión cerrada y usuario redirigido.");
	  }

	});

	exports.verificarYConfigurar2 = verificarYConfigurar2;

	return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
